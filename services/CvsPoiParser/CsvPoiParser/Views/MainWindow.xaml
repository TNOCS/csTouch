<Window x:Class="PoiConvertor.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:model="clr-namespace:CsvToDataService.Model;assembly=CsvToDataService"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:models="clr-namespace:PoiConvertor.Model"
        xmlns:dataServer="clr-namespace:DataServer;assembly=csCommon"
        xmlns:devzest="http://schemas.devzest.com/presentation"
        xmlns:poiio="clr-namespace:csCommon.Types.DataServer.PoI.IO;assembly=csCommon"
        xmlns:views="clr-namespace:PoiConvertor.Views"
        xmlns:csUtils="clr-namespace:csCommon.Utils;assembly=csCommon"
        xmlns:templates="clr-namespace:csCommon.Types.DataServer.PoI.Templates;assembly=csCommon"
        Title="Points of Interest Convertor"
        mc:Ignorable="d" 
        d:DataContext="{d:DesignInstance views:MainWindow}"
        MinWidth="800" MinHeight="600"
        Icon="../Resources/PoIcon.ico">

    <!-- All UI resources (collections, convertors, et cetera) in use by the PoI Convertor window. -->
    <Window.Resources>

        <!-- Border for all text boxes -->
        <Style x:Key="TextBlockBorder" TargetType="{x:Type Border}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
            <Setter Property="CornerRadius" Value="3"/>
            <Setter Property="Margin" Value="0,0,3,0"/>
        </Style>

        <!-- Visibility based on bool -->
        <BooleanToVisibilityConverter x:Key="BoolToVisibility" />

        <!-- CSV Conversion: meta types for columns (e.g. denoting that a column stores a number, text, image, ...). -->
        <ObjectDataProvider x:Key="MetaTypes"
                            MethodName="GetValues"
                            ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="dataServer:MetaTypes" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!-- CSV Conversion: options for number formatting (e.g. integer, one decimal, percent, none, ...). -->
        <csUtils:NumberFormats x:Key="NumberFormats" />

        <!-- CSV Conversion: options for delimiter between columns (i.e. ','  or ';'). -->
        <ObjectDataProvider x:Key="CsvSeparators"
                            MethodName="GetValues"
                            ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="model:CsvSeparator" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!-- CSV Conversion: processing actions for columns (e.g. denoting that a column stores a date, address, latitude, ...). -->
        <ObjectDataProvider x:Key="ProcessingActions"
                            MethodName="GetValues"
                            ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="model:ProcessingActions" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!-- Export: PoI service exporters available. -->
        <poiio:PoiServiceExporters x:Key="PoiServiceExporterList"/>
        <!-- Warning, but it works! -->

        <!-- Convert templates. -->
        <ObjectDataProvider x:Key="TemplateFormats"
                            MethodName="GetValues" 
                            ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="templates:SupportedTemplateExtensions"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!-- CSV Conversion: data template for processing actions for columns (e.g. denoting that a column stores a date, address, latitude, ...). -->
        <DataTemplate x:Key="CellAction" DataType="model:CsvHeader">
            <ComboBox Width="200"
                      HorizontalAlignment="Stretch"
                      IsEnabled="{Binding CanModifyAttributes}"
                      ItemsSource="{Binding Source={StaticResource ProcessingActions}}"
                      SelectedItem="{Binding ProcessingAction}" />
        </DataTemplate>

        <!-- CSV Conversion: data template for values occurring in a column (for convenience only; the user can inspect the column values). -->
        <DataTemplate x:Key="CellValues" DataType="model:CsvHeader">
            <ComboBox Width="200"
                      HorizontalAlignment="Stretch"
                      ItemsSource="{Binding ExampleCellValues}"
                      SelectedIndex="0" />
        </DataTemplate>

        <!-- CSV Conversion: template to select column templates. -->
        <DataTemplate x:Key="TemplateTemplate" DataType="model:CsvHeader">
            <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" LastChildFill="True" Width="100">
                <ComboBox IsEditable="False" ItemsSource="{Binding Templates}" SelectedItem="{Binding Template}" IsEnabled="{Binding HasTemplates}"/>
            </DockPanel>
        </DataTemplate>

        <!-- CSV Conversion: template to assign sections to columns. -->
        <DataTemplate x:Key="SectionTemplate" DataType="model:CsvHeader">
            <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" LastChildFill="True">
                <views:DataButton Data="{Binding Self}" Name="AddSectionButton" DockPanel.Dock="Right" Content="+" Width="20" Click="OnAddSectionButtonClick" IsEnabled="{Binding CanModifyAttributes}"/>
                <ComboBox IsEditable="False" ItemsSource="{Binding Sections}" SelectedItem="{Binding Section}" MaxDropDownHeight="100" IsEnabled="{Binding CanModifyAttributes}"/>
            </DockPanel>
        </DataTemplate>

        <!-- CSV Conversion: data template for whether a column should be shown in a popup. -->
        <DataTemplate x:Key="PopupTemplate" DataType="model:CsvHeader">
            <CheckBox x:Name="ShowInPopup"
                      Width="30"
                      IsChecked="{Binding VisibleInCallOut}"
                      IsEnabled="{Binding CanModifyAttributes}"
                      HorizontalAlignment="Stretch" />
        </DataTemplate>

        <!-- CSV Conversion: data template for the title (label) to give to a column. -->
        <DataTemplate x:Key="TitleTemplate" DataType="model:CsvHeader">
            <TextBox x:Name="Title"
                     IsEnabled="{Binding VisibleInCallOut}"
                     Width="100"
                     Text="{Binding Title}"
                     HorizontalAlignment="Stretch" />
        </DataTemplate>

        <!-- CSV Conversion: data template for the description (label) to give to a column. -->
        <DataTemplate x:Key="DescriptionTemplate" DataType="model:CsvHeader">
            <TextBox x:Name="Title"
                     IsEnabled="{Binding VisibleInCallOut}"
                     TextWrapping="Wrap"
                     Width="250"
                     Text="{Binding Description}"
                     HorizontalAlignment="Stretch" />
        </DataTemplate>

        <!-- CSV Conversion: data template for the meta types for columns (e.g. denoting that a column stores a number, text, image, ...). -->
        <DataTemplate x:Key="TypeTemplate" DataType="model:CsvHeader">
            <ComboBox Width="100"
                      HorizontalAlignment="Stretch"
                      IsEnabled="{Binding CanModifyAttributes}"
                      ItemsSource="{Binding Source={StaticResource MetaTypes}}"
                      SelectedItem="{Binding Type}" />
        </DataTemplate>

        <!-- CSV Conversion: data template for whether a column contains values a user can edit. -->
        <DataTemplate x:Key="EditTemplate" DataType="model:CsvHeader">
            <CheckBox x:Name="CanEdit"
                      Width="30"
                      IsEnabled="{Binding VisibleInCallOut}"
                      IsChecked="{Binding IsEditable}"
                      HorizontalAlignment="Stretch" />
        </DataTemplate>

        <!-- CSV Conversion: data template for whether a column contains values a user can search. -->
        <DataTemplate x:Key="SearchTemplate" DataType="model:CsvHeader">
            <CheckBox x:Name="CanSearch"
                      Width="30"
                      IsChecked="{Binding IsSearchable}"
                      IsEnabled="{Binding CanModifyAttributes}"
                      HorizontalAlignment="Stretch" />
        </DataTemplate>

        <!-- CSV Conversion: data template for the number formatting used by a column. -->
        <DataTemplate x:Key="FormatTemplate" DataType="model:CsvHeader">
            <ComboBox Width="100"
                      HorizontalAlignment="Stretch"
                      IsEnabled="{Binding CanSetNumberFormatting}"
                      ItemsSource="{Binding Source={StaticResource NumberFormats}}"
                      SelectedItem="{Binding NumberFormatDescription}" />
        </DataTemplate>

        <!-- CSV Conversion: data template for the minimum value used by a column. -->
        <DataTemplate x:Key="MinValueTemplate" DataType="model:CsvHeader">
            <TextBox Width="80" Text="{Binding MinValueDescription}" IsEnabled="{Binding CanSetMinValue}"/>
        </DataTemplate>

        <!-- CSV Conversion: data template for the index of a column (to reorder columns if needed). -->
        <DataTemplate x:Key="IndexTemplate" DataType="model:CsvHeader">
            <ComboBox Width="40"
                      HorizontalAlignment="Stretch"
                      IsEnabled="{Binding CanModifyAttributes}"
                      ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type Window}}, Path=Indexes}"
                      SelectedItem="{Binding Index}" />
        </DataTemplate>

        <!-- CSV Conversion: data template for editing the title (label) of a column. -->
        <DataTemplate x:Key="LabelTemplate" DataType="models:Label">
            <StackPanel x:Name="title" Orientation="Horizontal">
                <TextBlock Text="{Binding Name}" />
                <TextBlock Text="{Binding Count, StringFormat=' ({0})'}" />
            </StackPanel>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsEverywhere}">
                    <Setter TargetName="title" Property="TextBlock.FontWeight" Value="Bold" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!-- Export: data template for the available exporters -->
        <!--DataTemplate x:Key="ExporterValidationTemplate" DataType="poiio:PoiServiceExporterUtil">
            <CheckBox VerticalAlignment="Stretch" VerticalContentAlignment="Center" Content="" IsChecked="{Binding EnableValidation}"
                      Margin="5" IsEnabled="False"></CheckBox>
        </-->

        <!-- Aggregate: data template for available aggregation policies -->
        <DataTemplate x:Key="AggregationPolicyTemplate" DataType="model:AggregationPolicy">
            <ComboBox ItemsSource="{Binding Policies}" SelectedValue="{Binding AggregationPolicyString}" MinWidth="120"/>
        </DataTemplate>

        <!-- Hierarchic merge: data template for editing the name of a sublayer. -->
        <DataTemplate x:Key="LayerNameTemplate" DataType="model:LayerFileDescription">
            <TextBox x:Name="Name"
                     Text="{Binding Description}" MinWidth="300"
                     HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch"/>
        </DataTemplate>

    </Window.Resources>

    <!-- MAIN UI ELEMENT -->
    <TabControl Margin="5">

        <!-- CSV to DS conversion. -->
        <TabItem Header="Edit data templates" Margin="0">
            <Grid d:DataContext="{d:DesignInstance views:MainWindow}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <!-- First row: the currently open file, and an open button. -->
                <DockPanel LastChildFill="True" Grid.Row="0" Margin="0,5,0,10">
                    <Button x:Name="CheckBagButton" Content="Configure BAG connection" Click="OnConfigureBagButtonClick" Margin="0,0,5,0"/>
                    <UniformGrid DockPanel.Dock="Right" Rows="1">
                        <Button x:Name="OpenCsv" Click="OnOpenCsvButtonClick" Content="Open file..." Margin="2,0,0,0"/>
                        <Button x:Name="SaveAsButton"
                                Margin="5,0,0,0"
                                Click="OnStartExportCsvToDsButtonClick"
                                Content="Save file..."
                                IsEnabled="{Binding CanStart}" />
                        <Button x:Name="SaveDsButton"
                                Margin="5,0,0,0"
                                MinWidth="80"
                                Click="OnStartExportCsvToDsButtonClick"
                                Content="Save data service"
                                Visibility="Collapsed"
                                IsEnabled="{Binding CanStart}" />
                        <Button x:Name="SaveTemplates"
                                Margin="5,0,0,0"
                                MinWidth="80"
                                Click="OnSaveTemplatesClick"
                                Content="Save templates" 
                                IsEnabled="{Binding CanStart}"/>
                    </UniformGrid>
                    <Border Style="{StaticResource TextBlockBorder}">
                        <TextBlock x:Name="CsvFileName" VerticalAlignment="Center" Text="{Binding OriginalFile}"/>
                    </Border>
                </DockPanel>

                <!-- Second row: editing the templates for headers. -->
                <Expander Grid.Row="1" IsExpanded="True" Header="Template editor">
                    <ListView x:Name="Headers"
                          ItemsSource="{Binding CsvHeaders}"
                          SelectedItem="{Binding SelectedCsvHeader}">
                        <ListView.View>
                            <GridView AllowsColumnReorder="True" ColumnHeaderToolTip="CSV Header Information">
                                <GridViewColumn DisplayMemberBinding="{Binding Id}"
                                            Width="40"
                                            Header="Id" />
                                <GridViewColumn DisplayMemberBinding="{Binding Header}" Header="Header"/>
                                <GridViewColumn CellTemplate="{StaticResource TemplateTemplate}" Header="Template"/>
                                <GridViewColumn CellTemplate="{StaticResource SectionTemplate}" Header="Section"/>
                                <GridViewColumn CellTemplate="{StaticResource CellAction}"
                                            Header="Action" />
                                <GridViewColumn CellTemplate="{StaticResource CellValues}"
                                            Header="Cell values" />
                                <GridViewColumn Width="60"
                                            CellTemplate="{StaticResource PopupTemplate}">
                                    <GridViewColumn.Header>
                                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                            <TextBlock Text="Popup"/>
                                            <CheckBox ToolTip="Check or uncheck all." x:Name="CheckUncheck"
                                                  Checked="OnShowInPopupCheckBoxClick" Margin="5,2,5,0" />
                                        </StackPanel>
                                    </GridViewColumn.Header>
                                </GridViewColumn>
                                <GridViewColumn CellTemplate="{StaticResource IndexTemplate}"
                                            Header="Index" />
                                <GridViewColumn CellTemplate="{StaticResource TitleTemplate}"
                                            Header="Title" />
                                <GridViewColumn CellTemplate="{StaticResource DescriptionTemplate}"
                                            Header="Description" />
                                <GridViewColumn CellTemplate="{StaticResource TypeTemplate}"
                                            Header="Type" />
                                <GridViewColumn CellTemplate="{StaticResource EditTemplate}"
                                            Header="Edit" />
                                <GridViewColumn CellTemplate="{StaticResource SearchTemplate}"
                                            Header="Search" />
                                <GridViewColumn CellTemplate="{StaticResource FormatTemplate}"
                                            Header="Number format" />
                                <GridViewColumn CellTemplate="{StaticResource MinValueTemplate}"
                                            Header="Minimum allowed value" />
                            </GridView>
                        </ListView.View>
                    </ListView>
                </Expander>

                <!-- Additional formatting. -->
                <Expander Grid.Row="2" Grid.Column="0" Header="Detailed name and description formatting">
                    <Grid x:Name="NameAndDescriptionFormatting">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <CheckBox x:Name="NameFormatChecked"
                            Grid.Row="0" Grid.Column="0"
                            Margin="0,6,0,0"
                            VerticalAlignment="Top"
                            IsChecked="{Binding UseNameFormatString,
                                        Mode=TwoWay}"
                            ToolTip="Check to enable the format string to create the name, e.g. 'My name is {1} {2}', where id 1 and 2 get combined to create the name." />
                        <Label Grid.Row="0" Grid.Column="1"
                        VerticalAlignment="Center"
                        Content="Name"
                        IsEnabled="{Binding ElementName=NameFormatChecked, Path=IsChecked}"
                        ToolTip="Use string formatting for the PoI name." />
                        <TextBox Grid.Row="0" Grid.Column="2"
                            VerticalAlignment="Center"
                            IsEnabled="{Binding ElementName=NameFormatChecked,
                                        Path=IsChecked}"
                            Text="{Binding NameFormatString}" />
                        <CheckBox x:Name="DescriptionFormatChecked"
                            Grid.Row="1" Grid.Column="0"
                            Margin="0,6,0,0"
                            VerticalAlignment="Top"
                            IsChecked="{Binding UseDescriptionFormatString,
                                        Mode=TwoWay}"
                            ToolTip="Check to enable the format string to create the description, e.g. 'My description is {1} {2}', where id 1 and 2 get combined to create the name." />
                        <Label Grid.Row="1" Grid.Column="1"
                        VerticalAlignment="Center"
                        Content="Description"
                        IsEnabled="{Binding ElementName=DescriptionFormatChecked, Path=IsChecked}"
                        ToolTip="Use string formatting for the PoI description." />
                        <TextBox Grid.Row="1" Grid.Column="2"
                            VerticalAlignment="Center"
                            IsEnabled="{Binding ElementName=DescriptionFormatChecked,
                                        Path=IsChecked}"
                            Text="{Binding DescriptionFormatString}" />
                    </Grid>
                </Expander>

                <!-- Status and errors -->
                <Expander Grid.Row="5" Header="Errors and status messages" IsExpanded="True">
                    <ListView x:Name="StatusAndErrors" MinHeight="150" MaxHeight="400"
                        ItemsSource="{Binding ProcessingErrors}">
                        <ListView.View>
                            <GridView AllowsColumnReorder="false" ColumnHeaderToolTip="Status/Error Information">
                                <GridViewColumn Width="50"
                                        DisplayMemberBinding="{Binding FieldNumber}"
                                        Header="Line" />
                                <GridViewColumn Width="550"
                                        DisplayMemberBinding="{Binding Description}"
                                        Header="Error message" />
                                <GridViewColumn Width="200"
                                        DisplayMemberBinding="{Binding OriginalText}"
                                        Header="Cell value" />
                            </GridView>
                        </ListView.View>
                    </ListView>
                </Expander>

                <!-- Export options. -->
                <Expander Grid.Column="0" Grid.Row="3">
                    <Expander.Header>Additional conversion options</Expander.Header>
                    <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="30,0,0,0">
                        <CheckBox VerticalAlignment="Center"
                                      Content="Save meta data if possible"
                                      IsChecked="{Binding IncludeMetaData}" />
                        <CheckBox VerticalAlignment="Center"
                                      Content="Use Google to query addresses if BAG is not present"
                                      IsChecked="{Binding UseGoogleForLocation}" />
                        <CheckBox VerticalAlignment="Center"
                                      Content="Create static layer"
                                      IsChecked="{Binding IsStaticLayer}" />
                        <CheckBox VerticalAlignment="Center"
                                      Content="Use RD coordinates"
                                      ToolTip="Only applies to shape files."
                                      IsChecked="{Binding IsInRd}" />
                        <CheckBox VerticalAlignment="Center"
                                      Content="Dots as thousand separator"
                                      ToolTip="Some locales, e.g. Dutch, write 4.312 for 4312. If the input is Dutch, but your computer's locale is not, check this box."
                                      IsChecked="{Binding DotIsThousandSeparator}" />
                        <CheckBox VerticalAlignment="Center"
                                      Content="Commas as thousand separator"
                                      ToolTip="Some locales, e.g. Dutch, write 4.312 for 4312. If the input is Dutch, but your computer's locale is not, check this box."
                                      IsChecked="{Binding CommaIsThousandSeparator}" />
                        <StackPanel Orientation="Horizontal" Margin="20,0,0,0">
                            <Label VerticalAlignment="Center" Content="Delimiter" />
                            <ComboBox VerticalAlignment="Center"
                                      ItemsSource="{Binding Source={StaticResource CsvSeparators}}"
                                      SelectedItem="{Binding Separator}" />
                        </StackPanel>
                    </StackPanel>
                </Expander>

            </Grid>
        </TabItem>

        <!-- DS to other formats. -->
        <TabItem Header="Convert between formats">
            <TabControl Margin="0" SelectionChanged="OnChangeConversionTab">
                <TabItem Header="Data sources">
                    <Grid Margin="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="Auto"></RowDefinition>
                        </Grid.RowDefinitions>
                        <ListView Grid.Row="0" 
                          ItemsSource="{StaticResource PoiServiceExporterList}"
                          SelectedItem="{Binding SelectedPoiServiceExporter}"
                           HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Export to" Width="200" DisplayMemberBinding="{Binding DataFormat}"/>
                                    <!--GridViewColumn Header="Validate" Width="100" CellTemplate="{StaticResource ExporterValidationTemplate}"/-->
                                </GridView>
                            </ListView.View>
                        </ListView>
                        <Grid Grid.Row="1" Margin="5,5,0,5">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <CheckBox Grid.Column="0" VerticalAlignment="Center"
                                      Content="Save meta data if possible"
                                      IsChecked="{Binding IncludeMetaData}" Margin="0,0,10,0"/>
                            <Label Grid.Column="1" Content="{Binding SelectedFileToExport}" Margin="0,0,20,0"></Label>
                            <Button Grid.Column="2" Name="BrowseDsToExportButton" Content="Browse..." Click="OnBrowseDsToExportButtonClick"
                            Margin="0,0,5,0" MinWidth="80"></Button>
                            <Button Grid.Column="3" Name="ExportDsButton" Content="Export" Click="OnExportDsButtonClick" MinWidth="80" IsEnabled="{Binding CanExport}"/>
                        </Grid>
                    </Grid>
                </TabItem>
                <TabItem x:Name="TemplatesTab" Header="Templates">
                    <Grid Margin="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="5"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="5"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="5"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Label Grid.Row="0" Grid.Column="0" Content="Template path"/>
                        <Label Grid.Row="0" Grid.Column="2" Content="{Binding TemplateConversionPath}"/>
                        <Button Grid.Row="0" Grid.Column="4" Name="TemplatePathBrowseButton" Content="Browse" Click="OnTemplatePathBrowseButtonClick"/>

                        <Label Grid.Row="2" Grid.Column="0" Content="Template format"/>
                        <ComboBox Grid.Row="2" Grid.Column="2" SelectedItem="{Binding TemplateConversionFormat}" ItemsSource="{Binding Source={StaticResource TemplateFormats}}"/>
                        <Button Grid.Row="2" Grid.Column="4" Name="TemplateConvertButton" Content="Convert" Click="OnTemplateConvertButtonClick"/>

                        <Button Grid.Row="4" Grid.Column="4" Height="26" Name="TemplateFolderButton" Content="Open template folder" Click="OnOpenTemplateFolderButtonClick"/>
                    </Grid>
                </TabItem>
            </TabControl>
        </TabItem>

        <!-- SHP to DS Conversion. Small, basic GUI. -->
        <!--TabItem Header="Convert SHP to data service" Visibility="Hidden">
            <Button x:Name="OpenShape"
                    Width="180"
                    Margin="0,0,0,0"
                    Click="OnOpenShapeButtonClick"
                    Content="Open and convert shape file" Height="20" />
        </-->

        <!-- DS to CSV Conversion. Small, basic GUI. -->
        <!--TabItem Header="Convert data service to CSV">
            <Button x:Name="OpenDsCsv"
                    Width="200"
                    Margin="0,0,0,0"
                    Click="OnOpenDsCsvButtonClick"
                    Content="Open and convert data service file" Height="20" />
        </-->

        <!-- DS to GeoJSON Conversion. Small, basic GUI. TODO REMOVE -->
        <!--TabItem Header="Convert data service to GeoJSON">
            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <CheckBox x:Name="CheckJson" Content="Check JSON validity on http://geojsonlint.com/ (warning: slow for large files!)"></CheckBox>
                <Button x:Name="OpenDsGeoJson"
                    Width="200"
                    Margin="0,0,0,0"
                    Click="OnOpenDsGeoJSONButtonClick"
                    Content="Open and convert data service file" Height="20" />
           </StackPanel>
        </-->

        <!-- Merge data services. -->
        <TabItem Header="Merge and filter data sources">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="2*" />
                </Grid.ColumnDefinitions>

                <Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                    Data source to merge into
                </Label>

                <DockPanel LastChildFill="True"
                           Grid.Row="1"
                           Grid.Column="0" Grid.ColumnSpan="2">
                    <Button x:Name="MergeOpenMainFileButton"
                            Padding="5 0"
                            Click="OnMergeOpenMainFileButtonClick"
                            DockPanel.Dock="Right"
                            Content="..." />
                    <Border Style="{StaticResource TextBlockBorder}">
                        <TextBlock Text="{Binding MergeMainDataServiceFile}"
                               DockPanel.Dock="Left"
                               HorizontalAlignment="Stretch" />
                    </Border>
                </DockPanel>

                <Label Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2">
                    Label to merge on
                </Label>

                <ComboBox ItemsSource="{Binding MergeMainDataServiceLabels}"
                          SelectedItem="{Binding MergeSelectedMainLabel}"
                          Grid.Row="3"
                          Grid.Column="0"
                          ItemTemplate="{StaticResource LabelTemplate}" Grid.ColumnSpan="2" />

                <Label Grid.Row="0" Grid.RowSpan="4" Grid.Column="2" FontSize="32"
                       HorizontalAlignment="Stretch" HorizontalContentAlignment="Center"
                       VerticalAlignment="Stretch" VerticalContentAlignment="Center">
                    &lt;-
                </Label>


                <Label Grid.Row="0" Grid.Column="3">
                    Data source to merge from
                </Label>

                <DockPanel LastChildFill="True"
                           Grid.Row="1"
                           Grid.Column="3">
                    <Button x:Name="MergeOpenSecondaryFileButton"
                            Padding="5 0"
                            DockPanel.Dock="Right"
                            Click="MergeOpenSecondaryFileButtonClick"
                            Content="..." />
                    <Border Style="{StaticResource TextBlockBorder}">
                        <TextBlock Text="{Binding MergeSecondaryDataServiceFile}"
                               DockPanel.Dock="Left"
                               HorizontalAlignment="Stretch" />
                    </Border>
                </DockPanel>

                <Label Grid.Row="2" Grid.Column="3">
                    Label to merge on
                </Label>

                <ComboBox ItemsSource="{Binding MergeSecondaryDataServiceLabels}"
                          SelectedItem="{Binding MergeSelectedSecondaryLabel}"
                          Grid.Row="3"
                          Grid.Column="3"
                          ItemTemplate="{StaticResource LabelTemplate}" />

                <TextBox x:Name="TxtMergeDebugOutput" Margin="0,10" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="4"
                         Text="Merging two data services will add all useful data from the data source on the right to the data source on the left. Additionally, merge can be used as a filter to only keep the data that is found in both sources."
                         IsReadOnly="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Visible" />

                <DockPanel Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="4" LastChildFill="True">
                    <Button DockPanel.Dock="Right" x:Name="MergeDataService"
                            VerticalAlignment="Bottom"
                                HorizontalAlignment="Right"
                                Margin="5"
                                Padding="5 0"
                                IsEnabled="{Binding CanMergeDataService}"
                                Click="OnMergeDataServiceButtonClick"
                                Content="Merge data sources" Height="20" />
                    <StackPanel DockPanel.Dock="Left" Margin="5">
                        <CheckBox Content="Include new PoIs from right side"
                                  IsChecked="{Binding MergeIncludeSecondaryPois}"
                                  VerticalContentAlignment="Center" />
                        <CheckBox Content="Exclude PoIs not found on right side"
                                  IsChecked="{Binding MergeExcludeNonExistentSecondaryPois}"
                                  VerticalContentAlignment="Center" />
                        <Label/>
                        <!-- spacer -->
                        <CheckBox Content="Include new labels from the right side"
                                  IsChecked="{Binding MergeIncludeRightSideLabels}"
                                  VerticalContentAlignment="Center" />
                        <CheckBox Content="Overwrite duplicate labels"
                                  IsChecked="{Binding MergeOverwriteDuplicateLabels}"
                                  VerticalContentAlignment="Center" />
                        <Label/>
                        <!-- spacer -->
                        <CheckBox Content="Stop on first hit"
                                  IsChecked="{Binding MergeStopOnFirstHit}"
                                  VerticalContentAlignment="Center" />
                        <CheckBox Content="Generate GUID"
                                  IsChecked="{Binding GenerateGuid}"
                                  VerticalContentAlignment="Center" />
                        <CheckBox VerticalAlignment="Center"
                                      Content="Save meta data if possible"
                                      IsChecked="{Binding IncludeMetaData}"/>

                    </StackPanel>
                </DockPanel>
            </Grid>
        </TabItem>

        <!-- Aggregate data sources. -->
        <TabItem Header="Group data">
            <Grid Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <GroupBox Grid.Row="0" Header="What to group?">
                    <DockPanel LastChildFill="True" Margin="0,5">
                        <Button Name="AggregateDataBrowseFileButton" Content="..." MinWidth="26" DockPanel.Dock="Right" Click="OnAggregateDataBrowseFileButtonClick"/>
                        <Border Style="{StaticResource TextBlockBorder}">
                            <TextBlock Text="{Binding AggregationDataFile}" Height="26" DockPanel.Dock="Left" HorizontalAlignment="Stretch"  VerticalAlignment="Center"/>
                        </Border>
                    </DockPanel>
                </GroupBox>
                <GroupBox Grid.Row="1" Header="Group by what?" IsEnabled="{Binding AggregationDataFileChosen}">
                    <Grid VerticalAlignment="Center" Margin="0,5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <RadioButton Grid.Row="0" Grid.Column="0" GroupName="GroupByWhat" VerticalContentAlignment="Center" VerticalAlignment="Center" Content="Label" IsChecked="{Binding AggregateByLabel}"/>
                        <DockPanel Grid.Row="0" Grid.Column="1" Height="26">
                            <ComboBox Name="AggregationLabelSelector" Height="26" Width="200" Margin="0,0,3,0"
                                    ItemsSource="{Binding AggregationLabelDescriptions}" 
                                    SelectedValue="{Binding SelectedAggregationLabelDescription}" 
                                    IsEnabled="{Binding AggregateByLabel}">
                                <ComboBox.ItemContainerStyle>
                                    <Style TargetType="{x:Type ComboBoxItem}">
                                        <EventSetter Event="MouseMove" Handler="OnAggregateLabelsComboBoxMouseMove" />
                                    </Style>
                                </ComboBox.ItemContainerStyle>
                            </ComboBox>
                            <Border Style="{StaticResource TextBlockBorder}" Margin="0" Background="#ffffcc">
                                <TextBlock Text="{Binding SelectedAggregationLabelValueExamples}" VerticalAlignment="Center" TextTrimming="CharacterEllipsis"/>
                            </Border>
                        </DockPanel>
                        <RadioButton Grid.Row="1" Grid.Column="0" Margin="0,5,0,0" Width="130" GroupName="GroupByWhat" VerticalContentAlignment="Center" VerticalAlignment="Center" Content="Region" IsChecked="{Binding AggregateByGeography}"/>
                        <DockPanel Grid.Row="1" Grid.Column="1" Margin="0,5,0,0" LastChildFill="True"  IsEnabled="{Binding AggregateByGeography}">
                            <Button Name="AggregateBrowseShapeFileButton" Content="..." MinWidth="26" DockPanel.Dock="Right" VerticalAlignment="Stretch" Click="OnAggregateDataBrowseShapeFileButtonClick"/>
                            <Border Style="{StaticResource TextBlockBorder}">
                                <TextBlock Height="26" Text="{Binding AggregationShapeFile}" DockPanel.Dock="Left" HorizontalAlignment="Stretch" />
                            </Border>
                        </DockPanel>
                        <Label Grid.Row="2" Grid.Column="0" Content="    Region name label" Visibility="{Binding Path=AggregationShapeFileChosen, Converter={StaticResource BoolToVisibility}}" Height="26" VerticalAlignment="Bottom"/>
                        <ComboBox Grid.Row="2" Grid.Column="1" Margin="0,5,0,0" Height="26" 
                                    ItemsSource="{Binding AggregationShapeFileLabels}"
                                    SelectedItem="{Binding SelectedAggregationShapeFileLabelAsId}"
                                    Visibility="{Binding Path=AggregationShapeFileChosen, Converter={StaticResource BoolToVisibility}}"/>
                    </Grid>
                </GroupBox>
                <GroupBox Grid.Row="2" Header="How to group?" IsEnabled="{Binding AggregationDataFileChosen}">
                    <Grid VerticalAlignment="Stretch" Margin="0,5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Row="0" Grid.Column="0" VerticalContentAlignment="Center" VerticalAlignment="Center" Content="All numbers"/>
                        <ComboBox Grid.Row="0" Grid.Column="1" 
                            Name="SelectAggregationPolicyForAllNumericLabels" ItemsSource="{Binding NumericAggregationPolicyNames}" SelectedValue="{Binding AggregationPolicyNameForAllNumericLabels}"/>
                        <Label Grid.Row="1" Grid.Column="0" Margin="0,5,0,0" VerticalContentAlignment="Center" VerticalAlignment="Center" Content="All others"/>
                        <ComboBox Grid.Row="1" Grid.Column="1" Margin="0,5,0,0"  
                            Name="SelectAggregationPolicyForAllNonNumericLabels" ItemsSource="{Binding NonNumericAggregationPolicyNames}" SelectedValue="{Binding AggregationPolicyNameForAllNonNumericLabels}"/>
                        <Label Grid.Row="2" Grid.Column="0" Margin="0,5,0,0" Width="130" VerticalContentAlignment="Center" VerticalAlignment="Center" Content="Detailed settings"/>
                        <ListView Grid.Row="2" Grid.Column="1" Margin="0,5,0,0" ItemsSource="{Binding AggregationPolicies}">
                            <ListView.View>
                                <GridView AllowsColumnReorder="false" ColumnHeaderToolTip="Aggregation options">
                                    <GridViewColumn Width="200" Header="Label" DisplayMemberBinding="{Binding Label}"/>
                                    <GridViewColumn Width="550" Header="Aggregation policy" CellTemplate="{StaticResource AggregationPolicyTemplate}"/>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </GroupBox>
                <DockPanel Grid.Row="3" Grid.Column="0" LastChildFill="False" Margin="0,5,0,0" IsEnabled="{Binding AggregationCanStart}">
                    <CheckBox VerticalAlignment="Center"
                            Content="Save meta data if possible"
                            IsChecked="{Binding IncludeMetaData}" DockPanel.Dock="Left" Margin="0,0,5,0"/>
                    <CheckBox VerticalAlignment="Center"
                            Content="Add labels from shape file"
                            IsEnabled="{Binding AggregateByGeography}"
                            IsChecked="{Binding AggregateAddLabelsFromShapeFile}" DockPanel.Dock="Left"/>
                    <Button Name="ButtonStartAggregateRows" DockPanel.Dock="Right" MinWidth="80" Content="Start" Height="22" VerticalAlignment="Top" Click="OnStartAggregateRowsButtonClick"/>
                </DockPanel>
            </Grid>
        </TabItem>

        <!-- Hierarchic layer creation. -->
        <TabItem Header="Create hierarchic data source">
            <Grid Margin="0,0,0,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="50"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>

                <Grid Row="0" Column="1" VerticalAlignment="Top" Margin="5,0,0,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Button Name="AddSublayerButton" Content="+" Grid.Row="0" Margin="0,0,0,5"
                            Click="OnAddSublayerButtonClick"/>
                    <Button Name="RemoveSublayerButton" Content="-" Grid.Row="1" Margin="0,0,0,5"
                            Click="OnRemoveSublayerButtonClick" />
                    <Button Name="MoveSublayerUpButton" Content="^" Grid.Row="2" Margin="0,0,0,5"
                            Click="OnMoveSublayerUpButtonClick" />
                    <Button Name="MoveSublayerDownButton" Content="^" Grid.Row="3" Margin="0,0,0,5"
                            Click="OnMoveSublayerDownButtonClick">
                        <Button.LayoutTransform>
                            <RotateTransform CenterX="0.5" CenterY="0.5" Angle="180"/>
                        </Button.LayoutTransform>
                    </Button>
                </Grid>

                <devzest:SplitContainer Grid.Row="0" Grid.Column="0" Margin="0">
                    <devzest:SplitContainer.Child1>
                        <ListView Name="ListHierarchicLayers" ItemsSource="{Binding Path=HierarchicLayers}"
                           HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="File" Width="250" DisplayMemberBinding="{Binding File}"/>
                                    <GridViewColumn Header="Layer name" Width="200" CellTemplate="{StaticResource LayerNameTemplate}"/>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </devzest:SplitContainer.Child1>
                    <devzest:SplitContainer.Child2>
                        <ListView x:Name="StatusAndErrorsMerge"
                          Margin="0,5,0,0"
                          ItemsSource="{Binding ProcessingErrors}">
                            <ListView.View>
                                <GridView AllowsColumnReorder="false" ColumnHeaderToolTip="Status/Error Information">
                                    <GridViewColumn Width="50"
                                            DisplayMemberBinding="{Binding FieldNumber}"
                                            Header="File #" />
                                    <GridViewColumn Width="300"
                                            DisplayMemberBinding="{Binding Description}"
                                            Header="Error message" />
                                    <GridViewColumn Width="200"
                                            DisplayMemberBinding="{Binding OriginalText}"
                                            Header="Detail" />
                                </GridView>
                            </ListView.View>
                        </ListView>

                    </devzest:SplitContainer.Child2>
                </devzest:SplitContainer>


                <StatusBar Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,10,0,0">
                    <StatusBarItem>
                        <CheckBox Name="CreateSuperTypePoiOnHierarchicalMergeCheckBox" Content="Create supertype PoI"></CheckBox>
                    </StatusBarItem>
                    <StatusBarItem HorizontalAlignment="Left">
                        <CheckBox Content="Generate GUID (data service export only)"
                                  IsChecked="{Binding GenerateGuid}"
                                  VerticalContentAlignment="Center" />
                    </StatusBarItem>
                    <StatusBarItem HorizontalAlignment="Left">
                        <CheckBox VerticalAlignment="Center"
                                      Content="Save meta data if possible"
                                      IsChecked="{Binding IncludeMetaData}"/>
                    </StatusBarItem>
                    <StatusBarItem HorizontalAlignment="Right">
                        <Button Name="StartHierarchicalMerge" MinWidth="70" Content="Start" 
                                IsEnabled="{Binding CanStartHierarchicLayerMerge}"
                            Click="OnStartHierarchicalMergeClick"></Button>
                    </StatusBarItem>
                </StatusBar>
            </Grid>
        </TabItem>

        <TabItem Header="Inspect JSON" Visibility="Collapsed">
            <!-- REMOVE FOR NOW; JSONLINT WORKS BETTER -->
            <DockPanel Margin="5,5,5,5" LastChildFill="True">
                <DockPanel LastChildFill="True" Dock="Top">
                    <Button Name="ClearJsonButton" DockPanel.Dock="Right" Content="Clear" Click="OnClearJsonButtonClick"/>
                    <Label Content="Paste JSON in here and it will be prettified." DockPanel.Dock="Top"></Label>
                </DockPanel>
                <ScrollViewer>
                    <TextBox Name="JsonTextBox" Text="" TextChanged="OnJsonContainerTextChanged"/>
                </ScrollViewer>
            </DockPanel>
        </TabItem>

    </TabControl>
</Window>