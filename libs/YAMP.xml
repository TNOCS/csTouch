<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YAMP</name>
    </assembly>
    <members>
        <member name="T:YAMP.ArgumentsAttribute">
            <summary>
            The attribute to store information about optional arguments.
            </summary>
        </member>
        <member name="M:YAMP.ArgumentsAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new attribute to declare a container for optional arguments.
            </summary>
            <param name="index">The index that stores optional arguments.</param>
            <param name="min">The minimum number of arguments that need to be specified.</param>
            <param name="max">The maximum number of arguments that will be delegated to this container.</param>
            <param name="delta">The chunks of arguments to include, i.e. 2 is always an even number of arguments.</param>
        </member>
        <member name="P:YAMP.ArgumentsAttribute.MinimumArguments">
            <summary>
            Gets the minimum number of arguments that need to be provided for the specified parameter.
            </summary>
        </member>
        <member name="P:YAMP.ArgumentsAttribute.MaximumArguments">
            <summary>
            Gets the maximum number of arguments that can be provided for the specified parameter.
            </summary>
        </member>
        <member name="P:YAMP.ArgumentsAttribute.StepArguments">
            <summary>
            Gets the number of arguments that need to be provided starting at MinimumArguments, i.e.
            if delta = 2 and min = 0 then either 0, 2, 4, ... arguments can be specified.
            </summary>
        </member>
        <member name="P:YAMP.ArgumentsAttribute.Index">
            <summary>
            Gets the index of the parameter that can contain optional arguments.
            </summary>
        </member>
        <member name="T:YAMP.Converter.ScalarToIntegerConverterAttribute">
            <summary>
            String to integer converter.
            </summary>
        </member>
        <member name="T:YAMP.Converter.ValueConverterAttribute">
            <summary>
            Abstract base class for any value converter.
            </summary>
        </member>
        <member name="M:YAMP.Converter.ValueConverterAttribute.#ctor(System.Type,System.Func{YAMP.Value,System.Object})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="expected">The expected type (target).</param>
            <param name="converter">The conversion function.</param>
        </member>
        <member name="M:YAMP.Converter.ValueConverterAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="expected">The expected type (target)</param>
        </member>
        <member name="M:YAMP.Converter.ValueConverterAttribute.Convert(YAMP.Value)">
            <summary>
            Converts the given value to a standard CLR type.
            </summary>
            <param name="argument">The value to convert.</param>
            <returns>The standard CLR type.</returns>
        </member>
        <member name="M:YAMP.Converter.ValueConverterAttribute.CanConvertFrom(YAMP.Value)">
            <summary>
            Indicates if a given argument can be converted.
            </summary>
            <param name="argument">The value to convert.</param>
            <returns>A boolean if this is possible.</returns>
        </member>
        <member name="P:YAMP.Converter.ValueConverterAttribute.Converter">
            <summary>
            Gets or sets the converter to use.
            </summary>
        </member>
        <member name="P:YAMP.Converter.ValueConverterAttribute.Expected">
            <summary>
            Gets or sets the expected type.
            </summary>
        </member>
        <member name="P:YAMP.Converter.ValueConverterAttribute.Type">
            <summary>
            Gets the name of the expected type (without the value convention).
            </summary>
        </member>
        <member name="M:YAMP.Converter.ScalarToIntegerConverterAttribute.#ctor">
            <summary>
            Creates a new Scalar To Int32 Converter.
            </summary>
        </member>
        <member name="T:YAMP.Converter.MatrixToDoubleArrayConverterAttribute">
            <summary>
            Matrix (only the real parts) to double array converter.
            </summary>
        </member>
        <member name="M:YAMP.Converter.MatrixToDoubleArrayConverterAttribute.#ctor">
            <summary>
            Creates a new Matrix To Double Converter.
            </summary>
        </member>
        <member name="T:YAMP.Converter.ScalarToBooleanConverterAttribute">
            <summary>
            scalar to boolean (1.0, rest) converter.
            </summary>
        </member>
        <member name="M:YAMP.Converter.ScalarToBooleanConverterAttribute.#ctor">
            <summary>
            Creates a new Scalar To Bool Converter.
            </summary>
        </member>
        <member name="T:YAMP.Converter.ScalarToDoubleConverterAttribute">
            <summary>
            String to double converter.
            </summary>
        </member>
        <member name="M:YAMP.Converter.ScalarToDoubleConverterAttribute.#ctor">
            <summary>
            Creates a new Scalar To Double Converter.
            </summary>
        </member>
        <member name="T:YAMP.Converter.StringToBooleanConverterAttribute">
            <summary>
            String to boolean (on, off) converter.
            </summary>
        </member>
        <member name="M:YAMP.Converter.StringToBooleanConverterAttribute.#ctor">
            <summary>
            Creates a new String To Bool Converter.
            </summary>
        </member>
        <member name="T:YAMP.Converter.StringToEnumConverter">
            <summary>
            String to an arbitrary enumeration converter.
            </summary>
        </member>
        <member name="M:YAMP.Converter.StringToEnumConverter.#ctor(System.Type)">
            <summary>
            Creates a new String to Enumeration (value) converter.
            </summary>
            <param name="enumType">The enumeration which contains the possible values.</param>
        </member>
        <member name="T:YAMP.Converter.StringToStringConverterAttribute">
            <summary>
            String to StringValue converter.
            </summary>
        </member>
        <member name="M:YAMP.Converter.StringToStringConverterAttribute.#ctor">
            <summary>
            Creates a new String To String Converter.
            </summary>
        </member>
        <member name="T:YAMP.KindAttribute">
            <summary>
            Provides a kind attribute to be read by the help method. This attribute specifies the kind of function / constant that is declared.
            </summary>
        </member>
        <member name="M:YAMP.KindAttribute.#ctor(System.String)">
            <summary>
            Creates a new attribute for storing the kind of a function.
            </summary>
            <param name="kind">The kind to store.</param>
        </member>
        <member name="M:YAMP.KindAttribute.#ctor(YAMP.PopularKinds)">
            <summary>
            Creates a new attribute for storing the kind of a function.
            </summary>
            <param name="kind">The kind to store.</param>
        </member>
        <member name="P:YAMP.KindAttribute.Kind">
            <summary>
            Gets the kind.
            </summary>
        </member>
        <member name="T:YAMP.LinkAttribute">
            <summary>
            Provides a kind attribute to be read by the help method. This attribute specifies the kind of function / constant that is declared.
            </summary>
        </member>
        <member name="M:YAMP.LinkAttribute.#ctor(System.String)">
            <summary>
            Creates a new attribute for storing more information about a function.
            </summary>
            <param name="url">The url to store.</param>
        </member>
        <member name="P:YAMP.LinkAttribute.Url">
            <summary>
            Gets the stored URL.
            </summary>
        </member>
        <member name="T:YAMP.ReturnsAttribute">
            <summary>
            Provides a returns attribute to be read by the help method.
            </summary>
        </member>
        <member name="M:YAMP.ReturnsAttribute.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Creates a new attribute for storing explanations for return values
            (should be used in combination with multiple output arguments).
            </summary>
            <param name="type">The type that will be returned</param>
            <param name="explanation">The specific explanations</param>
            <param name="order">The rank of the return type</param>
        </member>
        <member name="P:YAMP.ReturnsAttribute.Explanation">
            <summary>
            Gets the specified explanations for this return type.
            </summary>
        </member>
        <member name="P:YAMP.ReturnsAttribute.ReturnType">
            <summary>
            Gets the type that will be returned.
            </summary>
        </member>
        <member name="P:YAMP.ReturnsAttribute.Order">
            <summary>
            Gets the rank of the return attribute.
            </summary>
        </member>
        <member name="T:YAMP.YAMPParseError">
            <summary>
            Any error during parsing will be noted as an instance of this class.
            </summary>
        </member>
        <member name="M:YAMP.YAMPParseError.#ctor(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Creates a new parse error.
            </summary>
            <param name="line">The line of the error.</param>
            <param name="column">The column of the error.</param>
            <param name="message">The message for the error.</param>
            <param name="args">The arguments for formatting the message.</param>
        </member>
        <member name="M:YAMP.YAMPParseError.ToString">
            <summary>
            Converts to error to a string.
            </summary>
            <returns>The string with the error.</returns>
        </member>
        <member name="P:YAMP.YAMPParseError.Message">
            <summary>
            Gets the message for this error.
            </summary>
        </member>
        <member name="P:YAMP.YAMPParseError.Line">
            <summary>
            Gets the line for this error.
            </summary>
        </member>
        <member name="P:YAMP.YAMPParseError.Column">
            <summary>
            Gets the column for this error.
            </summary>
        </member>
        <member name="P:YAMP.YAMPParseError.Part">
            <summary>
            Gets or sets the block responsible for the parse error.
            </summary>
        </member>
        <member name="P:YAMP.YAMPParseError.Length">
            <summary>
            Gets the length of the error in characters.
            </summary>
        </member>
        <member name="T:YAMP.YAMPRuntimeException">
            <summary>
            The base class for any runtime exception. 
            </summary>
        </member>
        <member name="T:YAMP.YAMPException">
            <summary>
            Basic YAMP exception. This lets everyone know that the exception
            did not occur because something was fishy in the (C#) code, but
            rather in the query.
            </summary>
        </member>
        <member name="M:YAMP.YAMPException.#ctor">
            <summary>
            Creates an anonymous YAMP exception.
            </summary>
        </member>
        <member name="M:YAMP.YAMPException.#ctor(System.String)">
            <summary>
            Creates a YAMP exception with a simple message.
            </summary>
            <param name="message">Which message do you want to display?</param>
        </member>
        <member name="M:YAMP.YAMPException.#ctor(System.String,System.Object[])">
            <summary>
            Creates a YAMP exception with a formatted message.
            </summary>
            <param name="message">The associated message.</param>
            <param name="args">Some parameters for your message.</param>
        </member>
        <member name="M:YAMP.YAMPRuntimeException.#ctor(System.String)">
            <summary>
            Creates a new runtime exception.
            </summary>
            <param name="msg">The message to show.</param>
        </member>
        <member name="M:YAMP.YAMPRuntimeException.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new runtime exception.
            </summary>
            <param name="msg">The message to show.</param>
            <param name="args">The arguments for the message.</param>
        </member>
        <member name="T:YAMP.LetKeyword">
            <summary>
            The let keyword to create local variables. Basic syntax:
            let NAME [OP STATEMENT];
            </summary>
        </member>
        <member name="T:YAMP.Keyword">
            <summary>
            Abstract base class of scripting keywords.
            </summary>
        </member>
        <member name="T:YAMP.Expression">
            <summary>
            Represents the abstract base class for expressions.
            </summary>
        </member>
        <member name="T:YAMP.Block">
            <summary>
            This is an abstract basic parse block.
            </summary>
        </member>
        <member name="M:YAMP.Block.Init(YAMP.ParseEngine)">
            <summary>
            Initializes the values StartColumn, StartLine and Query.
            </summary>
            <param name="engine">The engine to use for initialization.</param>
        </member>
        <member name="M:YAMP.Block.ToCode">
            <summary>
            Converts the given block to a valid part of a query.
            </summary>
            <returns>The string that represents the part of the query.</returns>
        </member>
        <member name="P:YAMP.Block.StartLine">
            <summary>
            Gets the line where the block starts in the query.
            </summary>
        </member>
        <member name="P:YAMP.Block.StartColumn">
            <summary>
            Gets the column where the block starts in the query.
            </summary>
        </member>
        <member name="P:YAMP.Block.Length">
            <summary>
            Gets the length in characters of the block.
            </summary>
        </member>
        <member name="P:YAMP.Block.Context">
            <summary>
            Gets the associated parse context of the block.
            </summary>
        </member>
        <member name="P:YAMP.Block.Query">
            <summary>
            Get the corresponding query context of the block.
            </summary>
        </member>
        <member name="T:YAMP.IRegisterElement">
            <summary>
            This interface is required to indicate that the object should be (if possible)
            taken, instantiated and registred (with the method) at loading.
            </summary>
        </member>
        <member name="M:YAMP.IRegisterElement.RegisterElement">
            <summary>
            Register an element somewhere automatically.
            </summary>
        </member>
        <member name="M:YAMP.Expression.#ctor">
            <summary>
            Creates a new expression.
            </summary>
        </member>
        <member name="M:YAMP.Expression.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new expression.
            </summary>
            <param name="line">The line of beginning of the expression.</param>
            <param name="column">The column in the line of the beginning of the expression.</param>
        </member>
        <member name="M:YAMP.Expression.#ctor(YAMP.QueryContext)">
            <summary>
            Creates a new expression.
            </summary>
            <param name="query">The context of the expression.</param>
        </member>
        <member name="M:YAMP.Expression.#ctor(YAMP.QueryContext,System.Int32,System.Int32)">
            <summary>
            Creates a new expression.
            </summary>
            <param name="query">The context of the expression.</param>
            <param name="line">The line of beginning of the expression.</param>
            <param name="column">The column in the line of the beginning of the expression.</param>
        </member>
        <member name="M:YAMP.Expression.#ctor(YAMP.ParseEngine)">
            <summary>
            Creates a new expression.
            </summary>
            <param name="engine">The parse engine used for creating this expresssion.</param>
        </member>
        <member name="M:YAMP.Expression.Interpret(System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Begins interpreting the contents of the expression.
            </summary>
            <param name="symbols">The external symbols to consider.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.Expression.Scan(YAMP.ParseEngine)">
            <summary>
            Scans for an expression given the parse engine.
            </summary>
            <param name="engine">The engine which scans the query.</param>
            <returns>The built expression.</returns>
        </member>
        <member name="M:YAMP.Expression.RegisterElement">
            <summary>
            Registers this element at some target.
            </summary>
        </member>
        <member name="M:YAMP.Expression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="P:YAMP.Expression.Empty">
            <summary>
            Gets a dummy expression for doing nothing.
            </summary>
        </member>
        <member name="P:YAMP.Expression.IsSingleStatement">
            <summary>
            Gets a value indicating if the expression is a whole statement.
            </summary>
        </member>
        <member name="M:YAMP.Keyword.#ctor(System.String)">
            <summary>
            Creates a new keyword instance.
            </summary>
            <param name="keyword">The keyword to use (token).</param>
        </member>
        <member name="M:YAMP.Keyword.RegisterElement">
            <summary>
            Registers the element at the factory.
            </summary>
        </member>
        <member name="P:YAMP.Keyword.Token">
            <summary>
            Gets the token (pattern or keyword) that represents the current keyword.
            </summary>
        </member>
        <member name="P:YAMP.LetKeyword.Name">
            <summary>
            Gets the name of the created local variable.
            </summary>
        </member>
        <member name="T:YAMP.ArgumentFunction">
            <summary>
            The abstract base class used for all argument functions. (provide all functions with the name function).
            </summary>
        </member>
        <member name="T:YAMP.BaseFunction">
            <summary>
            The abstract base class for StandardFunctions and ArgumentFunctions
            </summary>
        </member>
        <member name="T:YAMP.IFunction">
            <summary>
            Every function needs to implemented the IFunction interface.
            </summary>
        </member>
        <member name="M:YAMP.IFunction.Perform(YAMP.ParseContext,YAMP.Value)">
            <summary>
            Invokes the function.
            </summary>
            <param name="context">The context where the invocation takes place.</param>
            <param name="argument">The arguments of the function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:YAMP.BaseFunction.#ctor">
            <summary>
            Creates a function class with the name chosen by convention.
            </summary>
        </member>
        <member name="M:YAMP.BaseFunction.#ctor(System.String)">
            <summary>
            Creates a function class.
            </summary>
            <param name="name">The name for the function.</param>
        </member>
        <member name="M:YAMP.BaseFunction.Perform(YAMP.Value)">
            <summary>
            Executes the function.
            </summary>
            <param name="argument">The function's argument(s).</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.BaseFunction.Perform(YAMP.ParseContext,YAMP.Value)">
            <summary>
            Invokes the function.
            </summary>
            <param name="context">The context of the invocation.</param>
            <param name="argument">The function's argument(s).</param>
            <returns>The result.</returns>
        </member>
        <member name="P:YAMP.BaseFunction.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="M:YAMP.ArgumentFunction.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.ArgumentFunction.Compare(YAMP.FunctionParameters,YAMP.FunctionParameters)">
            <summary>
            Compares to FunctionParameters to find out the equality factor.
            </summary>
            <param name="x">The source to compare with.</param>
            <param name="y">The target to compare by.</param>
            <returns>The computed equality factor, which is 0 if both paramter spaces are equal.</returns>
        </member>
        <member name="M:YAMP.ArgumentFunction.CanExecute(System.Int32)">
            <summary>
            Computes a boolean if the function can be executed with the number of parameters.
            </summary>
            <param name="args">The number of parameters independent of the specific types.</param>
            <returns>A boolean indicating the status.</returns>
        </member>
        <member name="M:YAMP.ArgumentFunction.Perform(YAMP.Value)">
            <summary>
            Performs the function execution.
            </summary>
            <param name="argument">The argument(s) (if presented in an "ArgumentValue").</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="P:YAMP.ArgumentFunction.Length">
            <summary>
            Gets the number of given arguments.
            </summary>
        </member>
        <member name="T:YAMP.SystemFunction">
            <summary>
            SystemFunction is a special kind of ArgumentFunction, which saves the
            passed ParseContext in a variable, which can be accessed over the 
            property Context.
            </summary>
        </member>
        <member name="M:YAMP.SystemFunction.#ctor">
            <summary>
            Creates a new system function with the default context.
            </summary>
        </member>
        <member name="M:YAMP.SystemFunction.#ctor(YAMP.ParseContext)">
            <summary>
            Creates a new system function with a specific context.
            </summary>
            <param name="context">The given context.</param>
        </member>
        <member name="M:YAMP.SystemFunction.Perform(YAMP.ParseContext,YAMP.Value)">
            <summary>
            Performs the function in the given context.
            </summary>
            <param name="context">The context where the function is executed.</param>
            <param name="argument">The argument of the function.</param>
            <returns>The evaluted value.</returns>
        </member>
        <member name="P:YAMP.SystemFunction.Context">
            <summary>
            Gets or sets the associated context.
            </summary>
        </member>
        <member name="T:YAMP.StandardFunction">
            <summary>
            The abstract base class used for all standard functions.
            </summary>
        </member>
        <member name="M:YAMP.StandardFunction.Perform(YAMP.Value)">
            <summary>
            Performs the function - maps each entry of a matrix to a matrix.
            </summary>
            <param name="argument">Either a Scalar or a Matrix.</param>
            <returns>The scalar or matrix.</returns>
        </member>
        <member name="M:YAMP.StandardFunction.GetValue(YAMP.ScalarValue)">
            <summary>
            Gets a single value.
            </summary>
            <param name="value">The argument (single value).</param>
            <returns>The result (single value).</returns>
        </member>
        <member name="M:YAMP.StandardFunction.Function(YAMP.ScalarValue)">
            <summary>
            Documentation helper - overload ONLY to do some documention.
            </summary>
            <param name="x">Scalar</param>
            <returns>Scalar</returns>
        </member>
        <member name="M:YAMP.StandardFunction.Function(YAMP.MatrixValue)">
            <summary>
            Documentation helper - overload ONLY to do some documention.
            </summary>
            <param name="x">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:YAMP.VisualizationFunction">
            <summary>
            The visualization function is a special kind of system function, which
            takes care of the given plot (setting it as "LastPlot").
            </summary>
        </member>
        <member name="M:YAMP.VisualizationFunction.Perform(YAMP.Value)">
            <summary>
            Performs the function and takes the result (PlotValue) as LastPlot.
            </summary>
            <param name="argument">The argument for invoking the function.</param>
            <returns>The result of the function</returns>
        </member>
        <member name="T:YAMP.Numerics.GivensDecomposition">
            <summary>
            The Givens rotation is an implementation of a QR decomposition.
            This decomposition also works for complex numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.QRDecomposition">
            <summary>
            QR Decomposition.
            For an m-by-n matrix A with m >= n, the QR decomposition is an m-by-n
            orthogonal matrix Q and an n-by-n upper triangular matrix R so that
            A = Q * R.
            The QR decompostion always exists, even if the matrix does not have
            full rank, so the constructor will never fail.  The primary use of the
            QR decomposition is in the least squares solution of nonsquare systems
            of simultaneous linear equations.  This will fail if IsFullRank()
            returns false.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.DirectSolver">
            <summary>
            Abstract base class for any (direct) solver.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.DirectSolver.Solve(YAMP.MatrixValue)">
            <summary>
            Solves the given system of linear equations for a source vector b.
            </summary>
            <param name="b">The vector b in A * x = b.</param>
            <returns>The solution vector x.</returns>
        </member>
        <member name="F:YAMP.Numerics.QRDecomposition.m">
            <summary>
            Row and column dimensions.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.QRDecomposition.n">
            <summary>
            Row and column dimensions.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.QRDecomposition.#ctor(YAMP.MatrixValue)">
            <summary>
            QR Decomposition, computed by Householder reflections.
            </summary>
            <param name="A">Rectangular matrix</param>
            <returns>Structure to access R and the Householder vectors and compute Q.</returns>
        </member>
        <member name="M:YAMP.Numerics.QRDecomposition.Create(YAMP.MatrixValue)">
            <summary>
            Creates the right QR decomposition (Givens or Householder) depending on the given matrix.
            </summary>
            <param name="A">The matrix to decompose.</param>
            <returns>The right QR decomposition implementation.</returns>
        </member>
        <member name="P:YAMP.Numerics.QRDecomposition.FullRank">
            <summary>
            Is the matrix full rank?
            </summary>
            <returns>True if R, and hence A, has full rank.</returns>
        </member>
        <member name="P:YAMP.Numerics.QRDecomposition.R">
            <summary>
            Return the upper triangular factor
            </summary>
            <returns>R</returns>
        </member>
        <member name="P:YAMP.Numerics.QRDecomposition.Q">
            <summary>
            Generate and return the (economy-sized) orthogonal factor
            </summary>
            <returns>Q</returns>
        </member>
        <member name="M:YAMP.Numerics.GivensDecomposition.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new Givens decomposition.
            </summary>
            <param name="A">The matrix to decompose.</param>
        </member>
        <member name="M:YAMP.Numerics.GivensDecomposition.Solve(YAMP.MatrixValue)">
            <summary>
            Least squares solution of A * X = B
            </summary>
            <param name="b">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X that minimizes the two norm of Q*R*X-B.</returns>
            <exception cref="T:System.ArgumentException"> Matrix row dimensions must agree.</exception>
            <exception cref="T:System.SystemException"> Matrix is rank deficient.</exception>
        </member>
        <member name="P:YAMP.Numerics.GivensDecomposition.Q">
            <summary>
            Generate and return the (economy-sized) orthogonal factor
            </summary>
            <returns>Q</returns>
        </member>
        <member name="P:YAMP.Numerics.GivensDecomposition.R">
            <summary>
            Return the upper triangular factor
            </summary>
            <returns>R</returns>
        </member>
        <member name="T:YAMP.Numerics.HouseholderDecomposition">
            <summary>
            The Householder reflection is an implementation of a QR decomposition.
            This decomposition does not work for complex numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.HouseholderDecomposition.Rdiag">
            <summary>
            Array for internal storage of diagonal of R.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.HouseholderDecomposition.QR">
            <summary>
            Array for internal storage of decomposition.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.HouseholderDecomposition.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new householder decomposition.
            </summary>
            <param name="A">The matrix to decompose.</param>
        </member>
        <member name="M:YAMP.Numerics.HouseholderDecomposition.Solve(YAMP.MatrixValue)">
            <summary>
            Least squares solution of A * X = B
            </summary>
            <param name="b">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X that minimizes the two norm of Q*R*X-B.</returns>
            <exception cref="T:System.ArgumentException"> Matrix row dimensions must agree.</exception>
            <exception cref="T:System.SystemException"> Matrix is rank deficient.</exception>
        </member>
        <member name="P:YAMP.Numerics.HouseholderDecomposition.R">
            <summary>
            Return the upper triangular factor
            </summary>
            <returns>R</returns>
        </member>
        <member name="P:YAMP.Numerics.HouseholderDecomposition.Q">
            <summary>
            Generate and return the (economy-sized) orthogonal factor
            </summary>
            <returns>Q</returns>
        </member>
        <member name="P:YAMP.Numerics.HouseholderDecomposition.H">
            <summary>
            Return the Householder vectors
            </summary>
            <returns>Lower trapezoidal matrix whose columns define the reflections.</returns>
        </member>
        <member name="T:YAMP.Numerics.Fractal">
            <summary>
            Represents the abstract base class for Fractals.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Fractal.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <param name="colors">The number of colors to use.</param>
        </member>
        <member name="M:YAMP.Numerics.Fractal.R(System.Double)">
            <summary>
            Gets the red part of the color (0-255) for the given value.
            </summary>
            <param name="color">A value for the color (0...1)</param>
            <returns>The red part of the color (value 0 - 255).</returns>
        </member>
        <member name="M:YAMP.Numerics.Fractal.G(System.Double)">
            <summary>
            Gets the green part of the color (0-255) for the given value.
            </summary>
            <param name="color">A value for the color (0...1)</param>
            <returns>The green part of the color (value 0 - 255).</returns>
        </member>
        <member name="M:YAMP.Numerics.Fractal.B(System.Double)">
            <summary>
            Gets the blue part of the color (0-255) for the given value.
            </summary>
            <param name="color">A value for the color (0...1)</param>
            <returns>The blue part of the color (value 0 - 255).</returns>
        </member>
        <member name="M:YAMP.Numerics.Fractal.CalculateMatrix(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the matrix with all the fractal values.
            </summary>
            <param name="xi">The initial (start) x.</param>
            <param name="xf">The final (end) x.</param>
            <param name="yi">The initial (start) y.</param>
            <param name="yf">The final (end) y.</param>
            <param name="xsteps">The number of steps in x direction.</param>
            <param name="ysteps">The number of steps in y direction.</param>
            <returns>The matrix with all the values.</returns>
        </member>
        <member name="M:YAMP.Numerics.Fractal.Run(System.Double,System.Double)">
            <summary>
            Calculates a single value.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>The result (color value 0..1).</returns>
        </member>
        <member name="P:YAMP.Numerics.Fractal.MaxIterations">
            <summary>
            Gets the maximum number of iterations.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Fractal.Colors">
            <summary>
            Gets the number of colors to use.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.Julia">
            <summary>
            This is the (more general) Julia fractal (superset of the Mandelbrot set).
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Julia.#ctor">
            <summary>
            Creates a new Julia instance with the default number of iterations (250).
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Julia.#ctor(System.Int32)">
            <summary>
            Creates a new Julia instance with the default number of colors (25).
            </summary>
            <param name="maxIterations">The number of iterations.</param>
        </member>
        <member name="M:YAMP.Numerics.Julia.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="maxIterations">The maximum iterations.</param>
            <param name="colors">The number of colors.</param>
        </member>
        <member name="M:YAMP.Numerics.Julia.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="maxIterations">The maximum iterations.</param>
            <param name="colors">The number of colors.</param>
            <param name="c">Sets the coefficient in both directions.</param>
        </member>
        <member name="M:YAMP.Numerics.Julia.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="maxIterations">The maximum iterations.</param>
            <param name="colors">The number of colors.</param>
            <param name="cx">Sets the coefficient in x direction.</param>
            <param name="cy">Sets the coefficient in y direction.</param>
        </member>
        <member name="M:YAMP.Numerics.Julia.Run(System.Double,System.Double)">
            <summary>
            Calculates a single Julia value.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>The result (color value 0..1).</returns>
        </member>
        <member name="P:YAMP.Numerics.Julia.Cx">
            <summary>
            Gets or sets the coefficient in x direction.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Julia.Cy">
            <summary>
            Gets or sets the coefficient in y direction.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Julia.C">
            <summary>
            Gets or sets both values (XC, YC) to a single value.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.Newton">
            <summary>
            This is the so called Newton fractal.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Newton.#ctor">
            <summary>
            Creates a new Newton instance with the default number of iterations (32).
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Newton.#ctor(System.Int32)">
            <summary>
            Creates a new Newton instance with the default number of colors (25).
            </summary>
            <param name="maxIterations">The number of iterations.</param>
        </member>
        <member name="M:YAMP.Numerics.Newton.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="maxIterations">The maximum iterations.</param>
            <param name="colors">The number of colors.</param>
        </member>
        <member name="M:YAMP.Numerics.Newton.Run(System.Double,System.Double)">
            <summary>
            Calculates a single Newton fractal value.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>The result (color value 0..1).</returns>
        </member>
        <member name="T:YAMP.Numerics.BlasL3">
            <summary>
            Blas Level 3 Matrix Matrix multiplication.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.BlasL3.dGemm(System.Double[],System.Int32,System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a matrix times matrix operation C = A * B with real matrices.
            </summary>
            <param name="aStore">The 1-dimensional array for the matrix A.</param>
            <param name="aOffset">The offset in the array for A.</param>
            <param name="aRowStride">The difference for skipping one row.</param>
            <param name="aColStride">The difference for skipping one column.</param>
            <param name="bStore">The 1-dimensional array for the matrix B.</param>
            <param name="bOffset">The offset in the array for B.</param>
            <param name="bRowStride">The difference for skipping one row.</param>
            <param name="bColStride">The difference for skipping one column.</param>
            <param name="cStore">The 1-dimensional array for the matrix C.</param>
            <param name="cOffset">The offset in the array for C.</param>
            <param name="cRowStride">The difference for skipping one row.</param>
            <param name="cColStride">The difference for skipping one column.</param>
            <param name="rowsA">The rows to handle in the matrix A.</param>
            <param name="colsB">The coluumns to handle in the matrix B.</param>
            <param name="length">The columns of A / rows of B - or length for the multiplication.</param>
        </member>
        <member name="M:YAMP.Numerics.BlasL3.cGemm(YAMP.ScalarValue[],System.Int32,System.Int32,System.Int32,YAMP.ScalarValue[],System.Int32,System.Int32,System.Int32,YAMP.ScalarValue[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a matrix times matrix operation C = A * B with complex matrices.
            </summary>
            <param name="aStore">The 1-dimensional complex array for the matrix A.</param>
            <param name="aOffset">The offset in the array for A.</param>
            <param name="aRowStride">The difference for skipping one row.</param>
            <param name="aColStride">The difference for skipping one column.</param>
            <param name="bStore">The 1-dimensional complex array for the matrix B.</param>
            <param name="bOffset">The offset in the array for B.</param>
            <param name="bRowStride">The difference for skipping one row.</param>
            <param name="bColStride">The difference for skipping one column.</param>
            <param name="cStore">The 1-dimensional complex array for the matrix C.</param>
            <param name="cOffset">The offset in the array for C.</param>
            <param name="cRowStride">The difference for skipping one row.</param>
            <param name="cColStride">The difference for skipping one column.</param>
            <param name="rowsA">The rows to handle in the matrix A.</param>
            <param name="colsB">The coluumns to handle in the matrix B.</param>
            <param name="length">The columns of A / rows of B - or length for the multiplication.</param>
        </member>
        <member name="T:YAMP.AndOperator">
            <summary>
            The basic and &amp;&amp; operator.
            </summary>
        </member>
        <member name="T:YAMP.LogicOperator">
            <summary>
            The abstract base class for any logic operator (==, ~=, >, >=, ...),
            which is essentially a binary operator.
            </summary>
        </member>
        <member name="T:YAMP.BinaryOperator">
            <summary>
            The abstract base class for any binary operator (+, -, *, ...).
            </summary>
        </member>
        <member name="T:YAMP.Operator">
            <summary>
            The abstract base class for any operator (unary, binary, ...).
            </summary>
        </member>
        <member name="M:YAMP.Operator.#ctor(System.String)">
            <summary>
            Creates a new operator given the string for the operator.
            </summary>
            <param name="op">The operator string like +.</param>
        </member>
        <member name="M:YAMP.Operator.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new operator given the string and level for the operator.
            </summary>
            <param name="op">The operator string like +.</param>
            <param name="level">The operator level like 100.</param>
        </member>
        <member name="M:YAMP.Operator.Evaluate(YAMP.Expression[],System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Begins the evaluation of given expressions.
            </summary>
            <param name="expressions">The expressions to evaluate.</param>
            <param name="symbols">External symbols to consider.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:YAMP.Operator.Create">
            <summary>
            Creates a new instance of the current operator.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.Operator.Create(YAMP.ParseEngine)">
            <summary>
            Creates a new instance of the current operator.
            </summary>
            <param name="engine">The engine that is used for parsing the query.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.Operator.RegisterElement">
            <summary>
            Registers the operator at its factory.
            </summary>
        </member>
        <member name="M:YAMP.Operator.ToString">
            <summary>
            Returns the string representation of the operator.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:YAMP.Operator.ToCode">
            <summary>
            The code representation of the operator, which is usually just the operator itself.
            </summary>
            <returns>A valid part of a YAMP query.</returns>
        </member>
        <member name="P:YAMP.Operator.Void">
            <summary>
            Gets a dummy operator for doing nothing.
            </summary>
        </member>
        <member name="P:YAMP.Operator.Expressions">
            <summary>
            Gets how many expressions are eaten by thix operator (1 = unary, 2 = binary, ...).
            </summary>
        </member>
        <member name="P:YAMP.Operator.Op">
            <summary>
            Gets the operator's string.
            </summary>
        </member>
        <member name="P:YAMP.Operator.Level">
            <summary>
            Gets the level of the operator.
            </summary>
        </member>
        <member name="P:YAMP.Operator.IsRightToLeft">
            <summary>
            Gets if the operator has to be executed from right to left for chained scenarios.
            </summary>
        </member>
        <member name="M:YAMP.BinaryOperator.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new binary operator.
            </summary>
            <param name="op">The operator string.</param>
            <param name="level">The operator level.</param>
        </member>
        <member name="M:YAMP.BinaryOperator.Perform(YAMP.Value,YAMP.Value)">
            <summary>
            Performs the operation with the 2 evaluated values.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:YAMP.BinaryOperator.Handle(YAMP.Expression,YAMP.Expression,System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Handles the evaluation of two expressions.
            </summary>
            <param name="left">The expression on the left.</param>
            <param name="right">The expression on the right.</param>
            <param name="symbols">The external symbols to consider.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:YAMP.BinaryOperator.Evaluate(YAMP.Expression[],System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            The implementation of the more general evaluate method.
            </summary>
            <param name="expressions">The array of expressions, binary operators require Length == 2.</param>
            <param name="symbols">The external symbols to consider.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:YAMP.LogicOperator.#ctor(System.String)">
            <summary>
            Creates a new logic operator (like ==, ~=, ...).
            </summary>
            <param name="op">The operator string.</param>
        </member>
        <member name="M:YAMP.LogicOperator.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new logic operator.
            </summary>
            <param name="op">The operator string.</param>
            <param name="level">The operator level.</param>
        </member>
        <member name="M:YAMP.LogicOperator.Compare(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            Method to implement, which compares two scalars.
            </summary>
            <param name="left">The left one.</param>
            <param name="right">The right one.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:YAMP.LogicOperator.Perform(YAMP.Value,YAMP.Value)">
            <summary>
            Performs the logic operation with two values.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:YAMP.OrOperator">
            <summary>
            The basic or || operator.
            </summary>
        </member>
        <member name="T:YAMP.UnaryOperator">
            <summary>
            The abstract base class for every unary operator (!, ', ...)
            </summary>
        </member>
        <member name="M:YAMP.UnaryOperator.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new unary operator.
            </summary>
            <param name="op">The operator string.</param>
            <param name="level">The operator level.</param>
        </member>
        <member name="M:YAMP.UnaryOperator.Perform(YAMP.Value)">
            <summary>
            Performs the operation with the evaluated value.
            </summary>
            <param name="value">The value to operate with.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:YAMP.UnaryOperator.Handle(YAMP.Expression,System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Handles the evaluation of one expression.
            </summary>
            <param name="expression">The expression on the left.</param>
            <param name="symbols">The external symbols to consider.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:YAMP.UnaryOperator.Evaluate(YAMP.Expression[],System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            The implementation of the more general evaluate method.
            </summary>
            <param name="expressions">The array of expressions, unary operators require Length == 1.</param>
            <param name="symbols">The external symbols to consider.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:YAMP.NegateOperator">
            <summary>
            Returns the given scalar(s) with a switched sign. This operator is a unary operator,
            but is used as a binary one with a pseudo expression on the left side.
            </summary>
        </member>
        <member name="T:YAMP.PosateOperator">
            <summary>
            Just returns the given value.
            </summary>
        </member>
        <member name="T:YAMP.PreDecOperator">
            <summary>
            This is the prefix decrement operator --.
            </summary>
        </member>
        <member name="T:YAMP.PreIncOperator">
            <summary>
            This is the prefix increment operator ++.
            </summary>
        </member>
        <member name="T:YAMP.YAMPArgumentInvalidException">
            <summary>
            Class to use for invalid arguments (type-wise or value-wise).
            </summary>
        </member>
        <member name="M:YAMP.YAMPArgumentInvalidException.#ctor(System.String,System.String)">
            <summary>
            Creates a new argument invalid exception.
            </summary>
            <param name="function">The function where this happened.</param>
            <param name="argument">The given argument.</param>
        </member>
        <member name="M:YAMP.YAMPArgumentInvalidException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a new argument invalid exception.
            </summary>
            <param name="function">The function where this happened.</param>
            <param name="argumentType">The type of argument.</param>
            <param name="argumentNumber">The number of the argument.</param>
        </member>
        <member name="M:YAMP.YAMPArgumentInvalidException.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new argument invalid exception.
            </summary>
            <param name="function">The function where this happened.</param>
            <param name="argumentType">The actual type of argument.</param>
            <param name="expectedType">The expected type of argument.</param>
            <param name="argumentNumber">The number of the argument.</param>
        </member>
        <member name="M:YAMP.YAMPArgumentInvalidException.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new argument invalid exception.
            </summary>
            <param name="function">The function where this happened.</param>
            <param name="argumentNumber">The number of the argument.</param>
        </member>
        <member name="T:YAMP.YAMPArgumentRangeException">
            <summary>
            This class should be used if an argument is out of range.
            </summary>
        </member>
        <member name="M:YAMP.YAMPArgumentRangeException.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Creates a new instance of the range exception.
            </summary>
            <param name="parameterName">The parameter where this happened.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:YAMP.YAMPArgumentRangeException.#ctor(System.String,System.Double)">
            <summary>
            Creates a new instance of the range exception.
            </summary>
            <param name="parameterName">The parameter where this happened.</param>
            <param name="lowerBound">The lower bound.</param>
        </member>
        <member name="M:YAMP.YAMPArgumentRangeException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the range exception.
            </summary>
            <param name="parameterName">The parameter where this happened.</param>
            <param name="boundaries">A string expressing the boundaries.</param>
        </member>
        <member name="M:YAMP.YAMPArgumentRangeException.#ctor(System.String)">
            <summary>
            Creates a new instance of the range exception.
            </summary>
            <param name="parameterName">The parameter where this happened.</param>
        </member>
        <member name="T:YAMP.YAMPArgumentWrongTypeException">
            <summary>
            Class to use when an argument has the wrong-type and some other type was expected.
            </summary>
        </member>
        <member name="M:YAMP.YAMPArgumentWrongTypeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the argument wrong type exception.
            </summary>
            <param name="argumentType">The given argument type.</param>
            <param name="expectedType">The expected argument type.</param>
            <param name="function">The function where this happened.</param>
        </member>
        <member name="M:YAMP.YAMPArgumentWrongTypeException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the argument wrong type exception.
            </summary>
            <param name="argumentType">The given argument type.</param>
            <param name="expectedType">The expected argument type.</param>
            <param name="function">The function where this happened.</param>
            <param name="argumentName">The name of the provided argument.</param>
        </member>
        <member name="M:YAMP.YAMPArgumentWrongTypeException.#ctor(System.String,System.String[],System.String)">
            <summary>
            Creates a new instance of the argument wrong type exception.
            </summary>
            <param name="argumentType">The given argument type.</param>
            <param name="expectedTypes">A list of possible types.</param>
            <param name="function">The function where this happened.</param>
        </member>
        <member name="T:YAMP.YAMPDifferentDimensionsException">
            <summary>
            Class to use when two matrices (or objects) have different dimensions.
            </summary>
        </member>
        <member name="M:YAMP.YAMPDifferentDimensionsException.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new different dimensions exception.
            </summary>
            <param name="rowsA">The rows in A.</param>
            <param name="columnsA">The columns in A.</param>
            <param name="rowsB">The rows in B.</param>
            <param name="columnsB">The columns in B.</param>
        </member>
        <member name="M:YAMP.YAMPDifferentDimensionsException.#ctor(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Creates a new different dimensions exception.
            </summary>
            <param name="A">The matrix A.</param>
            <param name="B">The matrix B.</param>
        </member>
        <member name="T:YAMP.YAMPFileNotFoundException">
            <summary>
            Class to use when a file could not be found.
            </summary>
        </member>
        <member name="M:YAMP.YAMPFileNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new file not found exception.
            </summary>
            <param name="fileName">The path to the file that has not been found.</param>
        </member>
        <member name="T:YAMP.BodyKeyword">
            <summary>
            The abstract base class for all keywords with a body.
            </summary>
        </member>
        <member name="P:YAMP.BodyKeyword.Body">
            <summary>
            Gets the (breakable) body statement of the breakable block.
            </summary>
        </member>
        <member name="T:YAMP.ReturnKeyword">
            <summary>
            Represents the return keyword to cancel the current execution and return
            the given expression [if any].
            </summary>
        </member>
        <member name="T:YAMP.Numerics.BlasL1">
            <summary>
            Provides BLAS Level 1 Access, this level contains vector operations of the form y = a * x + y.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.dCopy(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies some x vector to some other y vector considering the given offsets.
            </summary>
            <param name="xStore">The source vector.</param>
            <param name="xOffset">Offset in the source.</param>
            <param name="xStride">The offset between two elements in the source.</param>
            <param name="yStore">The target vector.</param>
            <param name="yOffset">Offset in the target.</param>
            <param name="yStride">The offset between two elements in the target.</param>
            <param name="count">Number of elements to copy.</param>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.dSwap(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Swaps the elements of some vector x and some vector y.
            </summary>
            <param name="xStore">The first vector.</param>
            <param name="xOffset">Offset in the first vector.</param>
            <param name="xStride">The offset between two elements of the first vector.</param>
            <param name="yStore">The second vector.</param>
            <param name="yOffset">Offset in the second vector.</param>
            <param name="yStride">The offset between two elements of the second vector.</param>
            <param name="count">Number of elements to swap.</param>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.dNrm1(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the sum_i |x_i| norm.
            </summary>
            <param name="store">The source vector.</param>
            <param name="offset">The offset in the source.</param>
            <param name="stride">The offset between two elements.</param>
            <param name="count">The number of elements to consider.</param>
            <returns>The L1 norm.</returns>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.dNrm2(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns |x| = sqrt( sum_i x_i^2 ) norm.
            </summary>
            <param name="store">The source vector.</param>
            <param name="offset">The offset in the source.</param>
            <param name="stride">The offset between two elements.</param>
            <param name="count">The number of elements to consider.</param>
            <returns>The L2 norm.</returns>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.dDot(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the dot product (a, b).
            </summary>
            <param name="aStore">The first vector a.</param>
            <param name="aOffset">Offset in the vector a.</param>
            <param name="aStride">The offset between two elements of the vector a.</param>
            <param name="bStore">The second vector b.</param>
            <param name="bOffset">Offset in the vector a.</param>
            <param name="bStride">The offset between two elements of the vector a.</param>
            <param name="count">The number of elements to consider.</param>
            <returns>The result of the dot product.</returns>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.cDot(YAMP.ScalarValue[],System.Int32,System.Int32,YAMP.ScalarValue[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the complex dot product (a, b).
            </summary>
            <param name="aStore">The first vector a.</param>
            <param name="aOffset">Offset in the vector a.</param>
            <param name="aStride">The offset between two elements of the vector a.</param>
            <param name="bStore">The second vector b.</param>
            <param name="bOffset">Offset in the vector a.</param>
            <param name="bStride">The offset between two elements of the vector a.</param>
            <param name="count">The number of elements to consider.</param>
            <returns>The result of the complex dot product.</returns>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.dScal(System.Double,System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the result of the product x = a * x, with a scalar a and a vector x.
            </summary>
            <param name="alpha">Some arbitrary real scalar.</param>
            <param name="store">The vector x.</param>
            <param name="offset">The offset in the vector x.</param>
            <param name="stride">The offset between two elements in x.</param>
            <param name="count">The number of elements to consider (from x).</param>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.cScal(YAMP.ScalarValue,YAMP.ScalarValue[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the result of the product x = a * x, with a complex a and a complex vector x.
            </summary>
            <param name="alpha">Some arbitrary complex scalar.</param>
            <param name="store">The complex vector x.</param>
            <param name="offset">The offset in the vector x.</param>
            <param name="stride">The offset between two elements in x.</param>
            <param name="count">The number of elements to consider (from x).</param>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.dAxpy(System.Double,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes y = a x + y, where x, y are vectors and a is a real scalar.
            </summary>
            <param name="alpha">Some arbitrary real scalar.</param>
            <param name="xStore">The vector x.</param>
            <param name="xOffset">The offset in the vector x.</param>
            <param name="xStride">The offset between two elements in x.</param>
            <param name="yStore">The vector y.</param>
            <param name="yOffset">The offset in the vector y.</param>
            <param name="yStride">The offset between two elements in y.</param>
            <param name="count">The number of elements to take.</param>
        </member>
        <member name="M:YAMP.Numerics.BlasL1.cAxpy(YAMP.ScalarValue,YAMP.ScalarValue[],System.Int32,System.Int32,YAMP.ScalarValue[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes y = a x + y, where x, y are complex vectors and a is a complex scalar.
            </summary>
            <param name="alpha">Some arbitrary complex scalar.</param>
            <param name="xStore">The complex vector x.</param>
            <param name="xOffset">The offset in the vector x.</param>
            <param name="xStride">The offset between two elements in x.</param>
            <param name="yStore">The complex vector y.</param>
            <param name="yOffset">The offset in the vector y.</param>
            <param name="yStride">The offset between two elements in y.</param>
            <param name="count">The number of elements to take.</param>
        </member>
        <member name="T:YAMP.Numerics.BlasL2">
            <summary>
            Provides BLAS Level 2 Access, this level contains matrix-vector operations of the form y = A * x + y.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.BlasL2.dGemv(System.Double[],System.Int32,System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            y = A * x + y, where x, y are vectors and A is a matrix.
            </summary>
            <param name="aStore">1 dim double array for A.</param>
            <param name="aOffset">Offset in the array for A.</param>
            <param name="aRowStride">Rows in A.</param>
            <param name="aColStride">Columns in A.</param>
            <param name="xStore">1 dim double array for x.</param>
            <param name="xOffset">Offset in the array for x.</param>
            <param name="xStride">Number of entries in x.</param>
            <param name="yStore">1 dim double array for y.</param>
            <param name="yOffset">Offset in the array for y.</param>
            <param name="yStride">Number of entries in y.</param>
            <param name="rows">Geometry information for the rows.</param>
            <param name="cols">Geometry information for the columns.</param>
        </member>
        <member name="M:YAMP.Numerics.BlasL2.cGemv(YAMP.ScalarValue[],System.Int32,System.Int32,System.Int32,YAMP.ScalarValue[],System.Int32,System.Int32,YAMP.ScalarValue[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            y = A * x + y, where x, y are vectors and A is a matrix.
            </summary>
            <param name="aStore">1 dim double array for A.</param>
            <param name="aOffset">Offset in the array for A.</param>
            <param name="aRowStride">Rows in A.</param>
            <param name="aColStride">Columns in A.</param>
            <param name="xStore">1 dim double array for x.</param>
            <param name="xOffset">Offset in the array for x.</param>
            <param name="xStride">Number of entries in x.</param>
            <param name="yStore">1 dim double array for y.</param>
            <param name="yOffset">Offset in the array for y.</param>
            <param name="yStride">Number of entries in y.</param>
            <param name="rows">Geometry information for the rows.</param>
            <param name="cols">Geometry information for the columns.</param>
        </member>
        <member name="T:YAMP.Numerics.Dawson">
            <summary>
            This class contains the dawson integral.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Dawson.DawsonIntegral(System.Double)">
            <summary>
            Computes the dawson integral.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of F(x).</returns>
        </member>
        <member name="T:YAMP.Numerics.Fourier">
            <summary>
            A more advanced FFT that is a lot more general.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Fourier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Fourier transformer.
            </summary>
            <param name="size">The series length of the transformer, which must be positive.</param>
        </member>
        <member name="M:YAMP.Numerics.Fourier.#ctor(System.Int32,YAMP.Numerics.FourierSign,YAMP.Numerics.FourierNormalization)">
            <summary>
            Initializes a new instance of the Fourier transformer with the given sign and normalization conventions.
            </summary>
            <param name="size">The series length of the transformer, which must be positive.</param>
            <param name="signConvention">The sign convention of the transformer.</param>
            <param name="normalizationConvention">The normalization convention of the transformer.</param>
        </member>
        <member name="M:YAMP.Numerics.Fourier.Transform(System.Collections.Generic.IList{YAMP.ScalarValue})">
            <summary>
            Computes the Fourier transform of the given series.
            </summary>
            <param name="values">The series to transform.</param>
            <returns>The discrete Fourier transform of the series.</returns>
        </member>
        <member name="M:YAMP.Numerics.Fourier.InverseTransform(System.Collections.Generic.IList{YAMP.ScalarValue})">
            <summary>
            Computes the inverse Fourier transform of the given series.
            </summary>
            <param name="values">The series to invert.</param>
            <returns>The inverse discrete Fourier transform of the series.</returns>
        </member>
        <member name="P:YAMP.Numerics.Fourier.Length">
            <summary>
            The series length for which the transformer is specialized.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Fourier.NormalizationConvention">
            <summary>
            Gets the normalization convention used by the transformer.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Fourier.SignConvention">
            <summary>
            Gets the normalization convention used by the transformer.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.FourierNormalization">
            <summary>
            Possible normalization values for the fourier transformation.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.FourierNormalization.None">
            <summary>
            The series is not normalized.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.FourierNormalization.Unitary">
            <summary>
            The series is multiplied by 1/N<sup>1/2</sup>.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.FourierNormalization.Inverse">
            <summary>
            The series is multiplied by 1/N.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.FourierSign">
            <summary>
            The two possible signs for the fourier transformation.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.FourierSign.Positive">
            <summary>
            The exponent has positive imaginary values.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.FourierSign.Negative">
            <summary>
            The exponent has negative imaginary values.
            </summary>
        </member>
        <member name="T:YAMP.PostDecOperator">
            <summary>
            This is the postfix decrement operator --.
            </summary>
        </member>
        <member name="T:YAMP.PostIncOperator">
            <summary>
            This is the postfix increment operator ++.
            </summary>
        </member>
        <member name="T:YAMP.ParseContext">
            <summary>
            Class that describes the current parse context (available functions, constants, variables, ...).
            </summary>
            <summary>
            Class that describes the current parse context (available functions, constants, variables, ...).
            </summary>
        </member>
        <member name="T:YAMP.BaseParseContext">
            <summary>
            Base class for the ParseContext.
            </summary>
        </member>
        <member name="M:YAMP.BaseParseContext.LoadFunction(System.String)">
            <summary>
            Tries to load a function from a given file.
            </summary>
            <param name="symbolName">The name of the function (equals the name of the file).</param>
            <returns>The function (if found) or NULL.</returns>
        </member>
        <member name="F:YAMP.ParseContext.buffer">
            <summary>
            List to buffer previous file function calls.
            </summary>
        </member>
        <member name="M:YAMP.ParseContext.Load(System.String)">
            <summary>
            Loads the workspace from the given file.
            </summary>
            <param name="fromFileName">The path to the file.</param>
        </member>
        <member name="M:YAMP.ParseContext.Save(System.String)">
            <summary>
            Saves the workspace in the given file.
            </summary>
            <param name="toFileName">The path to the file.</param>
        </member>
        <member name="M:YAMP.ParseContext.LoadFunction(System.String)">
            <summary>
            Tries to load a function from a given file.
            </summary>
            <param name="symbolName">The name of the function (equals the name of the file).</param>
            <returns>The function (if found) or NULL.</returns>
        </member>
        <member name="M:YAMP.ParseContext.#ctor">
            <summary>
            Creates a new (fresh) context with the default context as parent.
            </summary>
        </member>
        <member name="M:YAMP.ParseContext.#ctor(YAMP.ParseContext)">
            <summary>
            Creates a new context with a custom parent (nested, i.e. more local layer).
            </summary>
            <param name="parent">
            The parent context for the new context.
            </param>
        </member>
        <member name="M:YAMP.ParseContext.AddConstant(System.String,YAMP.IConstants)">
            <summary>
            Adds a constant to the context.
            </summary>
            <param name="name">
            The name of the constant.
            </param>
            <param name="constant">
            The class instance of the constant.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.AddFunction(System.String,YAMP.IFunction)">
            <summary>
            Adds a function to the context.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <param name="func">
            The IFunction instance to add.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.RemoveConstant(System.String)">
            <summary>
            Removes a constant from the context.
            </summary>
            <param name="name">
            The name of the constant.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.RemoveFunction(System.String)">
            <summary>
            Removes a function from the context.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.RenameConstant(System.String,System.String)">
            <summary>
            Renames a constant from the context.
            </summary>
            <param name="oldName">
            The old name of the constant.
            </param>
            <param name="newName">
            The new name for the constant.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.RenameFunction(System.String,System.String)">
            <summary>
            Renames a function from the context.
            </summary>
            <param name="oldName">
            The old name of the function.
            </param>
            <param name="newName">
            The new name for the function.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.FindConstants(System.String)">
            <summary>
            Finds the constant with the specified name.
            </summary>
            <param name="name">
            The symbolic name to retrieve.
            </param>
            <returns>The value of the constant.</returns>
        </member>
        <member name="M:YAMP.ParseContext.FindFunction(System.String)">
            <summary>
            Finds the function instance with the specified name.
            </summary>
            <param name="name">
            The symbolic name to retrieve.
            </param>
            <returns>The instance of the function's class.</returns>
        </member>
        <member name="M:YAMP.ParseContext.Clear">
            <summary>
            Clears the list of assigned variables.
            </summary>
        </member>
        <member name="M:YAMP.ParseContext.AssignVariable(System.String,YAMP.Value)">
            <summary>
            Assigns a value to a symbolic name.
            </summary>
            <param name="name">
            The name to assign a value to.
            </param>
            <param name="value">
            The value of the symbol.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.AssignVariable(YAMP.ParseContext,System.String,YAMP.Value)">
            <summary>
            Assigns a variable to the given context.
            </summary>
            <param name="context">The context, where to assign the variable to.</param>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="M:YAMP.ParseContext.GetVariable(System.String)">
            <summary>
            Gets the value with the specific symbolic name.
            </summary>
            <param name="name">
            The variable's name.
            </param>
            <returns>The value of the variable or null.</returns>
        </member>
        <member name="M:YAMP.ParseContext.GetVariableContext(System.String)">
            <summary>
            Gets the exact context of the given variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <returns>The context or NULL if nothing was found.</returns>
        </member>
        <member name="M:YAMP.ParseContext.ChangeLastPlotTo(YAMP.PlotValue)">
            <summary>
            Sets the lastplot to be used to the given value.
            </summary>
            <param name="plot">The plot to change to.</param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.Run(System.String)">
            <summary>
            Runs a query within the current context.
            </summary>
            <param name="query">
            The input to parse and execute.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.Run(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Runs a query within the current context.
            </summary>
            <param name="query">
            The input to parse and execute.
            </param>
            <param name="variables">
            The volatile variables to consider.
            </param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.RaiseVariableChanged(System.String,YAMP.Value)">
            <summary>
            This is raised when a variable has changed.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="M:YAMP.ParseContext.RaiseVariableCreated(System.String,YAMP.Value)">
            <summary>
            This is raised when a variable has been created.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="M:YAMP.ParseContext.RaiseVariableRemoved(System.String,YAMP.Value)">
            <summary>
            This is raised when a variable has been removed.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="M:YAMP.ParseContext.RaiseLastPlotChanged(YAMP.PlotValue)">
            <summary>
            This is raised when the last plot has been changed.
            </summary>
            <param name="plot"></param>
        </member>
        <member name="M:YAMP.ParseContext.SetDefaultProperty(System.String,System.String,YAMP.Value)">
            <summary>
            Sets a template property in the dictionary.
            </summary>
            <param name="binName">The category of the default property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyValue">The default value of the property.</param>
            <returns>The current context.</returns>
        </member>
        <member name="M:YAMP.ParseContext.GetDefaultProperties(System.String)">
            <summary>
            Gets the key value pairs of the specified bin.
            </summary>
            <param name="binName">The name of the template bin.</param>
            <returns>The read only key value pairs.</returns>
        </member>
        <member name="M:YAMP.ParseContext.ApplyPlotTemplate(YAMP.PlotValue)">
            <summary>
            Applies the template set for plots.
            </summary>
            <param name="plot">The plot which will adjusted to the default values.</param>
            <returns>The current context.</returns>
        </member>
        <member name="E:YAMP.ParseContext.OnVariableChanged">
            <summary>
            If an existing variable changed, this event is executed.
            </summary>
        </member>
        <member name="E:YAMP.ParseContext.OnVariableCreated">
            <summary>
            If a new variable is added, this event is executed.
            </summary>
        </member>
        <member name="E:YAMP.ParseContext.OnVariableRemoved">
            <summary>
            If an existing variable is removed, this event is executed.
            </summary>
        </member>
        <member name="E:YAMP.ParseContext.OnLastPlotChanged">
            <summary>
            If the last plot variable is changed, this event is executed.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.Default">
            <summary>
            Gets the default (root) parse context.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.Parent">
            <summary>
            Gets the context's parent context (NULL for the top context).
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.DefaultDisplayStyle">
            <summary>
            Gets or sets the default display style.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.Constants">
            <summary>
            Gets the constants that are present in the local context.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.AllConstants">
            <summary>
            Gets all constants that are currently available in the workspace.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.Functions">
            <summary>
            Gets the functions that are currently available in the local workspace.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.AllFunctions">
            <summary>
            Gets all functions that are currently available in the workspace.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.Variables">
            <summary>
            Gets the currently assigned (local) variables.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.AllVariables">
            <summary>
            Gets all currently assigned variables (local and global).
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.CustomExponent">
            <summary>
            Gets or sets if values should use a custom string representation mode where
            exponents are shown in times ten to the power of some superscript instead of
            the scientific exponential notation. 
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.IsReadOnly">
            <summary>
            Gets the value if the context is read only (the variables cannot be altered).
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.Precision">
            <summary>
            Gets or sets the current precision in decimal digits.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.LastPlot">
            <summary>
            Gets the last plot added to the context or the parent's context.
            </summary>
        </member>
        <member name="T:YAMP.ParseContext.FunctionBuffer">
            <summary>
            Class to buffer previous file function calls.
            </summary>
        </member>
        <member name="M:YAMP.ParseContext.FunctionBuffer.Lookup">
            <summary>
            Requests the function to be looked up.
            </summary>
            <returns>The function or NULL, if the context did not contain the function.</returns>
        </member>
        <member name="P:YAMP.ParseContext.FunctionBuffer.LastUpdated">
            <summary>
            Gets or sets the time of the last update of the file.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.FunctionBuffer.FileName">
            <summary>
            Gets the file name (functionname + ys as extension).
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.FunctionBuffer.Directory">
            <summary>
            Gets or sets the directory that has been used.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.FunctionBuffer.FunctionName">
            <summary>
            Gets or sets the name of the function.
            </summary>
        </member>
        <member name="P:YAMP.ParseContext.FunctionBuffer.Context">
            <summary>
            Gets or sets the used context.
            </summary>
        </member>
        <member name="T:YAMP.NotificationType">
            <summary>
            Classifies the various types of notifications.
            </summary>
        </member>
        <member name="F:YAMP.NotificationType.Failure">
            <summary>
            Indicates that some (non-exceptional) error occured.
            </summary>
        </member>
        <member name="F:YAMP.NotificationType.Success">
            <summary>
            Indicates that some operation did run successfully.
            </summary>
        </member>
        <member name="F:YAMP.NotificationType.Information">
            <summary>
            Just as a pure information point.
            </summary>
        </member>
        <member name="F:YAMP.NotificationType.Message">
            <summary>
            Should be displayed like a message (used by printf).
            </summary>
        </member>
        <member name="T:YAMP.PopularKinds">
            <summary>
            Defines a standard set of kinds of functions.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.Function">
            <summary>
            Just a normal function.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.Plot">
            <summary>
            A visualization related function for plotting or modifing plots.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.System">
            <summary>
            A special kind of function - a system function.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.Constant">
            <summary>
            This is not a function, but a constant.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.Random">
            <summary>
            This is a random number generator with a specific distribution.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.Trigonometric">
            <summary>
            This is a trigonometric function.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.Statistic">
            <summary>
            This is a statistic function.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.Logic">
            <summary>
            This is a logic function.
            </summary>
        </member>
        <member name="F:YAMP.PopularKinds.Conversion">
            <summary>
            This is a converter function.
            </summary>
        </member>
        <member name="T:YAMP.NotificationEventArgs">
            <summary>
            This class is used to transmit notifications in interactive mode.
            </summary>
        </member>
        <member name="M:YAMP.NotificationEventArgs.#ctor(YAMP.NotificationType,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="type">The type of notification.</param>
            <param name="message">The pure notification message.</param>
        </member>
        <member name="P:YAMP.NotificationEventArgs.Type">
            <summary>
            Gets the notification type.
            </summary>
        </member>
        <member name="P:YAMP.NotificationEventArgs.Message">
            <summary>
            Gets the message delivered with the variable.
            </summary>
        </member>
        <member name="P:YAMP.NotificationEventArgs.Tag">
            <summary>
            Gets or sets additional details covered by this notification.
            </summary>
        </member>
        <member name="T:YAMP.PauseEventArgs">
            <summary>
            Data used for giving user prompts.
            </summary>
        </member>
        <member name="M:YAMP.PauseEventArgs.#ctor(System.Threading.EventWaitHandle)">
            <summary>
            Creates a new user input event argument.
            </summary>
            <param name="waitHandle">The wait handle where the waiting is based on.</param>
        </member>
        <member name="M:YAMP.PauseEventArgs.Continue">
            <summary>
            Continues with the given input.
            </summary>
        </member>
        <member name="T:YAMP.UserInputEventArgs">
            <summary>
            Data used for giving user prompts.
            </summary>
        </member>
        <member name="M:YAMP.UserInputEventArgs.#ctor(System.Threading.EventWaitHandle,System.String)">
            <summary>
            Creates a new user input event argument.
            </summary>
            <param name="waitHandle">The wait handle where the waiting is based on.</param>
            <param name="message">The message to show.</param>
        </member>
        <member name="M:YAMP.UserInputEventArgs.Continue(System.String)">
            <summary>
            Continues with the given input.
            </summary>
            <param name="input">The user's input.</param>
        </member>
        <member name="P:YAMP.UserInputEventArgs.Message">
            <summary>
            Gets the associated message.
            </summary>
        </member>
        <member name="P:YAMP.UserInputEventArgs.Input">
            <summary>
            Gets the input.
            </summary>
        </member>
        <member name="T:YAMP.Plugin">
            <summary>
            Holds information about a stored plugin.
            </summary>
        </member>
        <member name="M:YAMP.Plugin.#ctor(YAMP.ParseContext,System.String)">
            <summary>
            Creates a new Plugin information holder.
            </summary>
            <param name="context">The assigned context.</param>
            <param name="name">The name of the plugin (fullname).</param>
        </member>
        <member name="M:YAMP.Plugin.Uninstall">
            <summary>
            Uninstalls the plugin.
            </summary>
        </member>
        <member name="P:YAMP.Plugin.Id">
            <summary>
            Gets the id of the plugin.
            </summary>
        </member>
        <member name="P:YAMP.Plugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:YAMP.Plugin.Context">
            <summary>
            Gets the context of the plugin.
            </summary>
        </member>
        <member name="P:YAMP.Plugin.Constants">
            <summary>
            Gets the names of the constants delivered by the plugin.
            </summary>
        </member>
        <member name="P:YAMP.Plugin.Functions">
            <summary>
            Gets the names of the functions delivered by the plugin.
            </summary>
        </member>
        <member name="P:YAMP.Plugin.ValueTypes">
            <summary>
            Gets the names of the value types delivered by the plugin.
            </summary>
        </member>
        <member name="T:YAMP.YMath">
            <summary>
            Capsulates an ensemble of internally (frequently) used math functions.
            </summary>
        </member>
        <member name="T:YAMP.HeatmapPlotValue">
            <summary>
            Contains the data for heatmap plots.
            </summary>
        </member>
        <member name="T:YAMP.XYPlotValue">
            <summary>
            Abstract base class for plot values that are based on an XY
            (or similar) coordinate system.
            </summary>
        </member>
        <member name="T:YAMP.PlotValue">
            <summary>
            Abstract base class for any plot.
            </summary>
        </member>
        <member name="T:YAMP.Value">
            <summary>
            Abstract base value for any value type.
            </summary>
        </member>
        <member name="F:YAMP.Value.EmptyTypes">
            <summary>
            A little helper for reflection (same as Type.Empty in the full .NET stack).
            </summary>
        </member>
        <member name="M:YAMP.Value.CastStringToDouble(System.String)">
            <summary>
            This represents a save cast from a string to a double.
            </summary>
            <param name="value">The string value.</param>
            <returns>The double value (or NaN if it could not been casted).</returns>
        </member>
        <member name="M:YAMP.Value.GetExponent(System.Double)">
            <summary>
            Gets the exponent (10^n) of a double value.
            </summary>
            <param name="value">The value to get the exponent from.</param>
            <returns>The exponent n (10^n) of the double value.</returns>
        </member>
        <member name="M:YAMP.Value.BuildIndex(YAMP.Value,System.Int32)">
            <summary>
            Builds the index from the given value.
            </summary>
            <param name="arg">The argument to inspect.</param>
            <param name="max">The maximum number of arguments.</param>
            <returns></returns>
        </member>
        <member name="M:YAMP.Value.RegisterElement">
            <summary>
            Registers the element at a certain point.
            </summary>
        </member>
        <member name="M:YAMP.Value.RegisterOperators">
            <summary>
            Registers the operators (if there are any).
            </summary>
        </member>
        <member name="M:YAMP.Value.Copy">
            <summary>
            Creates a copy of the given object using reflection.
            Override for using a more specialized version.
            </summary>
            <returns>The copy or original in case of a failed copy.</returns>
        </member>
        <member name="M:YAMP.Value.Serialize">
            <summary>
            Converts the instance to bytes.
            </summary>
            <returns>The binary content.</returns>
        </member>
        <member name="M:YAMP.Value.Deserialize(System.Byte[])">
            <summary>
            Creates a new instance from bytes.
            </summary>
            <param name="content">The binary content.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.Value.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:YAMP.Value.ToString(YAMP.ParseContext)">
            <summary>
            Returns a string representation of the value.
            </summary>
            <param name="context">The calling context.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:YAMP.Value.Format(YAMP.ParseContext,System.Double)">
            <summary>
            Formats a given double value with the rules of the context.
            </summary>
            <param name="context">The context with the rules.</param>
            <param name="value">The double precision value.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:YAMP.Value.RegisterPlus(System.Type,System.Type,System.Func{YAMP.Value,YAMP.Value,YAMP.Value})">
            <summary>
            Helper for registering a plus operator.
            </summary>
            <param name="left">The type on the left side.</param>
            <param name="right">The type on the right side.</param>
            <param name="add">The function to execute.</param>
        </member>
        <member name="M:YAMP.Value.RegisterMultiply(System.Type,System.Type,System.Func{YAMP.Value,YAMP.Value,YAMP.Value})">
            <summary>
            Helper for registering a multiplication operator.
            </summary>
            <param name="left">The type on the left side.</param>
            <param name="right">The type on the right side.</param>
            <param name="multiply">The function to execute.</param>
        </member>
        <member name="M:YAMP.Value.RegisterDivide(System.Type,System.Type,System.Func{YAMP.Value,YAMP.Value,YAMP.Value})">
            <summary>
            Helper for registering a division operator.
            </summary>
            <param name="left">The type on the left side.</param>
            <param name="right">The type on the right side.</param>
            <param name="divide">The function to execute.</param>
        </member>
        <member name="M:YAMP.Value.RegisterMinus(System.Type,System.Type,System.Func{YAMP.Value,YAMP.Value,YAMP.Value})">
            <summary>
            Helper for registering a minus operator.
            </summary>
            <param name="left">The type on the left side.</param>
            <param name="right">The type on the right side.</param>
            <param name="sub">The function to execute.</param>
        </member>
        <member name="M:YAMP.Value.RegisterPower(System.Type,System.Type,System.Func{YAMP.Value,YAMP.Value,YAMP.Value})">
            <summary>
            Helper for registering a power operator.
            </summary>
            <param name="left">The type on the left side.</param>
            <param name="right">The type on the right side.</param>
            <param name="power">The function to execute.</param>
        </member>
        <member name="M:YAMP.Value.RegisterModulo(System.Type,System.Type,System.Func{YAMP.Value,YAMP.Value,YAMP.Value})">
            <summary>
            Helper for registering a modulo operator.
            </summary>
            <param name="left">The type on the left side.</param>
            <param name="right">The type on the right side.</param>
            <param name="mod">The function to execute.</param>
        </member>
        <member name="P:YAMP.Value.Empty">
            <summary>
            Gets the empty value (a simple scalar).
            </summary>
        </member>
        <member name="P:YAMP.Value.Header">
            <summary>
            Gets the name of the type (just removes the Value convention).
            </summary>
        </member>
        <member name="M:YAMP.PlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.PlotValue.Copy">
            <summary>
            Passes a reference (not a copy!) to the current object.
            </summary>
            <returns>The reference to the current object.</returns>
        </member>
        <member name="M:YAMP.PlotValue.RaisePlotChanged(System.String)">
            <summary>
            Invokes the OnPlotChanged event if it has been set.
            </summary>
            <param name="property">The property name to take as argument.</param>
        </member>
        <member name="M:YAMP.PlotValue.Update">
            <summary>
            Updates the data region, i.e. the complete plot.
            </summary>
        </member>
        <member name="M:YAMP.PlotValue.UpdateProperties">
            <summary>
            Updates the properties of the plot series.
            </summary>
        </member>
        <member name="M:YAMP.PlotValue.UpdateLayout">
            <summary>
            Updates the layout of the plot, i.e. the properties of the plot itself.
            </summary>
        </member>
        <member name="M:YAMP.PlotValue.MakeArrayPeriodic(System.Double[],System.Int32)">
            <summary>
            Increases the size of an array to n elements, repeating the containing elements.
            </summary>
            <param name="values">The current array.</param>
            <param name="n">The desired size of the array.</param>
        </member>
        <member name="M:YAMP.PlotValue.Generate(System.Double,System.Double,System.Int32)">
            <summary>
            Generates an array of double values.
            </summary>
            <param name="minValue">The first value in the array.</param>
            <param name="step">The difference between each element.</param>
            <param name="count">The number of elements in the array.</param>
            <returns>The double array containing the values.</returns>
        </member>
        <member name="M:YAMP.PlotValue.Convert(YAMP.MatrixValue,System.Int32,System.Int32)">
            <summary>
            Converts a given matrixvalue (seen as a vector) into a double array.
            </summary>
            <param name="m">The MatrixValue to convert.</param>
            <param name="offset">The offset in the matrix (0 = start with 1st element).</param>
            <param name="length">The number of elements to convert.</param>
            <returns>The double array with the values.</returns>
        </member>
        <member name="M:YAMP.PlotValue.ConvertX(YAMP.MatrixValue,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts only column values of the matrix into a double array.
            </summary>
            <param name="m">The MatrixValue to convert.</param>
            <param name="dx">The offset in columns.</param>
            <param name="length">The number of rows to consider.</param>
            <param name="dy">The offset in rows.</param>
            <returns>The double array with the values.</returns>
        </member>
        <member name="M:YAMP.PlotValue.ConvertY(YAMP.MatrixValue,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts only row values of the matrix into a double array.
            </summary>
            <param name="m">The MatrixValue to convert.</param>
            <param name="dy">The offset in rows.</param>
            <param name="length">The number of columns to consider.</param>
            <param name="dx">The offset in columns.</param>
            <returns>The double array with the values.</returns>
        </member>
        <member name="E:YAMP.PlotValue.OnPlotChanged">
            <summary>
            The event that is invoked once the plot data has been changed.
            </summary>
        </member>
        <member name="P:YAMP.PlotValue.Count">
            <summary>
            Gets the number of series.
            </summary>
        </member>
        <member name="P:YAMP.PlotValue.Title">
            <summary>
            Gets or sets the plot title.
            </summary>
        </member>
        <member name="P:YAMP.PlotValue.StandardColors">
            <summary>
            Gets a list of standardcolors (those are just some suggestions, a lot
            more colors are possible).
            </summary>
        </member>
        <member name="F:YAMP.XYPlotValue.points">
            <summary>
            The various included series.
            </summary>
        </member>
        <member name="F:YAMP.XYPlotValue.annotations">
            <summary>
            The contained annotations.
            </summary>
        </member>
        <member name="M:YAMP.XYPlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.XYPlotValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Adds points to the plot.
            </summary>
            <param name="m">The given matrix.</param>
        </member>
        <member name="M:YAMP.XYPlotValue.InitializeBoundaries">
            <summary>
            Initializes the values MinX, MaxX, MinY and MaxY.
            </summary>
        </member>
        <member name="M:YAMP.XYPlotValue.SetXRange(System.Double,System.Double)">
            <summary>
            Sets the x-range (min and max) in one statement.
            </summary>
            <param name="min">The minimum for the x-axis.</param>
            <param name="max">The maximum for the x-axis.</param>
        </member>
        <member name="M:YAMP.XYPlotValue.SetYRange(System.Double,System.Double)">
            <summary>
            Sets the y-range (min and max) in one statement.
            </summary>
            <param name="min">The minimum for the y-axis.</param>
            <param name="max">The maximum for the y-axis.</param>
        </member>
        <member name="M:YAMP.XYPlotValue.AddSeries(YAMP.IPointSeries,System.Boolean,System.Boolean)">
            <summary>
            Adds a new series to the plot. This function automatically
            selects a new color for the series, such that no color
            should be taken twice.
            </summary>
            <param name="series">The series to add.</param>
            <param name="nameSeries">Should the series be named?</param>
            <param name="colorSeries">Should the series be colored automatically?</param>
        </member>
        <member name="M:YAMP.XYPlotValue.GetSeries(System.Int32)">
            <summary>
            Gets the specified series as an IPointSeries.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <returns>The series at the given index.</returns>
        </member>
        <member name="P:YAMP.XYPlotValue.Count">
            <summary>
            Gets the number of contained series.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.Gridlines">
            <summary>
            Gets or sets if (major) gridlines should be shown.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.MinorGridlines">
            <summary>
            Gets or sets if minor gridlines should be shown.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.XLabel">
            <summary>
            Gets or sets the label of the x-axis.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.YLabel">
            <summary>
            Gets or sets the label of the y-axis.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.MinX">
            <summary>
            Gets or sets the minimum x coordinate.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.MaxX">
            <summary>
            Gets or sets the maximum x coordinate.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.XRange">
            <summary>
            Gets or sets the pair of minimum and maximum x coordinates.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.MinY">
            <summary>
            Gets or sets the minimum y coordinate.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.MaxY">
            <summary>
            Gets or sets the maximum y coordinate.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.YRange">
            <summary>
            Gets or sets the pair of minimum and maximum y coordinates.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.ShowLegend">
            <summary>
            Gets or sets if the legend should be shown.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.LegendPosition">
            <summary>
            Gets or sets the position of the legend.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.LegendBackground">
            <summary>
            Gets or sets the color of the legend.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.LegendLineColor">
            <summary>
            Gets or sets the legend line color.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.LegendLineWidth">
            <summary>
            Gets or sets the line width of the legend box.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.View">
            <summary>
            Gets or sets the pairs of minimum and maximum x, y coordinates.
            </summary>
        </member>
        <member name="P:YAMP.XYPlotValue.Annotations">
            <summary>
            Gets each of the contained annotations.
            </summary>
        </member>
        <member name="M:YAMP.HeatmapPlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.HeatmapPlotValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Inspects the given matrix and sets the series to this matrix M.
            </summary>
            <param name="M">The matrix to investigate.</param>
        </member>
        <member name="M:YAMP.HeatmapPlotValue.Serialize">
            <summary>
            Converts the given instance to an array of bytes.
            </summary>
            <returns>The binary representation of this instance.</returns>
        </member>
        <member name="M:YAMP.HeatmapPlotValue.Deserialize(System.Byte[])">
            <summary>
            Converts a set of bytes to a new instance.
            </summary>
            <param name="content">The binary representation.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.HeatmapPlotValue.IsInterpolated">
            <summary>
            Gets or sets if the output image should be interpolated.
            </summary>
        </member>
        <member name="P:YAMP.HeatmapPlotValue.ColorPalette">
            <summary>
            Gets or sets the color palette to use.
            </summary>
        </member>
        <member name="P:YAMP.HeatmapPlotValue.Minimum">
            <summary>
            Gets the minimum (absolute) value of the matrix.
            </summary>
        </member>
        <member name="P:YAMP.HeatmapPlotValue.Maximum">
            <summary>
            Gets the maximum (absolute) value of the matrix.
            </summary>
        </member>
        <member name="P:YAMP.HeatmapPlotValue.Item(System.Int32)">
            <summary>
            Gets a series of HeatPoints (here we have only 1 series).
            </summary>
            <param name="index">Obsolete (always returns the same).</param>
            <returns>The series with the points.</returns>
        </member>
        <member name="P:YAMP.HeatmapPlotValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets one particular point of a heatmap series (we only have 1 heatmap series!).
            </summary>
            <param name="index">Obsolete since we only have 1 series.</param>
            <param name="point">The point to get (0.. N - 1, where N is the number of points).</param>
            <returns>The specified heatmap value.</returns>
        </member>
        <member name="T:YAMP.HeatmapPlotValue.HeatPoint">
            <summary>
            Represents one point in the heatmap.
            </summary>
        </member>
        <member name="F:YAMP.HeatmapPlotValue.HeatPoint.Column">
            <summary>
            Gets the column index.
            </summary>
        </member>
        <member name="F:YAMP.HeatmapPlotValue.HeatPoint.Row">
            <summary>
            Gets the row index.
            </summary>
        </member>
        <member name="F:YAMP.HeatmapPlotValue.HeatPoint.Magnitude">
            <summary>
            Gets the magnitude (0..1) of this entry.
            </summary>
        </member>
        <member name="T:YAMP.SurfacePlotValue">
            <summary>
            Contains the data for surface and mesh plots.
            </summary>
        </member>
        <member name="T:YAMP.XYZPlotValue">
            <summary>
            Abstract base class for plot values that are based on an XYZ
            (or similar) coordinate system.
            </summary>
        </member>
        <member name="M:YAMP.XYZPlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.XYZPlotValue.InitializeBoundaries">
            <summary>
            Initializes the values MinX, MaxX, MinY, MaxY, MinZ and MaxZ.
            </summary>
        </member>
        <member name="M:YAMP.XYZPlotValue.SetZRange(System.Double,System.Double)">
            <summary>
            Sets the z-range (min and max) in one statement.
            </summary>
            <param name="min">The minimum for the z-axis.</param>
            <param name="max">The maximum for the z-axis.</param>
        </member>
        <member name="P:YAMP.XYZPlotValue.View">
            <summary>
            Gets or sets the pairs of minimum and maximum x, y coordinates.
            </summary>
        </member>
        <member name="P:YAMP.XYZPlotValue.ZLabel">
            <summary>
            Gets or sets the label of the z axis.
            </summary>
        </member>
        <member name="P:YAMP.XYZPlotValue.MinZ">
            <summary>
            Gets or sets the minimum z coordinate.
            </summary>
        </member>
        <member name="P:YAMP.XYZPlotValue.MaxZ">
            <summary>
            Gets or sets the maximum z coordinate.
            </summary>
        </member>
        <member name="P:YAMP.XYZPlotValue.ZRange">
            <summary>
            Gets or sets the pair of minimum and maximum z coordinates.
            </summary>
        </member>
        <member name="M:YAMP.SurfacePlotValue.#ctor">
            <summary>
            Creates a new SurfacePlot.
            </summary>
        </member>
        <member name="M:YAMP.SurfacePlotValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Sets the z values given in the matrix m with the corresponding x and y values.
            </summary>
            <param name="x">The matrix with the x values.</param>
            <param name="y">The matrix with the y values.</param>
            <param name="z">The matrix with the function values / z values.</param>
        </member>
        <member name="M:YAMP.SurfacePlotValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Sets the function values given in the matrix m with generated values for x and y.
            </summary>
            <param name="m">The values for the plot.</param>
        </member>
        <member name="M:YAMP.SurfacePlotValue.Serialize">
            <summary>
            Converts the given instance to an array of bytes.
            </summary>
            <returns>The binary representation of this instance.</returns>
        </member>
        <member name="M:YAMP.SurfacePlotValue.Deserialize(System.Byte[])">
            <summary>
            Converts a set of bytes to a new instance.
            </summary>
            <param name="content">The binary representation.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.SurfacePlotValue.ColorPalette">
            <summary>
            Gets or sets the color palette to use.
            </summary>
        </member>
        <member name="P:YAMP.SurfacePlotValue.Color">
            <summary>
            Gets or sets the color of the mesh.
            </summary>
        </member>
        <member name="P:YAMP.SurfacePlotValue.IsMesh">
            <summary>
            Gets or sets if it should display the mesh.
            </summary>
        </member>
        <member name="P:YAMP.SurfacePlotValue.MeshThickness">
            <summary>
            Gets or sets the thickness of the mesh.
            </summary>
        </member>
        <member name="P:YAMP.SurfacePlotValue.IsSurf">
            <summary>
            Gets or sets if it should display the surface.
            </summary>
        </member>
        <member name="P:YAMP.SurfacePlotValue.Count">
            <summary>
            Gets the number of points in the surface plot.
            </summary>
        </member>
        <member name="P:YAMP.SurfacePlotValue.Nx">
            <summary>
            Gets the number of horizontal points.
            </summary>
        </member>
        <member name="P:YAMP.SurfacePlotValue.Ny">
            <summary>
            Gets the number of vertical points.
            </summary>
        </member>
        <member name="P:YAMP.SurfacePlotValue.Item(System.Int32)">
            <summary>
            Gets one particular series of the surface plot (we only have 1 surface plot series!).
            </summary>
            <param name="index">Obsolete - all the same.</param>
            <returns>The series of points.</returns>
        </member>
        <member name="P:YAMP.SurfacePlotValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets one particular point of the surface plot.
            </summary>
            <param name="index">Obsolete - all the same.</param>
            <param name="point">The vertex to get (0.. N - 1, where N is the number of points).</param>
            <returns>The specified vertex value.</returns>
        </member>
        <member name="T:YAMP.SurfacePlotValue.Vertex">
            <summary>
            Represents one point in the surface plot.
            </summary>
        </member>
        <member name="F:YAMP.SurfacePlotValue.Vertex.X">
            <summary>
            Gets the x value.
            </summary>
        </member>
        <member name="F:YAMP.SurfacePlotValue.Vertex.Y">
            <summary>
            Gets the y value.
            </summary>
        </member>
        <member name="F:YAMP.SurfacePlotValue.Vertex.Z">
            <summary>
            Gets the z value.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.Zeta">
            <summary>
            Provides access to the useful Riemann-Zeta function.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Zeta.RiemannZeta(YAMP.ScalarValue)">
            <summary>
            Computes the complex Riemann Zeta function.
            </summary>
            <param name="s">The complex argument.</param>
            <returns>The (in general complex) value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Zeta.RiemannZeta(System.Double)">
            <summary>
            Computes the real Riemann Zeta function.
            </summary>
            <param name="s">The real argument</param>
            <returns>The real value.</returns>
        </member>
        <member name="T:YAMP.InvOperator">
            <summary>
            Inverts the given scalar. This operator is a unary operator, but is
            used as a binary one with a pseudo expression on the left side.
            </summary>
        </member>
        <member name="T:YAMP.Statement">
            <summary>
            The class represents a (usually) line of statement or another
            self-contained block of expressions and operators.
            </summary>
        </member>
        <member name="M:YAMP.Statement.#ctor">
            <summary>
            Creates a new statement.
            </summary>
        </member>
        <member name="M:YAMP.Statement.IsKeyword``1">
            <summary>
            Checks if the statement is a special kind of keyword.
            </summary>
            <typeparam name="T">The keyword to search for.</typeparam>
            <returns>A boolean to indicate the search result.</returns>
        </member>
        <member name="M:YAMP.Statement.GetKeyword``1">
            <summary>
            Gets the specified keyword statement.
            </summary>
            <typeparam name="T">The type of keyword to retrieve.</typeparam>
            <returns>The keyword instance.</returns>
        </member>
        <member name="M:YAMP.Statement.Push(YAMP.ParseEngine,YAMP.Operator)">
            <summary>
            Pushes an operator to the stack.
            </summary>
            <param name="engine">The current parse engine.</param>
            <param name="_operator">The operator to add.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Statement.Push(YAMP.ParseEngine,YAMP.Expression)">
            <summary>
            Pushes an expression to the stack.
            </summary>
            <param name="engine">The current parse engine.</param>
            <param name="_expression">The expression to add.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Statement.Finalize(YAMP.ParseEngine)">
            <summary>
            Finalizes the statement by analyzing the contained objects and creating
            the container.
            </summary>
            <param name="engine">The current parse engine.</param>
            <returns>The current (finalized) instance.</returns>
        </member>
        <member name="M:YAMP.Statement.Interpret(System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Interprets the statement.
            </summary>
            <param name="symbols">Additional symbols to consider.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:YAMP.Statement.ToString">
            <summary>
            Returns the string representation of the included objects.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:YAMP.Statement.ToCode">
            <summary>
            Transforms the statement into executable code.
            </summary>
            <returns>The code of the statement as a string.</returns>
        </member>
        <member name="P:YAMP.Statement.Container">
            <summary>
            Gets the expression (and operator) container.
            </summary>
        </member>
        <member name="P:YAMP.Statement.IsMuted">
            <summary>
            Gets a boolean if the statement was actually muted (terminated with a colon ;).
            </summary>
        </member>
        <member name="P:YAMP.Statement.IsFinished">
            <summary>
            Gets a value indicating if the statement consists of one keyword.
            </summary>
        </member>
        <member name="P:YAMP.Statement.IsEmpty">
            <summary>
            Gets a value indicating if the statement is empty.
            </summary>
        </member>
        <member name="P:YAMP.Statement.IsOperator">
            <summary>
            Gets a value marking if its the turn of an operator (or not).
            </summary>
        </member>
        <member name="P:YAMP.Statement.IsAssignment">
            <summary>
            Gets a value indicating if the statement will be assigned to a value.
            </summary>
        </member>
        <member name="T:YAMP.AlphaConstant">
            <summary>
            Gets the value of alpha.
            </summary>
        </member>
        <member name="T:YAMP.BaseConstant">
            <summary>
            This class gives an abstract base class for your own implementations
            of classes that represent constants.
            </summary>
        </member>
        <member name="T:YAMP.IConstants">
            <summary>
            Marks a class to hold a certain constant defined by the two properties.
            </summary>
        </member>
        <member name="P:YAMP.IConstants.Name">
            <summary>
            The name of the constant.
            </summary>
        </member>
        <member name="P:YAMP.IConstants.Value">
            <summary>
            The value of the constant.
            </summary>
        </member>
        <member name="M:YAMP.BaseConstant.#ctor">
            <summary>
            Creates a new instance with the name given by convention.
            </summary>
        </member>
        <member name="M:YAMP.BaseConstant.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">The name for the constant.</param>
        </member>
        <member name="P:YAMP.BaseConstant.Name">
            <summary>
            Gets the name of the constant (by convention).
            Convention: The name of the class without the word "Constant".
            </summary>
        </member>
        <member name="P:YAMP.BaseConstant.Value">
            <summary>
            Gets the value of the constant.
            </summary>
        </member>
        <member name="T:YAMP.BernoulliConstant">
            <summary>
            Gets the first values of the bernoulli series.
            </summary>
        </member>
        <member name="T:YAMP.CatalanConstant">
            <summary>
            Gets Catalan's constant.
            </summary>
        </member>
        <member name="T:YAMP.ContainerConstant">
            <summary>
            A container constant is a wrapper for custom constants
            that are added to the engine just by a double with a name.
            </summary>
        </member>
        <member name="T:YAMP.DegConstant">
            <summary>
            Gets the value of one degree.
            </summary>
        </member>
        <member name="T:YAMP.DeltaConstant">
            <summary>
            Gets the value of delta.
            </summary>
        </member>
        <member name="T:YAMP.EConstant">
            <summary>
            Gets the value of euler's number.
            </summary>
        </member>
        <member name="T:YAMP.FalseConstant">
            <summary>
            Gets the value for false.
            </summary>
        </member>
        <member name="T:YAMP.Gamma1Constant">
            <summary>
            Gets the value of gamma(1).
            </summary>
        </member>
        <member name="T:YAMP.GaussConstant">
            <summary>
            Gets the value of gauss's constant.
            </summary>
        </member>
        <member name="T:YAMP.IConstant">
            <summary>
            Gets the value of the imaginary constant.
            </summary>
        </member>
        <member name="T:YAMP.OmegaConstant">
            <summary>
            Gets the omega constant.
            </summary>
        </member>
        <member name="T:YAMP.PhiConstant">
            <summary>
            Gets the value of the golden ratio.
            </summary>
        </member>
        <member name="T:YAMP.PiConstant">
            <summary>
            Gets the value of Pi.
            </summary>
        </member>
        <member name="T:YAMP.TrueConstant">
            <summary>
            Gets the value for true.
            </summary>
        </member>
        <member name="T:YAMP.YAMPArgumentValueException">
            <summary>
            Class to use when the value of an argument was not expected (i.e. some specific string or numeric value).
            </summary>
        </member>
        <member name="M:YAMP.YAMPArgumentValueException.#ctor(System.String,System.String[])">
            <summary>
            Creates a new argument value exception.
            </summary>
            <param name="given">The given value.</param>
            <param name="possibilities">The possible values.</param>
        </member>
        <member name="T:YAMP.YAMPNotConvergedException">
            <summary>
            Class to use for numeric non-convergence exceptions.
            </summary>
        </member>
        <member name="M:YAMP.YAMPNotConvergedException.#ctor(System.String)">
            <summary>
            Creates a new not converged exception.
            </summary>
            <param name="function">The function where the problem occured.</param>
        </member>
        <member name="T:YAMP.YAMPParseException">
            <summary>
            Represents the exception that will be thrown if parse errors occured.
            </summary>
        </member>
        <member name="M:YAMP.YAMPParseException.#ctor(YAMP.ParseEngine)">
            <summary>
            Creates a new YAMP Parse Exception.
            </summary>
            <param name="engine">The engine where this happend.</param>
        </member>
        <member name="M:YAMP.YAMPParseException.ToString">
            <summary>
            Returns a string representation of the errors.
            </summary>
            <returns>The string with the errors.</returns>
        </member>
        <member name="P:YAMP.YAMPParseException.Errors">
            <summary>
            Returns an enumerable of errors.
            </summary>
        </member>
        <member name="T:YAMP.BracketExpression">
            <summary>
            The bracket expression (...).
            </summary>
        </member>
        <member name="T:YAMP.TreeExpression">
            <summary>
            This is the abstract base class for expressions that contain other
            expressions (and operators), i.e. for containing a container expressions.
            </summary>
        </member>
        <member name="T:YAMP.ContainerExpression">
            <summary>
            Represents a container for expressions and corresponding operators.
            </summary>
        </member>
        <member name="M:YAMP.ContainerExpression.#ctor">
            <summary>
            Creates a new expression container.
            </summary>
        </member>
        <member name="M:YAMP.ContainerExpression.#ctor(YAMP.Expression)">
            <summary>
            Creates a new expression container.
            </summary>
            <param name="expression">The (1) expression to contain.</param>
        </member>
        <member name="M:YAMP.ContainerExpression.#ctor(YAMP.Expression,YAMP.Operator)">
            <summary>
            Creates a new expression container.
            </summary>
            <param name="expression">The (1) expression to contain.</param>
            <param name="operator">The assigned operator for the expression.</param>
        </member>
        <member name="M:YAMP.ContainerExpression.#ctor(YAMP.Expression,YAMP.Expression,YAMP.Operator)">
            <summary>
            Creates a new expression container.
            </summary>
            <param name="leftExpression">The left expression to evaluate.</param>
            <param name="rightExpression">The right expression to evaluate.</param>
            <param name="operator">The operator that connects the expressions.</param>
        </member>
        <member name="M:YAMP.ContainerExpression.#ctor(YAMP.Expression[],YAMP.Operator)">
            <summary>
            Creates a new expression container.
            </summary>
            <param name="expressions">The expressions to evaluate.</param>
            <param name="operator">The operator that connects the expressions.</param>
        </member>
        <member name="M:YAMP.ContainerExpression.#ctor(YAMP.ContainerExpression)">
            <summary>
            Creates a new expression container.
            </summary>
            <param name="container">The container which contains expressions and an operator.</param>
        </member>
        <member name="M:YAMP.ContainerExpression.RegisterElement">
            <summary>
            Registers the element in the beginning.
            </summary>
        </member>
        <member name="M:YAMP.ContainerExpression.Interpret(System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Interprets the container expression.
            </summary>
            <param name="symbols">External symbols to be used.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.ContainerExpression.Scan(YAMP.ParseEngine)">
            <summary>
            Scans the input of the current parse engine.
            </summary>
            <param name="engine">The engine to use.</param>
            <returns>Null, since container expressions cannot be scanned.</returns>
        </member>
        <member name="M:YAMP.ContainerExpression.GetSymbols">
            <summary>
            Gets all the symbols of the container.
            </summary>
            <returns>An array of symbolic expressions.</returns>
        </member>
        <member name="M:YAMP.ContainerExpression.ToString">
            <summary>
            Transforms the content into a string.
            </summary>
            <returns>The representative.</returns>
        </member>
        <member name="M:YAMP.ContainerExpression.ToCode">
            <summary>
            Transforms the contained expressions and operators into a valid part of a YAMP query.
            </summary>
            <returns>The code.</returns>
        </member>
        <member name="P:YAMP.ContainerExpression.HasContent">
            <summary>
            Gets a value if the interpreter has any content (can do interpretation).
            </summary>
        </member>
        <member name="P:YAMP.ContainerExpression.Operator">
            <summary>
            Gets the operator used for this parse tree (can be null).
            </summary>
        </member>
        <member name="P:YAMP.ContainerExpression.Expressions">
            <summary>
            Gets the array with all found expressions in the parse tree.
            </summary>
        </member>
        <member name="P:YAMP.ContainerExpression.IsAssignment">
            <summary>
            Gets a value if the container holds an assignment.
            </summary>
        </member>
        <member name="P:YAMP.ContainerExpression.IsSymbolList">
            <summary>
            Gets a value indicating if the parse tree consists only of symbols that 
            are seperated by columns (commas).
            </summary>
        </member>
        <member name="M:YAMP.TreeExpression.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:YAMP.TreeExpression.#ctor(YAMP.ContainerExpression,YAMP.QueryContext,System.Int32,System.Int32)">
            <summary>
            Creates a new instance with some parameters.
            </summary>
            <param name="child">The child to add.</param>
            <param name="query">The associated query context.</param>
            <param name="line">The line where the tree expression starts.</param>
            <param name="column">The column in the line where the tree exp. starts.</param>
        </member>
        <member name="M:YAMP.TreeExpression.#ctor(YAMP.ContainerExpression,YAMP.ParseEngine)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="child">The child to add.</param>
            <param name="engine">The engine that has been used.</param>
        </member>
        <member name="M:YAMP.TreeExpression.RegisterElement">
            <summary>
            Registers the element.
            </summary>
        </member>
        <member name="T:YAMP.EmptyExpression">
            <summary>
            The empty expression - just a dummy!
            </summary>
        </member>
        <member name="T:YAMP.MatrixExpression">
            <summary>
            The matrix [ ... ] expression.
            </summary>
        </member>
        <member name="M:YAMP.MatrixExpression.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.MatrixExpression.#ctor(System.Int32,System.Int32,System.Int32,YAMP.QueryContext,YAMP.ContainerExpression)">
            <summary>
            Creates a new instance with some parameters.
            </summary>
            <param name="line">The line where the matrix expression starts.</param>
            <param name="column">The column in the line where the matrix exp. starts.</param>
            <param name="length">The length of the matrix expression.</param>
            <param name="query">The associated query context.</param>
            <param name="child">The child containing the column and rows.</param>
        </member>
        <member name="M:YAMP.MatrixExpression.Interpret(System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Begins interpreting the matrix expression.
            </summary>
            <param name="symbols">External symbols to load.</param>
            <returns>The evaluated matrix value.</returns>
        </member>
        <member name="M:YAMP.MatrixExpression.Scan(YAMP.ParseEngine)">
            <summary>
            Scans the current parse engine for a matrix expression.
            </summary>
            <param name="engine">The parse engine to use.</param>
            <returns>The found expression or NULL.</returns>
        </member>
        <member name="M:YAMP.MatrixExpression.ToCode">
            <summary>
            Transforms the expression into YAMP query code.
            </summary>
            <returns>The string representation of the part of the query.</returns>
        </member>
        <member name="T:YAMP.GroupExpression">
            <summary>
            This class represents a group of statements.
            </summary>
        </member>
        <member name="M:YAMP.GroupExpression.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.GroupExpression.#ctor(System.Int32,System.Int32,System.Int32,YAMP.QueryContext)">
            <summary>
            Creates a new instance with some parameters.
            </summary>
            <param name="line">The line where the scope expression starts.</param>
            <param name="column">The column in the line where the scope exp. starts.</param>
            <param name="length">The length of the scope expression.</param>
            <param name="scope">The associated query context (scope).</param>
        </member>
        <member name="M:YAMP.GroupExpression.ToCode">
            <summary>
            Transforms the expression into YAMP query code.
            </summary>
            <returns>The string representation of the part of the query.</returns>
        </member>
        <member name="T:YAMP.ContainerFunction">
            <summary>
            This class is used as a wrapper for functions just defined by passing
            a delegate.
            </summary>
        </member>
        <member name="M:YAMP.SetFunction.AlterProperty(System.Object,System.String,YAMP.Value)">
            <summary>
            Changes a given property to a certain value using the available value converter.
            </summary>
            <param name="parent">The object that should contain the property.</param>
            <param name="name">The name of the property (property needs to have a converter specified).</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:YAMP.SetFunction.AlterSeriesProperty(System.Object,System.Int32,System.String,YAMP.Value)">
            <summary>
            Changes a given property to a certain value using the available value converter.
            </summary>
            <param name="series">The series (0..(n-1)) that should be changed.</param>
            <param name="parent">The object that should contain the property.</param>
            <param name="property">The name of the property (property needs to have a converter specified).</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="T:YAMP.Help.Documentation">
            <summary>
            Represents the documention in as an object.
            </summary>
        </member>
        <member name="M:YAMP.Help.Documentation.Create(YAMP.ParseContext)">
            <summary>
            Creates a new documention instance from the given context.
            </summary>
            <param name="context">The context to use.</param>
            <returns>The documention.</returns>
        </member>
        <member name="M:YAMP.Help.Documentation.Overview(YAMP.ParseContext)">
            <summary>
            Gives an overview over the included functions and constants within the context.
            </summary>
            <param name="context">The context to investigate.</param>
            <returns>The list with help topics.</returns>
        </member>
        <member name="M:YAMP.Help.Documentation.ContainsTopic(System.String)">
            <summary>
            Looks if a certain topic is contained within the documention.
            </summary>
            <param name="topic">The topic to look for.</param>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:YAMP.Help.Documentation.ContainsEntry(System.String)">
            <summary>
            Looks if a certain entry is contained within the documention.
            </summary>
            <param name="entry">The entry's name to look for.</param>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:YAMP.Help.Documentation.ClosestEntry(System.String)">
            <summary>
            Finds the closest entry to the given entry.
            </summary>
            <param name="entry">The (probably) mispelled entry's name.</param>
            <returns>The name of a correct entry that seems to be fairly close.</returns>
        </member>
        <member name="M:YAMP.Help.Documentation.Get(System.String)">
            <summary>
            Gets the HelpSection that belongs to the name of the given entry.
            </summary>
            <param name="entry">The name of the entry to retrieve.</param>
            <returns>The HelpSection instance.</returns>
        </member>
        <member name="P:YAMP.Help.Documentation.Sections">
            <summary>
            Gets the access to an enumerable of all the HelpSections within the documention.
            </summary>
        </member>
        <member name="P:YAMP.Help.Documentation.Topics">
            <summary>
            Gets the access to an enumerable of all HelpTopics within the documention.
            </summary>
        </member>
        <member name="T:YAMP.Help.HelpEntry">
            <summary>
            Represents an entry in the documentation.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpEntry.Name">
            <summary>
            Gets or sets the name of the function.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpEntry.Instance">
            <summary>
            Gets or sets an instance of the corresponding function.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpEntry.Topic">
            <summary>
            Gets or sets the associated help topic.
            </summary>
        </member>
        <member name="T:YAMP.Help.HelpExample">
            <summary>
            This is an example entry of a function help entry.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpExample.Example">
            <summary>
            Gets or sets the specified example.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpExample.Description">
            <summary>
            Gets or sets the given description of the example.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpExample.IsFile">
            <summary>
            Gets or sets if the example accesses the file system.
            </summary>
        </member>
        <member name="T:YAMP.Help.HelpFunctionSection">
            <summary>
            This is the extended version of the help section class (entry of an
            object) - specialized for functions.
            </summary>
        </member>
        <member name="T:YAMP.Help.HelpSection">
            <summary>
            This is the entry for one object in the documentation.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpSection.Name">
            <summary>
            Gets or sets the name of the entry.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpSection.Topic">
            <summary>
            Gets or sets the name of the topic for this entry.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpSection.Description">
            <summary>
            Gets or sets the description of this entry.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpSection.Link">
            <summary>
            Gets or sets the hyperlink associated with this entry.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpSection.HasLink">
            <summary>
            Gets the status if the entry has a webpage associated.
            </summary>
        </member>
        <member name="M:YAMP.Help.HelpFunctionSection.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpFunctionSection.Usages">
            <summary>
            Gets the available usages of the function.
            </summary>
        </member>
        <member name="T:YAMP.Help.HelpFunctionUsage">
            <summary>
            Represents one usage of the described function.
            </summary>
        </member>
        <member name="M:YAMP.Help.HelpFunctionUsage.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpFunctionUsage.Usage">
            <summary>
            Gets or sets the usage.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpFunctionUsage.Description">
            <summary>
            Gets or sets a description about the usage.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpFunctionUsage.ArgumentNames">
            <summary>
            Gets a list of names for the given arguments of this function usage.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpFunctionUsage.Arguments">
            <summary>
            Gets a list of arguments for this function usage.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpFunctionUsage.Returns">
            <summary>
            Gets a list of available return values of this function usage.
            </summary>
        </member>
        <member name="P:YAMP.Help.HelpFunctionUsage.Examples">
            <summary>
            Gets a list of examples corresponding to this function usage.
            </summary>
        </member>
        <member name="T:YAMP.Help.HelpTopic">
            <summary>
            This is the help topic, i.e. the list with help entries for a certain kind of
            function.
            </summary>
        </member>
        <member name="M:YAMP.Help.HelpTopic.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="kind">The kind of topic.</param>
        </member>
        <member name="P:YAMP.Help.HelpTopic.Kind">
            <summary>
            Gets the kind represented by this topic.
            </summary>
        </member>
        <member name="T:YAMP.IPointSeries">
            <summary>
            This is the basic contract for any point series.
            </summary>
        </member>
        <member name="P:YAMP.IPointSeries.Lines">
            <summary>
            Gets or sets if lines should be shown.
            </summary>
        </member>
        <member name="P:YAMP.IPointSeries.LineWidth">
            <summary>
            Gets or sets the width of the lines (if shown).
            </summary>
        </member>
        <member name="P:YAMP.IPointSeries.Symbol">
            <summary>
            Gets or sets the symbol to use.
            </summary>
        </member>
        <member name="P:YAMP.IPointSeries.ShowLabel">
            <summary>
            Gets or sets if the label should be shown.
            </summary>
        </member>
        <member name="P:YAMP.IPointSeries.Color">
            <summary>
            Gets or sets the color of the series.
            </summary>
        </member>
        <member name="P:YAMP.IPointSeries.Label">
            <summary>
            Gets or sets the label for the series.
            </summary>
        </member>
        <member name="T:YAMP.ISetFunction">
            <summary>
            This interface has to be implemented for values to indicate that using
            the value as a method can also be done in order to set something, e.g.
            for a matrix M to be used like M(2, 3) = 5.
            </summary>
        </member>
        <member name="M:YAMP.ISetFunction.Perform(YAMP.ParseContext,YAMP.Value,YAMP.Value)">
            <summary>
            Invokes the function to set a certain value.
            </summary>
            <param name="context">The context where the invocation takes place.</param>
            <param name="indices">The parameter containing the indices.</param>
            <param name="values">The parameter containing the value(s).</param>
            <returns>Usually the modified instance is returned.</returns>
        </member>
        <member name="T:YAMP.Numerics.CholeskyDecomposition">
            <summary>
            Cholesky Decomposition.
            For a symmetric, positive definite matrix A, the Cholesky decomposition
            is an lower triangular matrix L so that A = L*L'.
            If the matrix is not symmetric or positive definite, the constructor
            returns a partial decomposition and sets an internal flag that may
            be queried by the isSPD() method.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.CholeskyDecomposition.L">
            <summary>
            Array for internal storage of decomposition.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.CholeskyDecomposition.n">
            <summary>
            Row and column dimension (square matrix).
            </summary>
        </member>
        <member name="F:YAMP.Numerics.CholeskyDecomposition.isspd">
            <summary>
            Symmetric and positive definite flag.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.CholeskyDecomposition.#ctor(YAMP.MatrixValue)">
            <summary>
            Cholesky algorithm for symmetric and positive definite matrix.
            </summary>
            <param name="Arg">Square, symmetric matrix.</param>
            <returns>Structure to access L and isspd flag.</returns>
        </member>
        <member name="M:YAMP.Numerics.CholeskyDecomposition.GetL">
            <summary>
            Return triangular factor.
            </summary>
            <returns>L</returns>
        </member>
        <member name="M:YAMP.Numerics.CholeskyDecomposition.Solve(YAMP.MatrixValue)">
            <summary>Solve A*X = B</summary>
            <param name="B">  A Matrix with as many rows as A and any number of columns.
            </param>
            <returns>     X so that L*L'*X = B
            </returns>
            <exception cref="T:System.ArgumentException">  Matrix row dimensions must agree.
            </exception>
            <exception cref="T:System.SystemException"> Matrix is not symmetric positive definite.
            </exception>
        </member>
        <member name="P:YAMP.Numerics.CholeskyDecomposition.SPD">
            <summary>
            Is the matrix symmetric and positive definite?
            </summary>
            <returns>true if A is symmetric and positive definite.</returns>
        </member>
        <member name="T:YAMP.Numerics.Integrator">
            <summary>
            The abstract base class for every integrator algorithm.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Integrator.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new integrator.
            </summary>
            <param name="y">The (y) vector to integrate.</param>
        </member>
        <member name="M:YAMP.Numerics.Integrator.Integrate">
            <summary>
            Performs the integration with the values hold in Values and standard x values.
            </summary>
            <returns>The result of the integration.</returns>
        </member>
        <member name="M:YAMP.Numerics.Integrator.Integrate(YAMP.MatrixValue)">
            <summary>
            Performs the integration with the values hold in Values and the given x values.
            </summary>
            <param name="x">The x values.</param>
            <returns>The result of the integration.</returns>
        </member>
        <member name="P:YAMP.Numerics.Integrator.Values">
            <summary>
            Gets or sets the (y) values used by the integrator.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.SimpsonIntegrator">
            <summary>
            Represents a specific algorithm for integration - Simpson's rule.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.SimpsonIntegrator.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new Simpson integrator.
            </summary>
            <param name="y">The values to integrate.</param>
        </member>
        <member name="M:YAMP.Numerics.SimpsonIntegrator.Integrate(YAMP.MatrixValue)">
            <summary>
            Performs the integration.
            </summary>
            <param name="x">The x values.</param>
            <returns>The result of the integration.</returns>
        </member>
        <member name="P:YAMP.Numerics.SimpsonIntegrator.N">
            <summary>
            Gets the number of values.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.TrapezIntegrator">
            <summary>
            Represents the Trapez integration algorithm - a very simple rule for numerical integration.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.TrapezIntegrator.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="y">The values to integrate.</param>
        </member>
        <member name="M:YAMP.Numerics.TrapezIntegrator.Integrate(YAMP.MatrixValue)">
            <summary>
            Performs the integration.
            </summary>
            <param name="x">The x values.</param>
            <returns>The result of the integration.</returns>
        </member>
        <member name="P:YAMP.Numerics.TrapezIntegrator.N">
            <summary>
            Gets the number of values.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.Interpolation">
            <summary>
            Abstract base class for various interpolation algorithms.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Interpolation.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="samples">The given sample values - the matrix has to be Nx2 with the
            first column for the x values and the second column for the y values.</param>
        </member>
        <member name="M:YAMP.Numerics.Interpolation.ComputeValues(YAMP.MatrixValue)">
            <summary>
            Uses the abstract Compute() methods to compute ALL values.
            </summary>
            <param name="x">The matrix with given x values.</param>
            <returns>The interpolated y values.</returns>
        </member>
        <member name="M:YAMP.Numerics.Interpolation.ComputeValue(System.Double)">
            <summary>
            Computes an interpolated y-value for the given x-value.
            </summary>
            <param name="x">The x-value to search for a y-value.</param>
            <returns>The corresponding y-value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Interpolation.SolveTridiag(System.Double[],System.Double[],System.Double[],System.Double[]@,System.Int32)">
            <summary>
            Solves the system of linear equations for a tri-diagonal A in A * x = b.
            </summary>
            <param name="sub">The lower diagonal of A.</param>
            <param name="diag">The diagonal itself of A.</param>
            <param name="sup">The upper diagonal of A.</param>
            <param name="b">The vector b in A * x = b.</param>
            <param name="n">The length of the diagonal.</param>
        </member>
        <member name="P:YAMP.Numerics.Interpolation.Samples">
            <summary>
            Gets the vector with samples.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Interpolation.Np">
            <summary>
            Gets the number of interpolation points.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.NevilleInterpolator">
            <summary>
            The Neville polynom interpolation algorithm.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.NevilleInterpolator.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="vector">The Nx2 vector with the sample values.</param>
        </member>
        <member name="M:YAMP.Numerics.NevilleInterpolator.ComputeValue(System.Double)">
            <summary>
            Interpolates the y value for a given x (t) value.
            </summary>
            <param name="t">The x value for computing f(x) = y.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:YAMP.Numerics.NewtonInterpolation">
            <summary>
            The Newton polynomial interpolation method.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.NewtonInterpolation.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="vector">The Nx2 vector with the samples.</param>
        </member>
        <member name="M:YAMP.Numerics.NewtonInterpolation.ComputeValue(System.Double)">
            <summary>
            Computes a value f(t) at t.
            </summary>
            <param name="t">The t value.</param>
            <returns>Returns the interpolated y = f(t) value.</returns>
        </member>
        <member name="T:YAMP.Numerics.SplineInterpolation">
            <summary>
            Interpolation with the spline method.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.SplineInterpolation.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="samples">The Nx2 matrix containing the sample data.</param>
        </member>
        <member name="M:YAMP.Numerics.SplineInterpolation.ComputeValue(System.Double)">
            <summary>
            Computes a specific interpolated value f(x).
            </summary>
            <param name="x">The value where to interpolate.</param>
            <returns>The computed value y = f(t).</returns>
        </member>
        <member name="T:YAMP.Numerics.HalfDivisionMethod">
            <summary>
            Access to the half division method for getting the closest root.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.NonLinearBase">
            <summary>
            Abstract base class for all non-linear algorithms to determine the closest root.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.NonLinearBase.#ctor(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="f">The function to consider.</param>
            <param name="d">The spacing to use.</param>
        </member>
        <member name="M:YAMP.Numerics.NonLinearBase.fprime(System.Double)">
            <summary>
            Computes the derivative
            </summary>
            <param name="x">Point</param>
        </member>
        <member name="P:YAMP.Numerics.NonLinearBase.Result">
            <summary>
            Gets the equation's solution.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.NonLinearBase.f">
            <summary>
            Gets the function to use.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.NonLinearBase.d">
            <summary>
            Gets the spacing d.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.HalfDivisionMethod.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Description constructor
            </summary>
            <param name="f">Function to be solved delegate</param>
            <param name="x0">Interval start point value</param>
            <param name="x1">Interval end point value</param>
            <param name="d">Amount divisions of segment</param>
        </member>
        <member name="T:YAMP.Numerics.Optimization.NewtonMethod">
            <summary>
            Represents the Newton method.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Optimization.NewtonMethod.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="f">Function to be solved delegate.</param>
            <param name="x">The starting point.</param>
            <param name="d">The spacing to use.</param>
        </member>
        <member name="T:YAMP.Numerics.SecantMethod">
            <summary>
            Represents the Secant method for determining the closest root.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.SecantMethod.dl">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:YAMP.Numerics.SecantMethod.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Cretes a new instance.
            </summary>
            <param name="f">Function to be solved delegate</param>
            <param name="shag">The spacing to use.</param>
            <param name="delta">The function values to use.</param>
        </member>
        <member name="M:YAMP.Numerics.SecantMethod.Perform(System.Double,System.Double)">
            <summary>
            Performs an iteration.
            </summary>
            <param name="x0">Initial value.</param>
            <param name="delta">The gap.</param>
        </member>
        <member name="T:YAMP.Numerics.Euler">
            <summary>
            Represents the Euler algorithm for computing ODEs.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.ODEBase">
            <summary>
            Abstract base class for all ODE algorithms.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ODEBase.f">
            <summary>
            The function
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ODEBase.begin">
            <summary>
            Start point
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ODEBase.end">
            <summary>
            End point
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ODEBase.y0">
            <summary>
            Start condition
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ODEBase.pointsNum">
            <summary>
            Number of points
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ODEBase.h">
            <summary>
            Delta
            </summary>
        </member>
        <member name="M:YAMP.Numerics.ODEBase.#ctor(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="f">Function to be solved delegate</param>
            <param name="begin">Interval start point value</param>
            <param name="end">Interval end point value</param>
            <param name="y0">Starting condition</param>
            <param name="pointsNum">Points number</param>
        </member>
        <member name="M:YAMP.Numerics.ODEBase.Calculate">
            <summary>
            Computes the result.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ODEBase.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ODEBase.Step">
            <summary>
            Gets the set step size.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Euler.#ctor(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="f">Function to be solved delegate</param>
            <param name="begin">Interval start point value</param>
            <param name="end">Interval end point value</param>
            <param name="y0">Starting condition</param>
            <param name="pointsNum">Points number</param>
        </member>
        <member name="M:YAMP.Numerics.Euler.Calculate">
            <summary>
            Computes the result.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.RungeKutta">
            <summary>
            This is the Runge-Kutta Algorithm for solving ODEs.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.RungeKutta.#ctor(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="f">Function to be solved delegate</param>
            <param name="begin">Interval start point value</param>
            <param name="end">Interval end point value</param>
            <param name="y0">Starting condition</param>
            <param name="pointsNum">Points number</param>
        </member>
        <member name="M:YAMP.Numerics.RungeKutta.Calculate">
            <summary>
            Calculates the result.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.GoldenSection">
            <summary>
            The golden section search is a technique for finding the extremum (minimum or maximum) of a
            strictly unimodal function by successively narrowing the range of values inside which the extremum
            is known to exist.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.OptimizationBase">
            <summary>
            The abstract base class for all optimization algorithms, i.e. the ones to find an extremum.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.OptimizationBase.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="f">The function to use.</param>
            <param name="a">The start point.</param>
            <param name="b">The end point.</param>
            <param name="n">The number of points.</param>
        </member>
        <member name="P:YAMP.Numerics.OptimizationBase.Result">
            <summary>
            Gets the Equation solution
            </summary>
        </member>
        <member name="P:YAMP.Numerics.OptimizationBase.f">
            <summary>
            Gets the function to use.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.OptimizationBase.a">
            <summary>
            Gets the start point.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.OptimizationBase.b">
            <summary>
            Gets the end point.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.OptimizationBase.n">
            <summary>
            Gets the number of points.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.GoldenSection.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new golden section search instance.
            </summary>
            <param name="f">The function to optimize.</param>
            <param name="a">The start value.</param>
            <param name="b">The end value.</param>
            <param name="n">The number of points.</param>
        </member>
        <member name="P:YAMP.Numerics.GoldenSection.AlternativeResult">
            <summary>
            Gets the alternative result.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.Pijavsky">
            <summary>
            Represents the Pijavsky algorithm for optimizing.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Pijavsky.#ctor(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="f">The function to optimize.</param>
            <param name="a">The starting point.</param>
            <param name="b">The ending point.</param>
            <param name="l">The weight parameter.</param>
            <param name="n">The number of points.</param>
        </member>
        <member name="T:YAMP.Numerics.Bessel">
            <summary>
            This class contains bessel functions.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Bessel.j0(System.Double)">
            <summary>
            Returns the Bessel function of order 0 of the specified number.
            </summary>
            <param name="x">x</param>
            <returns>Value</returns>
        </member>
        <member name="M:YAMP.Numerics.Bessel.j1(System.Double)">
            <summary>
            Returns the Bessel function of order 1 of the specified number.
            </summary>
            <param name="x">x</param>
            <returns>Value</returns>
        </member>
        <member name="M:YAMP.Numerics.Bessel.jn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of order n of the specified number.
            </summary>
            <param name="n">Order</param>
            <param name="x">x</param>
            <returns>Value</returns>
        </member>
        <member name="M:YAMP.Numerics.Bessel.y0(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 0 of the specified number.
            </summary>
            <param name="x">x</param>
            <returns>Value</returns>
        </member>
        <member name="M:YAMP.Numerics.Bessel.y1(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 1 of the specified number.
            </summary>
            <param name="x">x</param>
            <returns>Value</returns>
        </member>
        <member name="M:YAMP.Numerics.Bessel.yn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order n of the specified number.
            </summary>
            <param name="n">Order</param>
            <param name="x">x</param>
            <returns>Value</returns>
        </member>
        <member name="T:YAMP.Numerics.Eigenvalues">
            <summary>
            Eigenvalues and eigenvectors of a real matrix. 
            If A is symmetric, then A = V * D * V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V.Multiply(D.Multiply(V.Transpose())) and 
            V.Multiply(V.Transpose()) equals the identity matrix.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A * V = V * D,
            i.e. A.Multiply(V) equals V.Multiply(D). The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V * D * Inverse(V) depends upon V.cond().
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Eigenvalues.n">
            <summary>
            Row and column dimension (square matrix).
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Eigenvalues.issymmetric">
            <summary>
            Symmetry flag.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Eigenvalues.d">
            <summary>
            Arrays for internal storage of eigenvalues.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Eigenvalues.e">
            <summary>
            Arrays for internal storage of eigenvalues.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Eigenvalues.V">
            <summary>
            Array for internal storage of eigenvectors.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Eigenvalues.H">
            <summary>
            Array for internal storage of nonsymmetric Hessenberg form.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Eigenvalues.ort">
            <summary>
            Working storage for nonsymmetric algorithm.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Eigenvalues.#ctor(YAMP.MatrixValue)">
            <summary>
            Check for symmetry, then construct the eigenvalue decomposition
            </summary>
            <param name="Arg">Square matrix</param>
            <returns>Structure to access D and V.</returns>
        </member>
        <member name="M:YAMP.Numerics.Eigenvalues.GetV">
            <summary>
            Return the eigenvector matrix
            </summary>
            <returns>V</returns>
        </member>
        <member name="P:YAMP.Numerics.Eigenvalues.RealEigenvalues">
            <summary>
            Return the real parts of the eigenvalues
            </summary>
            <returns>real(diag(D))</returns>
        </member>
        <member name="P:YAMP.Numerics.Eigenvalues.ImagEigenvalues">
            <summary>
            Return the imaginary parts of the eigenvalues
            </summary>
            <returns>imag(diag(D))</returns>
        </member>
        <member name="P:YAMP.Numerics.Eigenvalues.D">
            <summary>
            Return the block diagonal eigenvalue matrix
            </summary>
            <returns>D</returns>
        </member>
        <member name="T:YAMP.Numerics.LUDecomposition">
            <summary>
            LU Decomposition.
            For an m-by-n matrix A with m >= n, the LU decomposition is an m-by-n
            unit lower triangular matrix L, an n-by-n upper triangular matrix U,
            and a permutation vector piv of length m so that A(piv,:) = L*U.
            <code>
            If m is smaller than n, then L is m-by-m and U is m-by-n.
            </code>
            The LU decompostion with pivoting always exists, even if the matrix is
            singular, so the constructor will never fail.  The primary use of the
            LU decomposition is in the solution of square systems of simultaneous
            linear equations. This will fail if IsNonSingular() returns false.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.LUDecomposition.LU">
            <summary>
            Array for internal storage of decomposition.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.LUDecomposition.m">
            <summary>
            Row and column dimensions, and pivot sign.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.LUDecomposition.n">
            <summary>
            Row and column dimensions, and pivot sign.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.LUDecomposition.pivsign">
            <summary>
            Row and column dimensions, and pivot sign.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.LUDecomposition.piv">
            <summary>
            Internal storage of pivot vector.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.LUDecomposition.#ctor(YAMP.MatrixValue)">
            <summary>
            LU Decomposition
            </summary>
            <param name="A">Rectangular matrix</param>
            <returns>Structure to access L, U and piv.</returns>
        </member>
        <member name="M:YAMP.Numerics.LUDecomposition.Determinant">
            <summary>
            Determinant
            </summary>
            <returns>det(A)</returns>
        </member>
        <member name="M:YAMP.Numerics.LUDecomposition.Solve(YAMP.MatrixValue)">
            <summary>
            Solve A*X = B
            </summary>
            <param name="B">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X so that L*U*X = B(piv,:)</returns>
        </member>
        <member name="P:YAMP.Numerics.LUDecomposition.IsNonSingular">
            <summary>
            Is the matrix nonsingular?
            </summary>
            <returns>true if U, and hence A, is nonsingular.</returns>
        </member>
        <member name="P:YAMP.Numerics.LUDecomposition.L">
            <summary>
            Return lower triangular factor
            </summary>
            <returns>L</returns>
        </member>
        <member name="P:YAMP.Numerics.LUDecomposition.U">
            <summary>
            Return upper triangular factor
            </summary>
            <returns>U</returns>
        </member>
        <member name="P:YAMP.Numerics.LUDecomposition.Pivot">
            <summary>
            Return pivot permutation vector
            </summary>
            <returns>piv</returns>
        </member>
        <member name="T:YAMP.Numerics.SingularValueDecomposition">
            <summary>
            Singular Value Decomposition.
            For an m-by-n matrix A with m >= n, the singular value decomposition is
            an m-by-n orthogonal matrix U, an n-by-n diagonal matrix S, and
            an n-by-n orthogonal matrix V so that A = U*S*V'.
            The singular values, sigma[k] = S[k][k], are ordered so that
            sigma[0] >= sigma[1] >= ... >= sigma[n-1].
            The singular value decompostion always exists, so the constructor will
            never fail.  The matrix condition number and the effective numerical
            rank can be computed from this decomposition.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.SingularValueDecomposition.U">
            <summary>
            Arrays for internal storage of U and V.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.SingularValueDecomposition.V">
            <summary>
            Arrays for internal storage of U and V.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.SingularValueDecomposition.s">
            <summary>
            Array for internal storage of singular values.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.SingularValueDecomposition.m">
            <summary>
            Row and column dimensions.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.SingularValueDecomposition.n">
            <summary>
            Row and column dimensions.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.SingularValueDecomposition.#ctor(YAMP.MatrixValue)">
            <summary>
            Construct the singular value decomposition
            </summary>
            <param name="Arg">Rectangular matrix</param>
            <returns>Structure to access U, S and V.</returns>
        </member>
        <member name="M:YAMP.Numerics.SingularValueDecomposition.GetU">
            <summary>
            Return the left singular vectors
            </summary>
            <returns>U</returns>
        </member>
        <member name="M:YAMP.Numerics.SingularValueDecomposition.GetV">
            <summary>
            Return the right singular vectors
            </summary>
            <returns>V</returns>
        </member>
        <member name="M:YAMP.Numerics.SingularValueDecomposition.Norm2">
            <summary>
            Two norm
            </summary>
            <returns>max(S)</returns>
        </member>
        <member name="M:YAMP.Numerics.SingularValueDecomposition.Condition">
            <summary>
            Two norm condition number
            </summary>
            <returns>max(S)/min(S)</returns>
        </member>
        <member name="M:YAMP.Numerics.SingularValueDecomposition.Rank">
            <summary>
            Effective numerical matrix rank
            </summary>
            <returns>Number of nonnegligible singular values.</returns>
        </member>
        <member name="P:YAMP.Numerics.SingularValueDecomposition.SingularValues">
            <summary>
            Return the one-dimensional array of singular values
            </summary>
            <returns>diagonal of S.</returns>
        </member>
        <member name="P:YAMP.Numerics.SingularValueDecomposition.S">
            <summary>
            Return the diagonal matrix of singular values
            </summary>
            <returns>S</returns>
        </member>
        <member name="T:YAMP.Numerics.Helpers">
            <summary>
            Provides some commonly used methods for numeric algorithms.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.LanczosR">
            <summary>
            Value of the LaczosR number.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.FourPI">
            <summary>
            Value of 4 * Pi
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.TwoPI">
            <summary>
            Value of 2 * Pi
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.HalfPI">
            <summary>
            Value of Pi / 2
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.TwoPIpow">
            <summary>
            Provides access to (2*pi)^(10*n) with n = 0, ..., 17.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.BernoulliNumbers">
            <summary>
            Provides access to the first 21 bernoulli numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.LanczosD">
            <summary>
            Provides access do some Lanczos numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.SqrtTwo">
            <summary>
            Value of Sqrt(2)
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.SqrtThree">
            <summary>
            Value of Sqrt(3)
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.SqrtPI">
            <summary>
            Value of Sqrt(Pi)
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.SqrtTwoPI">
            <summary>
            Value of Sqrt(2 * Pi)
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.LogPI">
            <summary>
            Value of ln(Pi)
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.LogTwo">
            <summary>
            Value of ln(2)
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Helpers.IsPrimeNumber(System.Int32)">
            <summary>
            Returns a boolean if the given integer is a prime number.
            </summary>
            <param name="n">The integer to examine.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.PowMod(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes a power of an integer in modular arithmetic.
            </summary>
            <param name="b">The base, which must be positive.</param>
            <param name="e">The exponent, which must be positive.</param>
            <param name="m">The modulus, which must be positive.</param>
            <returns>The value of b<sup>e</sup> mod m.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.GCD(System.Int32,System.Int32)">
            <summary>
            Computes the greatest common divisor of two numbers.
            </summary>
            <param name="A">The first number.</param>
            <param name="B">The second number.</param>
            <returns>The greatest common divisor.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.Hypot(System.Double,System.Double)">
            <summary>
            Computes the length of a right triangle's hypotenuse.
            </summary>
            <param name="a">The length of one side.</param>
            <param name="b">The length of another side.</param>
            <returns>The length of the hypotenuse, sqrt(x<sup>2</sup> + y<sup>2</sup>).</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.Factorial(System.Int32)">
            <summary>
            Computes the factorial of an integer and returns a double with the result.
            </summary>
            <param name="n">The argument to take the factorial.</param>
            <returns>A double with the result of n!.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.BinomialCoefficient(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            Computes the complex binomial coefficient (very general) given two values, n choose k.
            </summary>
            <param name="n">We have n elements.</param>
            <param name="k">We choose k elements.</param>
            <returns>The binomial coefficient.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.BinomialCoefficient(System.Double,System.Double)">
            <summary>
            Computes the real binomial coefficient (almost general) given two values, n choose k.
            </summary>
            <param name="n">We have n elements.</param>
            <param name="k">We choose k elements.</param>
            <returns>The binomial coefficient.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.Power(YAMP.ScalarValue,System.Int32)">
            <summary>
            Takes the power of z to an integer n.
            </summary>
            <param name="z">The complex value z in C.</param>
            <param name="n">The power n in N.</param>
            <returns>The result of z^n.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.ComputeRoots(System.Int32,System.Int32)">
            <summary>
            computes the N-th roots of unity, which are the factors in a length-N Fourier transform.
            </summary>
            <param name="N">What number of roots.</param>
            <param name="sign">The sign to take.</param>
            <returns>The number roots, i.e. a N  + 1 size array.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.ChebEval(System.Int32,System.Double[],System.Double)">
            <summary>
            Evaluate a real Chebyshev polynomial on an interval, given the coefficients.
            </summary>
            <param name="n">The order for the summation of the polynomial.</param>
            <param name="coefficients">The coefficients to consider.</param>
            <param name="x">The real evaluation argument.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.ChebEval(YAMP.Numerics.Helpers.ChebSeries,System.Double)">
            <summary>
            Evaluate a real Chebyshev polynomial on an interval, given the coefficients.
            </summary>
            <param name="cs">The coefficients to consider.</param>
            <param name="x">The real evaluation argument.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Helpers.ChebEval(YAMP.Numerics.Helpers.ChebSeries,YAMP.ScalarValue)">
            <summary>
            Evaluate a complex Chebyshev polynomial on an interval, given the coefficients.
            </summary>
            <param name="cs">The coefficients to consider.</param>
            <param name="z">The complex evaluation argument.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:YAMP.Numerics.Helpers.ChebSeries">
            <summary>
            The coefficients with order, and more information.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.ChebSeries.Coefficients">
            <summary>
            The (real) coefficients of the Chebyshev polynomial.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.ChebSeries.Order">
            <summary>
            The order of the polynomial.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.ChebSeries.LowerPoint">
            <summary>
            The lowest point in the interval.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.ChebSeries.UpperPoint">
            <summary>
            The highest point in the interval.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Helpers.ChebSeries.SinglePrecisionOrder">
            <summary>
            The order of the single precision.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.ErrorFunction">
            <summary>
            This class contains everything about the error function.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.ErrorFunction.Erf(System.Double)">
            <summary>
            Computes the normal error function erf(x).
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of the error function.</returns>
        </member>
        <member name="M:YAMP.Numerics.ErrorFunction.Erfc(System.Double)">
            <summary>
            Computes the complementary error function erfc(x).
            </summary>
            <param name="a">The argument.</param>
            <returns>The value of the compl. error function.</returns>
        </member>
        <member name="M:YAMP.Numerics.ErrorFunction.Erf(YAMP.ScalarValue)">
            <summary>
            Computes the complex error function erf(z).
            </summary>
            <param name="z">The complex argument.</param>
            <returns>The value of erf(z).</returns>
        </member>
        <member name="M:YAMP.Numerics.ErrorFunction.Erfc(YAMP.ScalarValue)">
            <summary>
            Computes the complex complementary error function erfc(z).
            </summary>
            <param name="z">The complex argument.</param>
            <returns>The value of erfc(z).</returns>
        </member>
        <member name="M:YAMP.Numerics.ErrorFunction.Faddeeva(YAMP.ScalarValue)">
            <summary>
            The Faddeeva function or Kramp function is a scaled complex complementary error function.
            </summary>
            <param name="z">The argument z.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="T:YAMP.Numerics.FFT">
            <summary>
            A simple FFT implemention that uses Cooley-Tukey FFT (i.e. 2^n elements required).
            </summary>
        </member>
        <member name="M:YAMP.Numerics.FFT.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="values">The data.</param>
        </member>
        <member name="M:YAMP.Numerics.FFT.Transform1D">
            <summary>
            Transforms the data as 1D.
            </summary>
            <returns>The transformed values.</returns>
        </member>
        <member name="M:YAMP.Numerics.FFT.Transform2D">
            <summary>
            Transforms the data as 2D.
            </summary>
            <returns>The transformed values.</returns>
        </member>
        <member name="T:YAMP.Numerics.Gamma">
            <summary>
            This class contains the linear gamma function as well as complex ones
            and logarithmic ones.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Gamma.LinearGamma(System.Double)">
            <summary>
            Computes the real (linear) gamma function.
            </summary>
            <param name="x">The argument.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Gamma.LinearGamma(YAMP.ScalarValue)">
            <summary>
            Computes the complex (linear) gamma function.
            </summary>
            <param name="z">The complex argument.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Gamma.LogGamma(System.Double)">
            <summary>
            Computes the real (log) gamma function.
            </summary>
            <param name="x">The argument.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Gamma.LogGamma(YAMP.ScalarValue)">
            <summary>
            Computes the complex (log) gamma function.
            </summary>
            <param name="z">The complex argument.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Gamma.Beta(System.Double,System.Double)">
            <summary>
            Computes the real beta function, Gamma(a) * Gamma(b) / Gamma(a+b).
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Gamma.Beta(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            Computes the complex beta function, Gamma(a) * Gamma(b) / Gamma(a+b).
            </summary>
            <param name="a">The first complex parameter.</param>
            <param name="b">The second complex parameter.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Gamma.Psi(System.Double)">
            <summary>
            Computes the real psi, usually called the digamma function, which is defined as the logarithmic derivative of the gamma function.
            </summary>
            <param name="x">The real argument.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:YAMP.Numerics.Mandelbrot">
            <summary>
            Creates the class for evaluating a mandelbrot function.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Mandelbrot.#ctor">
            <summary>
            Creates a new mandelbrot instance with the default number of iterations (255).
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Mandelbrot.#ctor(System.Int32)">
            <summary>
            Creates a new mandelbrot instance with the default number of colors (25).
            </summary>
            <param name="maxIterations">The number of iterations.</param>
        </member>
        <member name="M:YAMP.Numerics.Mandelbrot.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="maxIterations">The maximum iterations.</param>
            <param name="colors">The number of colors.</param>
        </member>
        <member name="M:YAMP.Numerics.Mandelbrot.Run(System.Double,System.Double)">
            <summary>
            Calculates a single mandelbrot value.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>The result (color value 0..1).</returns>
        </member>
        <member name="T:YAMP.Numerics.BinomialDistribution">
            <summary>
            Provides generation of binomial distributed random numbers.
            </summary>
            <remarks>
            The binomial distribution generates only discrete numbers.<br/>
            The implementation of the <see cref="T:YAMP.Numerics.BinomialDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/binomial_distribution">Wikipedia - Binomial distribution</a>.
            </remarks>
        </member>
        <member name="T:YAMP.Numerics.Distribution">
            <summary>
            Declares common functionality for all random number distributions.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Distribution.generator">
            <summary>
            Stores a Generator object that can be used as underlying random number generator.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.Distribution.standardGenerator">
            <summary>
            Gets the standard genertor to use (MT19937).
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Distribution.#ctor">
            <summary>
            Initializes a new instance of the Distribution class, using a 
            StandardGenerator as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Distribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the Distribution class, using the specified 
              <see cref="P:YAMP.Numerics.Distribution.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A Generator object.</param>
            <exception cref="T:System.ArgumentNullException">
            Generator is NULL (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.Distribution.Reset">
            <summary>
            Resets the random number distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the random number distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.Distribution.NextDouble">
            <summary>
            Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.Distribution.Generator">
            <summary>
            Gets or sets a Generator object that can be used as underlying random number generator.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Distribution.CanReset">
            <summary>
            Gets a value indicating whether the random number distribution can be reset, so that it produces the same 
            random number sequence again.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Distribution.Minimum">
            <summary>
            Gets the minimum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Distribution.Maximum">
            <summary>
            Gets the maximum possible value of distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Distribution.Mean">
            <summary>
            Gets the mean of distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Distribution.Median">
            <summary>
            Gets the median of distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Distribution.Variance">
            <summary>
            Gets the variance of distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.Distribution.Mode">
            <summary>
            Gets the mode of distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.BinomialDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of binomial distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.BinomialDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of binomial distributed random numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.BinomialDistribution.#ctor">
            <summary>
            Initializes a new instance of the class, using a as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.BinomialDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:YAMP.Numerics.BinomialDistribution"/> class, using the specified 
              <see cref="T:YAMP.Numerics.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.BinomialDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.BinomialDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0.0, and less than or equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.BinomialDistribution.IsValidBeta(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.BinomialDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.BinomialDistribution.Next">
            <summary>
            Returns a binomial distributed random number.
            </summary>
            <returns>A binomial distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:YAMP.Numerics.BinomialDistribution.NextDouble">
            <summary>
            Returns a binomial distributed floating point random number.
            </summary>
            <returns>A binomial distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.BinomialDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of binomial distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.BinomialDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.BinomialDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of binomial distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.BinomialDistribution.IsValidBeta(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.BinomialDistribution.Minimum">
            <summary>
            Gets the minimum possible value of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.BinomialDistribution.Maximum">
            <summary>
            Gets the maximum possible value of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.BinomialDistribution.Mean">
            <summary>
            Gets the mean value of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.BinomialDistribution.Median">
            <summary>
            Gets the median of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.BinomialDistribution.Variance">
            <summary>
            Gets the variance of binomial distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.BinomialDistribution.Mode">
            <summary>
            Gets the mode of binomial distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.ContinuousUniformDistribution">
            <summary>
            Provides generation of continuous uniformly distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:YAMP.Numerics.ContinuousUniformDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">
              Wikipedia - Uniform distribution (continuous)</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.ContinuousUniformDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ContinuousUniformDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ContinuousUniformDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of uniformly distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:YAMP.Numerics.ContinuousUniformDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:YAMP.Numerics.ContinuousUniformDistribution.#ctor">
            <summary>
            Initializes a new instance of the ContinuousUniformDistribution class, using a 
            StandardGenerator as underlying random number generator. 
            </summary>
        </member>
        <member name="M:YAMP.Numerics.ContinuousUniformDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the ContinuousUniformDistribution class, using the specified 
              <see cref="T:YAMP.Numerics.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.ContinuousUniformDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.ContinuousUniformDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is less than or equal to <see cref="P:YAMP.Numerics.ContinuousUniformDistribution.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.ContinuousUniformDistribution.IsValidBeta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.ContinuousUniformDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to <see cref="P:YAMP.Numerics.ContinuousUniformDistribution.Alpha"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.ContinuousUniformDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of uniformly distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.ContinuousUniformDistribution.NextDouble">
            <summary>
            Returns a uniformly distributed floating point random number.
            </summary>
            <returns>A uniformly distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.ContinuousUniformDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.ContinuousUniformDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.ContinuousUniformDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.ContinuousUniformDistribution.IsValidBeta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.ContinuousUniformDistribution.Minimum">
            <summary>
            Gets the minimum possible value of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ContinuousUniformDistribution.Maximum">
            <summary>
            Gets the maximum possible value of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ContinuousUniformDistribution.Mean">
            <summary>
            Gets the mean value of the uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ContinuousUniformDistribution.Median">
            <summary>
            Gets the median of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ContinuousUniformDistribution.Variance">
            <summary>
            Gets the variance of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ContinuousUniformDistribution.Mode">
            <summary>
            Gets the mode of the uniformly distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.DiscreteUniformDistribution">
            <summary>
            Provides generation of discrete uniformly distributed random numbers.
            </summary>
            <remarks>
            The discrete uniform distribution generates only discrete numbers.<br/>
            The implementation of the <see cref="T:YAMP.Numerics.DiscreteUniformDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">
              Wikipedia - Uniform distribution (discrete)</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.DiscreteUniformDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.DiscreteUniformDistribution.beta">
            <summary>
            Stores the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.DiscreteUniformDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of uniformly distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:YAMP.Numerics.DiscreteUniformDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:YAMP.Numerics.DiscreteUniformDistribution.#ctor">
            <summary>
            Initializes a new instance of the DiscreteUniformDistribution class, using a 
            StandardGenerator as underlying random number generator. 
            </summary>
        </member>
        <member name="M:YAMP.Numerics.DiscreteUniformDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:YAMP.Numerics.DiscreteUniformDistribution"/> class, using the specified 
              <see cref="T:YAMP.Numerics.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.DiscreteUniformDistribution.IsValidAlpha(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.DiscreteUniformDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is less than or equal to <see cref="P:YAMP.Numerics.DiscreteUniformDistribution.Beta"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.DiscreteUniformDistribution.IsValidBeta(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.DiscreteUniformDistribution.Beta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than or equal to <see cref="P:YAMP.Numerics.DiscreteUniformDistribution.Alpha"/>, and less than 
              <see cref="F:System.Int32.MaxValue"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.DiscreteUniformDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of uniformly distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.DiscreteUniformDistribution.Next">
            <summary>
            Returns a uniformly distributed random number.
            </summary>
            <returns>A geometric distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:YAMP.Numerics.DiscreteUniformDistribution.NextDouble">
            <summary>
            Returns a uniformly distributed floating point random number.
            </summary>
            <returns>A uniformly distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.DiscreteUniformDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of uniformly distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.DiscreteUniformDistribution.IsValidAlpha(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.DiscreteUniformDistribution.Beta">
            <summary>
            Gets or sets the parameter beta which is used for generation of uniformly distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.DiscreteUniformDistribution.IsValidBeta(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.DiscreteUniformDistribution.Minimum">
            <summary>
            Gets the minimum possible value of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.DiscreteUniformDistribution.Maximum">
            <summary>
            Gets the maximum possible value of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.DiscreteUniformDistribution.Mean">
            <summary>
            Gets the mean value of the uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.DiscreteUniformDistribution.Median">
            <summary>
            Gets the median of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.DiscreteUniformDistribution.Variance">
            <summary>
            Gets the variance of uniformly distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.DiscreteUniformDistribution.Mode">
            <summary>
            Gets the mode of the uniformly distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.ExponentialDistribution">
            <summary>
            Provides generation of exponential distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:YAMP.Numerics.ExponentialDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Exponential_distribution">Wikipedia - Exponential distribution</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.ExponentialDistribution.lambda">
            <summary>
            Stores the parameter lambda which is used for generation of exponential distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.ExponentialDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of exponential distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:YAMP.Numerics.ExponentialDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:YAMP.Numerics.ExponentialDistribution.#ctor">
            <summary>
            Initializes a new instance of the ExponentialDistribution class, using a 
            StandardGenerator as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.ExponentialDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the ExponentialDistribution class, using the specified 
              <see cref="T:YAMP.Numerics.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.ExponentialDistribution.IsValidLambda(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.ExponentialDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.ExponentialDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of exponential distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.ExponentialDistribution.NextDouble">
            <summary>
            Returns a exponential distributed floating point random number.
            </summary>
            <returns>A exponential distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.ExponentialDistribution.Lambda">
            <summary>
            Gets or sets the parameter lambda which is used for generation of exponential distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.ExponentialDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.ExponentialDistribution.Minimum">
            <summary>
            Gets the minimum possible value of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ExponentialDistribution.Maximum">
            <summary>
            Gets the maximum possible value of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ExponentialDistribution.Mean">
            <summary>
            Gets the mean value of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ExponentialDistribution.Median">
            <summary>
            Gets the median of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ExponentialDistribution.Variance">
            <summary>
            Gets the variance of exponential distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.ExponentialDistribution.Mode">
            <summary>
            Gets the mode of exponential distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.GammaDistribution">
            <summary>
            Provides generation of gamma distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:YAMP.Numerics.GammaDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.GammaDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of gamma distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.GammaDistribution.theta">
            <summary>
            Stores the parameter theta which is used for generation of gamma distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.GammaDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of gamma distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:YAMP.Numerics.GammaDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.GammaDistribution.helper2">
            <summary>
            Stores an intermediate result for generation of gamma distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:YAMP.Numerics.GammaDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:YAMP.Numerics.GammaDistribution.#ctor">
            <summary>
            Initializes a new instance of the GammaDistribution class, using a 
            StandardGenerator as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.GammaDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the GammaDistribution class, using the specified 
            Generator as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.GammaDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.GammaDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.GammaDistribution.IsValidTheta(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.GammaDistribution.Theta"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.GammaDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of gamma distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.GammaDistribution.NextDouble">
            <summary>
            Returns a gamma distributed floating point random number.
            </summary>
            <returns>A gamma distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.GammaDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of gamma distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.GammaDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.GammaDistribution.Theta">
            <summary>
            Gets or sets the parameter theta which is used for generation of gamma distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.GammaDistribution.IsValidTheta(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.GammaDistribution.Minimum">
            <summary>
            Gets the minimum possible value of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.GammaDistribution.Maximum">
            <summary>
            Gets the maximum possible value of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.GammaDistribution.Mean">
            <summary>
            Gets the mean value of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.GammaDistribution.Median">
            <summary>
            Gets the median of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.GammaDistribution.Variance">
            <summary>
            Gets the variance of gamma distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.GammaDistribution.Mode">
            <summary>
            Gets the mode of gamma distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.Generator">
            <summary>
            Declares common functionality for all random number generators.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.Generator.Reset">
            <summary>
            Resets the random number generator, so that it produces the same random number sequence again.
            </summary>
            <returns>
            True, if the random number generator was reset; otherwise, false.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.Generator.Next">
            <summary>
            Returns a nonnegative random number less than MaxValue.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than that is, 
            the range of return values includes 0 but not MaxValue.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.Generator.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than MaxValue; that is, 
            the range of return values includes 0 but not MaxValue. 
            </returns>
        </member>
        <member name="M:YAMP.Numerics.Generator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            MaxValue must be greater than or equal to MinValue. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to MinValue, and less than 
            MaxValue; that is, the range of return values includes MinValue but not MaxValue.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.Generator.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0. 
            </returns>
        </member>
        <member name="M:YAMP.Numerics.Generator.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            MaxValue must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than MaxValue; 
              that is, the range of return values includes 0 but not MaxValue. 
            </returns>
        </member>
        <member name="M:YAMP.Numerics.Generator.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and MaxValue must be less than or equal to
            MaxValue.
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            MaxValue must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:YAMP.Numerics.Generator.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 31 random bits for future calls, so the random number generator is only invoked once in every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:YAMP.Numerics.Generator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="P:YAMP.Numerics.Generator.CanReset">
            <summary>
            Gets a value indicating whether the random number generator can be reset, so that it produces the same 
              random number sequence again.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.LaplaceDistribution">
            <summary>
            Provides generation of laplace distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:YAMP.Numerics.LaplaceDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Laplace distribution</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.LaplaceDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of laplace distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.LaplaceDistribution.mu">
            <summary>
            Stores the parameter mu which is used for generation of laplace distributed random numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.LaplaceDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YAMP.Numerics.LaplaceDistribution"/> class, using a 
            StandardGenerator as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.LaplaceDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the LaplaceDistribution class, using the specified 
            Generator as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            Generator is NULL (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.LaplaceDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.LaplaceDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.LaplaceDistribution.IsValidMu(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.LaplaceDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:YAMP.Numerics.LaplaceDistribution.NextDouble">
            <summary>
            Returns a laplace distributed floating point random number.
            </summary>
            <returns>A laplace distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.LaplaceDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of laplace distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.LaplaceDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.LaplaceDistribution.Mu">
            <summary>
            Gets or sets the parameter mu which is used for generation of laplace distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.LaplaceDistribution.IsValidMu(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.LaplaceDistribution.Minimum">
            <summary>
            Gets the minimum possible value of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.LaplaceDistribution.Maximum">
            <summary>
            Gets the maximum possible value of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.LaplaceDistribution.Mean">
            <summary>
            Gets the mean value of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.LaplaceDistribution.Median">
            <summary>
            Gets the median of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.LaplaceDistribution.Variance">
            <summary>
            Gets the variance of laplace distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.LaplaceDistribution.Mode">
            <summary>
            Gets the mode of laplace distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.MT19937Generator">
            <summary>
            Represents a Mersenne Twister pseudo-random number generator with period 2^19937-1.
            </summary>
            <remarks>
            The <see cref="T:YAMP.Numerics.MT19937Generator"/> type bases upon information and the implementation presented on the
              <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">Mersenne Twister Home Page</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.N">
            <summary>
            Represents the number of unsigned random numbers generated at one time. This field is constant.
            </summary>
            <remarks>The value of this constant is 624.</remarks>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.M">
            <summary>
            Represents a constant used for generation of unsigned random numbers. This field is constant.
            </summary>
            <remarks>The value of this constant is 397.</remarks>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.VectorA">
            <summary>
            Represents the constant vector a. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x9908b0dfU.</remarks>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.UpperMask">
            <summary>
            Represents the most significant w-r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x80000000.</remarks>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.LowerMask">
            <summary>
            Represents the least significant r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x7fffffff.</remarks>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.IntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0 when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.UIntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0  when it gets applied to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.mt">
            <summary>
            Stores the state vector array.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.mti">
            <summary>
            Stores an index for the state vector array element that will be accessed next.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.seedArray">
            <summary>
            Stores the used seed array.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.bitBuffer">
            <summary>
            Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.MT19937Generator.bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:YAMP.Numerics.MT19937Generator.bitBuffer"/>.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YAMP.Numerics.MT19937Generator"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:YAMP.Numerics.MT19937Generator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:YAMP.Numerics.MT19937Generator"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:YAMP.Numerics.MT19937Generator"/> class, using the specified seed array.
            </summary>
            <param name="seedArray">
            An array of numbers used to calculate a starting values for the pseudo-random number sequence.
            If negative numbers are specified, the absolute values of them are used. 
            </param>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:YAMP.Numerics.MT19937Generator"/> class, using the specified seed array.
            </summary>
            <param name="seedArray">
            An array of unsigned numbers used to calculate a starting values for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.ResetGenerator">
            <summary>
            Resets the <see cref="T:YAMP.Numerics.MT19937Generator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.ResetBySeedArray">
            <summary>
            Extends resetting of the <see cref="T:YAMP.Numerics.MT19937Generator"/> using the <see cref="F:YAMP.Numerics.MT19937Generator.seedArray"/>.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.GenerateNUInts">
            <summary>
            Generates <see cref="F:YAMP.Numerics.MT19937Generator.N"/> unsigned random numbers.
            </summary>
            <remarks>
            Generated random numbers are 32-bit unsigned integers greater than or equal to <see cref="F:System.UInt32.MinValue"/> 
              and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.NextUInt">
            <summary>
            Returns an unsigned random number.
            </summary>
            <returns>
            A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.NextInclusiveMaxValue">
            <summary>
            Returns a nonnegative random number less than or equal to MaxValue.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than or equal to MaxValue; 
              that is, the range of return values includes 0 and MaxValue.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.Reset">
            <summary>
            Resets the <see cref="T:YAMP.Numerics.MT19937Generator"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.Next">
            <summary>
            Returns a nonnegative random number less than MaxValue.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than MaxValue; that is, 
              the range of return values includes 0 but not MaxValue.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 32 random bits (1 uint) for future calls, so a new random number is only generated every 32 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:YAMP.Numerics.MT19937Generator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="P:YAMP.Numerics.MT19937Generator.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:YAMP.Numerics.MT19937Generator"/> can be reset, so that it produces the 
              same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.NormalDistribution">
            <summary>
            Provides generation of normal distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:YAMP.Numerics.NormalDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.NormalDistribution.mu">
            <summary>
            Stores the parameter mu which is used for generation of normal distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.NormalDistribution.sigma">
            <summary>
            Stores the parameter sigma which is used for generation of normal distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.NormalDistribution.helper1">
            <summary>
            Stores a precomputed normal distributed random number that will be returned the next time 
              <see cref="M:YAMP.Numerics.NormalDistribution.NextDouble"/> gets called.
            </summary>
            <remarks>
            Two new normal distributed random numbers are generated every other call to <see cref="M:YAMP.Numerics.NormalDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.NormalDistribution.helper2">
            <summary>
            Stores a value indicating whether <see cref="M:YAMP.Numerics.NormalDistribution.NextDouble"/> was called twice since last generation of 
              normal distributed random numbers.
            </summary>
            <remarks>
            Two new normal distributed random numbers are generated every other call to <see cref="M:YAMP.Numerics.NormalDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:YAMP.Numerics.NormalDistribution.#ctor">
            <summary>
            Initializes a new instance of the NormalDistribution class, using a 
            StandardGenerator as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.NormalDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the NormalDistribution class, using the specified 
              <see cref="T:YAMP.Numerics.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.NormalDistribution.IsValidMu(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.NormalDistribution.Mu"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/>.</returns>
        </member>
        <member name="M:YAMP.Numerics.NormalDistribution.IsValidSigma(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.NormalDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.NormalDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of normal distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.NormalDistribution.Reset">
            <summary>
            Resets the normal distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the normal distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.NormalDistribution.NextDouble">
            <summary>
            Returns a normal distributed floating point random number.
            </summary>
            <returns>A normal distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.NormalDistribution.Mu">
            <summary>
            Gets or sets the parameter mu which is used for generation of normal distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.NormalDistribution.IsValidMu(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.NormalDistribution.Sigma">
            <summary>
            Gets or sets the parameter sigma which is used for generation of normal distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.NormalDistribution.IsValidSigma(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.NormalDistribution.Minimum">
            <summary>
            Gets the minimum possible value of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.NormalDistribution.Maximum">
            <summary>
            Gets the maximum possible value of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.NormalDistribution.Mean">
            <summary>
            Gets the mean value of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.NormalDistribution.Median">
            <summary>
            Gets the median of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.NormalDistribution.Variance">
            <summary>
            Gets the variance of normal distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.NormalDistribution.Mode">
            <summary>
            Gets the mode of normal distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.PoissonDistribution">
            <summary>
            Provides generation of poisson distributed random numbers.
            </summary>
            <remarks>
            The poisson distribution generates only discrete numbers.<br/>
            The implementation of the <see cref="T:YAMP.Numerics.PoissonDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Wikipedia - Poisson distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.PoissonDistribution.lambda">
            <summary>
            Stores the the parameter lambda which is used for generation of poisson distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.PoissonDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of poisson distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:YAMP.Numerics.PoissonDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:YAMP.Numerics.PoissonDistribution.#ctor">
            <summary>
            Initializes a new instance of the PoissonDistribution class, using a 
            StandardGenerator as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.PoissonDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the PoissonDistribution class, using the specified 
            Generator as underlying random number generator.
            </summary>
            <param name="generator">A Generator object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.PoissonDistribution.IsValidLambda(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.PoissonDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.PoissonDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of beta distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.PoissonDistribution.Next">
            <summary>
            Returns a poisson distributed random number.
            </summary>
            <returns>A poisson distributed 32-bit signed integer.</returns>
        </member>
        <member name="M:YAMP.Numerics.PoissonDistribution.NextDouble">
            <summary>
            Returns a poisson distributed floating point random number.
            </summary>
            <returns>A poisson distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.PoissonDistribution.Lambda">
            <summary>
            Gets or sets the parameter lambda which is used for generation of poisson distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.PoissonDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.PoissonDistribution.Minimum">
            <summary>
            Gets the minimum possible value of poisson distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.PoissonDistribution.Maximum">
            <summary>
            Gets the maximum possible value of poisson distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.PoissonDistribution.Mean">
            <summary>
            Gets the mean value of poisson distributed random numbers. 
            </summary>
        </member>
        <member name="P:YAMP.Numerics.PoissonDistribution.Median">
            <summary>
            Gets the median of poisson distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.PoissonDistribution.Variance">
            <summary>
            Gets the variance of poisson distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.PoissonDistribution.Mode">
            <summary>
            Gets the mode of poisson distributed random numbers. 
            </summary>
        </member>
        <member name="T:YAMP.Numerics.RayleighDistribution">
            <summary>
            Provides generation of rayleigh distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:YAMP.Numerics.RayleighDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia - Rayleigh Distribution</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.RayleighDistribution.sigma">
            <summary>
            Stores the parameter sigma which is used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.RayleighDistribution.normalDistribution1">
            <summary>
            Stores first <see cref="T:YAMP.Numerics.NormalDistribution"/> object used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.RayleighDistribution.normalDistribution2">
            <summary>
            Stores second <see cref="T:YAMP.Numerics.NormalDistribution"/> object used for generation of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.RayleighDistribution.#ctor">
            <summary>
            Initializes a new instance of the RayleighDistribution class, using a 
            StandardGenerator as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.RayleighDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the RayleighDistribution class, using the specified 
              <see cref="T:YAMP.Numerics.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.RayleighDistribution.IsValidSigma(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.RayleighDistribution.Sigma"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.RayleighDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of rayleigh distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.RayleighDistribution.Reset">
            <summary>
            Resets the chi distribution, so that it produces the same random number sequence again.
            </summary>
            <returns>
            <see langword="true"/>, if the chi distribution was reset; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.RayleighDistribution.NextDouble">
            <summary>
            Returns a rayleigh distributed floating point random number.
            </summary>
            <returns>A rayleigh distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.RayleighDistribution.Sigma">
            <summary>
            Gets or sets the parameter sigma which is used for generation of rayleigh distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.RayleighDistribution.IsValidSigma(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.RayleighDistribution.Minimum">
            <summary>
            Gets the minimum possible value of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.RayleighDistribution.Maximum">
            <summary>
            Gets the maximum possible value of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.RayleighDistribution.Mean">
            <summary>
            Gets the mean value of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.RayleighDistribution.Median">
            <summary>
            Gets the median of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.RayleighDistribution.Variance">
            <summary>
            Gets the variance of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.RayleighDistribution.Mode">
            <summary>
            Gets the mode of rayleigh distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.WeibullDistribution">
            <summary>
            Provides generation of weibull distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:YAMP.Numerics.WeibullDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia - Weibull distribution</a>.
            </remarks>
        </member>
        <member name="F:YAMP.Numerics.WeibullDistribution.LanczosCoefficients">
            <summary>
            Represents coefficients for the Lanczos approximation of the Gamma function.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.WeibullDistribution.alpha">
            <summary>
            Stores the parameter alpha which is used for generation of weibull distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.WeibullDistribution.lambda">
            <summary>
            Stores the parameter lambda which is used for generation of erlang distributed random numbers.
            </summary>
        </member>
        <member name="F:YAMP.Numerics.WeibullDistribution.helper1">
            <summary>
            Stores an intermediate result for generation of weibull distributed random numbers.
            </summary>
            <remarks>
            Speeds up random number generation cause this value only depends on distribution parameters 
              and therefor doesn't need to be recalculated in successive executions of <see cref="M:YAMP.Numerics.WeibullDistribution.NextDouble"/>.
            </remarks>
        </member>
        <member name="M:YAMP.Numerics.WeibullDistribution.#ctor">
            <summary>
            Initializes a new instance of the WeibullDistribution class, using a 
            StandardGenerator as underlying random number generator.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.WeibullDistribution.#ctor(YAMP.Numerics.Generator)">
            <summary>
            Initializes a new instance of the WeibullDistribution class, using the specified 
              <see cref="T:YAMP.Numerics.Generator"/> as underlying random number generator.
            </summary>
            <param name="generator">A <see cref="T:YAMP.Numerics.Generator"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="generator"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:YAMP.Numerics.WeibullDistribution.IsValidAlpha(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.WeibullDistribution.Alpha"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.WeibullDistribution.IsValidLambda(System.Double)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:YAMP.Numerics.WeibullDistribution.Lambda"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:YAMP.Numerics.WeibullDistribution.UpdateHelpers">
            <summary>
            Updates the helper variables that store intermediate results for generation of weibull distributed random 
              numbers.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.WeibullDistribution.Gamma(System.Double)">
            <summary>
            Represents a Lanczos approximation of the Gamma function.
            </summary>
            <param name="x">A double-precision floating point number.</param>
            <returns>
            A double-precision floating point number representing an approximation of Gamma(<paramref name="x"/>).
            </returns>
        </member>
        <member name="M:YAMP.Numerics.WeibullDistribution.NextDouble">
            <summary>
            Returns a weibull distributed floating point random number.
            </summary>
            <returns>A weibull distributed double-precision floating point number.</returns>
        </member>
        <member name="P:YAMP.Numerics.WeibullDistribution.Alpha">
            <summary>
            Gets or sets the parameter alpha which is used for generation of weibull distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.WeibullDistribution.IsValidAlpha(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.WeibullDistribution.Lambda">
            <summary>
            Gets or sets the parameter lambda which is used for generation of erlang distributed random numbers.
            </summary>
            <remarks>Call <see cref="M:YAMP.Numerics.WeibullDistribution.IsValidLambda(System.Double)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:YAMP.Numerics.WeibullDistribution.Minimum">
            <summary>
            Gets the minimum possible value of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.WeibullDistribution.Maximum">
            <summary>
            Gets the maximum possible value of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.WeibullDistribution.Mean">
            <summary>
            Gets the mean value of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.WeibullDistribution.Median">
            <summary>
            Gets the median of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.WeibullDistribution.Variance">
            <summary>
            Gets the variance of weibull distributed random numbers.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.WeibullDistribution.Mode">
            <summary>
            Gets the mode of weibull distributed random numbers.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.CGSolver">
            <summary>
            Basic class for a Conjugant Gradient solver.
            </summary>
        </member>
        <member name="T:YAMP.Numerics.IterativeSolver">
            <summary>
            The abstract base class for any iterative solver.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.IterativeSolver.#ctor(YAMP.MatrixValue)">
            <summary>
            The matrix A that contains the description for a system of linear equations.
            </summary>
            <param name="A">The A in A * x = b.</param>
        </member>
        <member name="P:YAMP.Numerics.IterativeSolver.A">
            <summary>
            Gets the matrix A in A * x = b.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.IterativeSolver.MaxIterations">
            <summary>
            Gets or sets the maximum number of iterations.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.IterativeSolver.X0">
            <summary>
            Gets or sets the starting vector x0.
            </summary>
        </member>
        <member name="P:YAMP.Numerics.IterativeSolver.Tolerance">
            <summary>
            Gets or sets the tolerance level (when to stop the iteration?).
            </summary>
        </member>
        <member name="M:YAMP.Numerics.CGSolver.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="A">The matrix A for which to solve.</param>
        </member>
        <member name="M:YAMP.Numerics.CGSolver.Solve(YAMP.MatrixValue)">
            <summary>
            Solves a system of linear equation using the given matrix A.
            </summary>
            <param name="b">The source vector b, i.e. A * x = b.</param>
            <returns>The solution vector x.</returns>
        </member>
        <member name="T:YAMP.Numerics.GMRESkSolver">
            <summary>
            Basic class for a GMRES(k) (with restarts) solver.
            </summary>
        </member>
        <member name="M:YAMP.Numerics.GMRESkSolver.#ctor(YAMP.MatrixValue)">
            <summary>
            Creates the class for a GMRES(k) solver.
            </summary>
            <param name="A">The matrix A to solve.</param>
        </member>
        <member name="M:YAMP.Numerics.GMRESkSolver.#ctor(YAMP.MatrixValue,System.Boolean)">
            <summary>
            Creates the class for a GMRES(k) solver.
            </summary>
            <param name="A">The matrix A to consider as system of linear equations.</param>
            <param name="restart">Should restarts be executed?</param>
        </member>
        <member name="M:YAMP.Numerics.GMRESkSolver.Solve(YAMP.MatrixValue)">
            <summary>
            Solves the system of linear equations.
            </summary>
            <param name="b">The vector b in A * x = b.</param>
            <returns>The solution vector x.</returns>
        </member>
        <member name="P:YAMP.Numerics.GMRESkSolver.Restart">
            <summary>
            Gets or sets if restarts should be performed.
            </summary>
        </member>
        <member name="T:YAMP.AssignmentPrefixOperator">
            <summary>
            This class represents the abstract basis for all combined
            assignment operators (binary operator and =).
            </summary>
        </member>
        <member name="T:YAMP.AssignmentOperator">
            <summary>
            This class represents the basis of the assignment operators
            as well as the simple assignment operator (=).
            </summary>
        </member>
        <member name="T:YAMP.LeftDivideAssignmentOperator">
            <summary>
            This is the class for the \= operator.
            </summary>
        </member>
        <member name="T:YAMP.MinusAssignmentOperator">
            <summary>
            This is the class for the -= operator.
            </summary>
        </member>
        <member name="T:YAMP.MultiplyAssignmentOperator">
            <summary>
            This is the class representing the *= operator.
            </summary>
        </member>
        <member name="T:YAMP.PlusAssignmentOperator">
            <summary>
            This class represents the += operator.
            </summary>
        </member>
        <member name="T:YAMP.PowerAssignmentOperator">
            <summary>
            This class represents the ^= operator.
            </summary>
        </member>
        <member name="T:YAMP.RightDivideAssignmentOperator">
            <summary>
            This is the class for the standard /= operator.
            </summary>
        </member>
        <member name="T:YAMP.CommaOperator">
            <summary>
            This is the class used for the operator that seperated various arguments
            in round brackets.
            </summary>
        </member>
        <member name="T:YAMP.FatArrowOperator">
            <summary>
            The fat arrow used for lambda expressions.
            </summary>
        </member>
        <member name="T:YAMP.ColumnOperator">
            <summary>
            The matrix column operator , - used to seperate various columns in the
            entered matrix.
            </summary>
        </member>
        <member name="T:YAMP.RowOperator">
            <summary>
            This class represents the matrix row seperator operator ;.
            </summary>
        </member>
        <member name="T:YAMP.ModuloOperator">
            <summary>
            The class for the standard modulo operator.
            </summary>
        </member>
        <member name="T:YAMP.LtEqOperator">
            <summary>
            This is the representation of a lighter or equal to operator.
            </summary>
        </member>
        <member name="T:YAMP.GtEqOperator">
            <summary>
            The basic greater equals operator.
            </summary>
        </member>
        <member name="T:YAMP.AdjungateOperator">
            <summary>
            This is the operator for adjungating a matrix.
            </summary>
        </member>
        <member name="T:YAMP.DotLeftDivideOperator">
            <summary>
            The .\ operator.
            </summary>
        </member>
        <member name="T:YAMP.DotOperator">
            <summary>
            The abstract base class for any dot operator (.*, ./, ...), which is essentially a special
            binary operator.
            </summary>
        </member>
        <member name="M:YAMP.DotOperator.#ctor(YAMP.BinaryOperator)">
            <summary>
            Creates a new dot operator (e.g. .*, ./, ...).
            </summary>
            <param name="top">The binary operator on which this is based.</param>
        </member>
        <member name="M:YAMP.DotOperator.Operation(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            Implementation of the operation.
            </summary>
            <param name="left">The left scalar.</param>
            <param name="right">The right scalar.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:YAMP.DotOperator.Perform(YAMP.Value,YAMP.Value)">
            <summary>
            Performs the evaluation of the dot operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:YAMP.DotOperator.Dot(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Performs an operation on each entry of the left and right matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right matrix.</param>
            <returns>The cross product of all possibilities.</returns>
        </member>
        <member name="M:YAMP.DotOperator.Dot(YAMP.MatrixValue,YAMP.ScalarValue)">
            <summary>
            Performs an operation on each entry of the left matrix.
            </summary>
            <param name="left">The left matrix.</param>
            <param name="right">The right scalar.</param>
            <returns>The cross product of all possibilities.</returns>
        </member>
        <member name="M:YAMP.DotOperator.Dot(YAMP.ScalarValue,YAMP.MatrixValue)">
            <summary>
            Performs an operation on each entry of the right matrix.
            </summary>
            <param name="left">The left scalar.</param>
            <param name="right">The right matrix.</param>
            <returns>The cross product of all possibilities.</returns>
        </member>
        <member name="T:YAMP.DotMultiplyOperator">
            <summary>
            The .* operator.
            </summary>
        </member>
        <member name="T:YAMP.DotPowerOperator">
            <summary>
            The .^ operator.
            </summary>
        </member>
        <member name="T:YAMP.DotDivideOperator">
            <summary>
            The right divide operator ./
            </summary>
        </member>
        <member name="T:YAMP.ArgsOperator">
            <summary>
            Operator for arguments () for symbols (usually functions!).
            </summary>
        </member>
        <member name="T:YAMP.LeftDivideOperator">
            <summary>
            This is the left divide operator \
            </summary>
        </member>
        <member name="T:YAMP.RightDivideOperator">
            <summary>
            The standard right divide / operator.
            </summary>
        </member>
        <member name="T:YAMP.VoidOperator">
            <summary>
            This class is only used as a dummy placeholder for operators
            that have not been found.
            </summary>
        </member>
        <member name="T:YAMP.Parser">
            <summary>
            The YAMP interaction class.
            </summary>
        </member>
        <member name="M:YAMP.Parser.Parse(System.String)">
            <summary>
            Creates the parse tree for the given expression within the root context.
            </summary>
            <param name="input">
            The expression to evaluate.
            </param>
            <returns>The parser instance.</returns>
        </member>
        <member name="M:YAMP.Parser.Parse(YAMP.ParseContext,System.String)">
            <summary>
            Creates the parse tree for the given expression within a specific context.
            </summary>
            <param name="context">
            The context that the parser should use.
            </param>
            <param name="input">
            The expression to evaluate.
            </param>
            <returns>The parser instance.</returns>
        </member>
        <member name="M:YAMP.Parser.Execute">
            <summary>
            Execute the evaluation of this parser instance without any external symbols.
            </summary>
            <returns>The value from the evaluation.</returns>
        </member>
        <member name="M:YAMP.Parser.Execute(System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Execute the evaluation of this parser instance with external symbols.
            </summary>
            <param name="values">
            The values in an Hashtable containing string (name), Value (value) pairs.
            </param>
            <returns>The value from the evaluation.</returns>
        </member>
        <member name="M:YAMP.Parser.Execute(System.Object)">
            <summary>
            Execute the evaluation of this parser instance with external symbols.
            </summary>
            <param name="values">
            The values in an anonymous object - containing name - value pairs.
            </param>
            <returns>The value from the evaluation.</returns>
        </member>
        <member name="M:YAMP.Parser.AddCustomConstant(System.String,System.Double)">
            <summary>
            Adds a custom constant to the parser (to the primary context).
            </summary>
            <param name="name">
            The name of the symbol corresponding to the constant.
            </param>
            <param name="constant">
            The value of the constant.
            </param>
            <returns>The default context.</returns>
        </member>
        <member name="M:YAMP.Parser.AddCustomConstant(YAMP.ParseContext,System.String,System.Double)">
            <summary>
            Adds a custom constant to the parser using a specific context.
            </summary>
            <param name="context">
            The context where this constant should be made available.
            </param>
            <param name="name">
            The name of the symbol corresponding to the constant.
            </param>
            <param name="constant">
            The value of the constant.
            </param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.AddCustomConstant(System.String,YAMP.Value)">
            <summary>
            Adds a custom constant to the parser (to the primary context).
            </summary>
            <param name="name">
            The name of the symbol corresponding to the constant.
            </param>
            <param name="constant">
            The value of the constant.
            </param>
            <returns>The default context.</returns>
        </member>
        <member name="M:YAMP.Parser.AddCustomConstant(YAMP.ParseContext,System.String,YAMP.Value)">
            <summary>
            Adds a custom constant to the parser using a specific context.
            </summary>
            <param name="context">
            The context where this constant should be made available.
            </param>
            <param name="name">
            The name of the symbol corresponding to the constant.
            </param>
            <param name="constant">
            The value of the constant.
            </param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.RemoveCustomConstant(System.String)">
            <summary>
            Removes a custom constant (to the primary context).
            </summary>
            <param name="name">
            The name of the symbol corresponding to the constant that should be removed.
            </param>
            <returns>The default context.</returns>
        </member>
        <member name="M:YAMP.Parser.RemoveCustomConstant(YAMP.ParseContext,System.String)">
            <summary>
            Removes a custom constant using a specific context.
            </summary>
            <param name="context">
            The context where this constant should be removed.
            </param>
            <param name="name">
            The name of the symbol corresponding to the constant that should be removed.
            </param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.RenameConstant(YAMP.ParseContext,System.String,System.String)">
            <summary>
            Renames an existing constant (custom or defined).
            </summary>
            <param name="context">The context of the constant.</param>
            <param name="oldName">The old name of the constant.</param>
            <param name="newName">The new name for the constant.</param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.RenameFunction(YAMP.ParseContext,System.String,System.String)">
            <summary>
            Renames an existing function (custom or defined).
            </summary>
            <param name="context">The context of the function.</param>
            <param name="oldName">The old name of the function.</param>
            <param name="newName">The new name for the function.</param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.AddCustomFunction(System.String,YAMP.FunctionDelegate)">
            <summary>
            Adds a custom function to be used by the parser (to the primary context).
            </summary>
            <param name="name">
            The name of the symbol corresponding to the function that should be added.
            </param>
            <param name="f">
            The function that fulfills the signature Value f(Value v).
            </param>
            <returns>The default context.</returns>
        </member>
        <member name="M:YAMP.Parser.AddCustomFunction(YAMP.ParseContext,System.String,YAMP.FunctionDelegate)">
            <summary>
            Adds a custom function to be used by the parser using a specific context.
            </summary>
            <param name="context">
            The context where this function should be made available.
            </param>
            <param name="name">
            The name of the symbol corresponding to the function that should be added.
            </param>
            <param name="f">
            The function that fulfills the signature Value f(Value v).
            </param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.RemoveCustomFunction(System.String)">
            <summary>
            Removes a custom function (to the primary context).
            </summary>
            <param name="name">
            The name of the symbol corresponding to the function that should be removed.
            </param>
            <returns>The default context.</returns>
        </member>
        <member name="M:YAMP.Parser.RemoveCustomFunction(YAMP.ParseContext,System.String)">
            <summary>
            Removes a custom function using a specific context.
            </summary>
            <param name="context">
            The context where this function should be removed.
            </param>
            <param name="name">
            The name of the symbol corresponding to the function that should be removed.
            </param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.AddVariable(System.String,YAMP.Value)">
            <summary>
            Adds a variable to be used by the parser (to the primary context).
            </summary>
            <param name="name">
            The name of the symbol corresponding to the variable that should be added.
            </param>
            <param name="value">
            The value of the variable.
            </param>
            <returns>The default context.</returns>
        </member>
        <member name="M:YAMP.Parser.AddVariable(YAMP.ParseContext,System.String,YAMP.Value)">
            <summary>
            Adds a variable to be used by the parser using a specific context.
            </summary>
            <param name="context">
            The context where the variable should be made available.
            </param>
            <param name="name">
            The name of the symbol corresponding to the variable that should be added.
            </param>
            <param name="value">
            The value of the variable.
            </param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.RemoveVariable(System.String)">
            <summary>
            Removes a variable from the workspace (to the primary context).
            </summary>
            <param name="name">
            The name of the symbol corresponding to the variable that should be removed.
            </param>
            <returns>The default context.</returns>
        </member>
        <member name="M:YAMP.Parser.RemoveVariable(YAMP.ParseContext,System.String)">
            <summary>
            Removes a variable from the workspace using a specific context.
            </summary>
            <param name="context">
            The context where the variable should be removed from.
            </param>
            <param name="name">
            The name of the symbol corresponding to the variable that should be removed.
            </param>
            <returns>The given context.</returns>
        </member>
        <member name="M:YAMP.Parser.LoadPlugin(System.Reflection.Assembly)">
            <summary>
            Loads an external library (assembly) that uses IFunction, Operator, ..., into the primary context.
            </summary>
            <param name="assembly">
            The assembly to load as a plugin.
            </param>
            <returns>The ID for the plugin.</returns>
        </member>
        <member name="M:YAMP.Parser.LoadPlugin(YAMP.ParseContext,System.Reflection.Assembly)">
            <summary>
            Loads an external library (assembly) that uses IFunction, Operator, ..., into a specific context.
            </summary>
            <param name="context">
            The context where the new functions and constants should be available.
            </param>
            <param name="assembly">
            The assembly to load as a plugin.
            </param>
            <returns>The ID for the plugin.</returns>
        </member>
        <member name="M:YAMP.Parser.UnloadPlugin(System.Int32)">
            <summary>
            Unloads a previously loaded plugin.
            </summary>
            <param name="pluginId">The ID for the assembly to unload.</param>
            <returns>The primary parse context.</returns>
        </member>
        <member name="M:YAMP.Parser.Load">
            <summary>
            Load the required functions, operators and expressions (CAN only be performed once).
            </summary>
        </member>
        <member name="M:YAMP.Parser.RaiseNotification(YAMP.ParseContext,YAMP.NotificationEventArgs)">
            <summary>
            Raises the notification if in interactive mode.
            </summary>
            <param name="sender">The sending context of the notification.</param>
            <param name="e">The notification arguments.</param>
        </member>
        <member name="M:YAMP.Parser.RaiseInputPrompt(YAMP.ParseContext,YAMP.UserInputEventArgs)">
            <summary>
            Raises the input prompt if in interactive mode.
            </summary>
            <param name="sender">The sending context that demands the user input.</param>
            <param name="e">The input arguments.</param>
        </member>
        <member name="M:YAMP.Parser.RaisePause(YAMP.ParseContext,YAMP.PauseEventArgs)">
            <summary>
            Raises the input prompt if in interactive mode.
            </summary>
            <param name="sender">The sending context that demands the user input.</param>
            <param name="e">The input arguments.</param>
        </member>
        <member name="M:YAMP.Parser.ToString">
            <summary>
            Returns a string representation of the query.
            </summary>
            <returns>A string variable.</returns>
        </member>
        <member name="E:YAMP.Parser.OnNotificationReceived">
            <summary>
            If a new notification has been sent, this event is fired (only in interactive mode).
            </summary>
        </member>
        <member name="E:YAMP.Parser.OnUserInputRequired">
            <summary>
            If the user is required to enter something this event is fired.
            </summary>
        </member>
        <member name="E:YAMP.Parser.OnPauseDemanded">
            <summary>
            If the user is required to press a key in order to continue this event is fired.
            </summary>
        </member>
        <member name="P:YAMP.Parser.Answer">
            <summary>
            Gets or sets the name of the last answer.
            </summary>
        </member>
        <member name="P:YAMP.Parser.Keywords">
            <summary>
            Gets a list of the available keywords.
            </summary>
        </member>
        <member name="P:YAMP.Parser.Version">
            <summary>
            Gets the version of the YAMP parser.
            </summary>
        </member>
        <member name="P:YAMP.Parser.Context">
            <summary>
            Gets the context of the current parser instance (expression, value, ...).
            </summary>
            <value>
            The current context of this parser instance.
            </value>
        </member>
        <member name="P:YAMP.Parser.PrimaryContext">
            <summary>
            Gets the primary context of the parser (not the root context).
            </summary>
            <value>
            The parser's primary context.
            </value>
        </member>
        <member name="P:YAMP.Parser.UseScripting">
            <summary>
            Gets or sets of scripting should be enabled (allowed / activated).
            </summary>
            <value>
            The current setting.
            </value>
        </member>
        <member name="P:YAMP.Parser.InteractiveMode">
            <summary>
            Gets or sets if YAMP should run in interactive mode.
            </summary>
            <value>
            The current setting.
            </value>
        </member>
        <member name="T:YAMP.ParseEngine">
            <summary>
            The parse engine of YAMP. This engine has been introduced with YAMP v1.2
            and is called YAMP-PE, which stands for YAMP-ParseEngine.
            </summary>
        </member>
        <member name="M:YAMP.ParseEngine.#ctor(YAMP.QueryContext)">
            <summary>
            Creates a new instance of the parse engine.
            </summary>
            <param name="input">The query context to consider.</param>
        </member>
        <member name="M:YAMP.ParseEngine.AddError(YAMP.YAMPParseError)">
            <summary>
            Add a parse error to the list of parse errors.
            </summary>
            <param name="error">The parse error, which occured.</param>
            <returns>The current parse engine.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.AddError(YAMP.YAMPParseError,YAMP.Block)">
            <summary>
            Add a parse error to the list of parse errors with the block causing the error.
            </summary>
            <param name="error">The parse error, which occured.</param>
            <param name="part">The part where the error occured.</param>
            <returns>The current parse engine.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.Reset(System.String)">
            <summary>
            Resets the complete parse tree and uses the given input for
            the next parse run.
            </summary>
            <param name="input">The (updated) content (query) to use.</param>
            <returns>The current (reseted) parse engine.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.Parse">
            <summary>
            Runs the parser over the inserted query.
            </summary>
            <returns>The current parse engine.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.ParseStatement">
            <summary>
            Standard parsing of a statement (ends with ; or }).
            </summary>
            <returns>The finalized statment.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.ParseStatement(System.Char,System.Func{YAMP.ParseEngine,YAMP.YAMPParseError},System.Func{System.Char,YAMP.Statement,System.Boolean})">
            <summary>
            More custom parsing of a statement (ends with a custom termination char).
            </summary>
            <param name="termination">The custom termination character (e.g. ; for the standard case).</param>
            <param name="terminationMissing">Function (to generate an error) that is called if the termination character is not found.</param>
            <param name="handleCharacter">An optional function that is invoked for every character.</param>
            <returns>The finalized statement.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.ParseBlock(YAMP.Statement)">
            <summary>
            Parses a block and adds the block to the current statement.
            </summary>
            <param name="statement">The statement that should get the block.</param>
            <returns>The statement again (allows chaining).</returns>
        </member>
        <member name="M:YAMP.ParseEngine.ParseBlock(YAMP.Statement,YAMP.Operator)">
            <summary>
            Parses a block with a default operator if no operator has been found.
            </summary>
            <param name="statement">The statement that should get the block.</param>
            <param name="defaultOperator">The default operator if no operator has been found.</param>
            <returns>The statement again (allows chaining).</returns>
        </member>
        <member name="M:YAMP.ParseEngine.Replace(System.Int32,System.Char)">
            <summary>
            Replaces a character at a specified index by the given one.
            </summary>
            <param name="index">The index of the character to be replaced.</param>
            <param name="replacement">The character to replace the old one.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.Advance">
            <summary>
            Advances by one character.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.Advance(System.Int32)">
            <summary>
            Advances by the specified amount of characters.
            </summary>
            <param name="shift">The positive or negative shift.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.AdvanceToNextLine">
            <summary>
            Advances to the next line, i.e. the next new line character.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.AdvanceTo(System.String)">
            <summary>
            Advances to a sequence of characters given by string.
            </summary>
            <param name="target">The sequence of characters fo find.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.AdvanceTo(System.Char)">
            <summary>
            Advances to a specified character.
            </summary>
            <param name="target">The character to find.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.AdvanceTo(System.Char[])">
            <summary>
            Advances to a sequence of characters.
            </summary>
            <param name="target">The sequence of characters to find.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.Skip">
            <summary>
            Skips to the next significant character avoiding
            line comments, block comments, whitespaces or new lines.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.SetOffset(System.Int32,System.Int32)">
            <summary>
            Sets an offset of the parser, i.e. sets line and column
            to (different) values.
            </summary>
            <param name="line">The new line value.</param>
            <param name="column">The new column value.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.SetPointer(System.Int32)">
            <summary>
            Sets the character pointer to a new position.
            </summary>
            <param name="newPosition">The new position of the character pointer ptr.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsLetter(System.Char)">
            <summary>
            Determines if the given character is a letter character.
            </summary>
            <param name="ch">The character to be examined.</param>
            <returns>True if the character represents a letter (a-zA-Z).</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsIdentifierStart(System.Char)">
            <summary>
            Determines if the given character is the start of an identifier.
            </summary>
            <param name="ch">The character to be examined.</param>
            <returns>True if the character represents the start of an identifier (a-zA-Z$_).</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsIdentifierPart(System.Char)">
            <summary>
            Determines if the given character is the part of an identifier character.
            </summary>
            <param name="ch">The character to be examined.</param>
            <returns>True if the character represents the part of an identifier (a-zA-Z$_).</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsNumber(System.Char)">
            <summary>
            Determines if the given character is a number character.
            </summary>
            <param name="ch">The character to be examined.</param>
            <returns>True if the character represents a number (0-9).</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsWhiteSpace(System.Char)">
            <summary>
            Determines if the given character is a white space character.
            </summary>
            <param name="ch">The character to be examined.</param>
            <returns>True if the character represents a white space.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsNewLine(System.Char)">
            <summary>
            Determines if the given character is a new line character.
            </summary>
            <param name="ch">The character to be examined.</param>
            <returns>True if the character represents a new line.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsComment(System.Char,System.Char)">
            <summary>
            Determines if the given content is a (block or line) comment.
            </summary>
            <param name="ch1">The leading character to be examined.</param>
            <param name="ch2">The succeeding character to be investigated.</param>
            <returns>True if a line comment has been found.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsLineComment(System.Char,System.Char)">
            <summary>
            Determines if the given content is a line comment.
            </summary>
            <param name="ch1">The leading character to be examined.</param>
            <param name="ch2">The succeeding character to be investigated.</param>
            <returns>True if a line comment has been found.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.IsBlockComment(System.Char,System.Char)">
            <summary>
            Determines if the given content is a block comment.
            </summary>
            <param name="ch1">The leading character to be examined.</param>
            <param name="ch2">The succeeding character to be investigated.</param>
            <returns>True if a block comment has been found.</returns>
        </member>
        <member name="M:YAMP.ParseEngine.ToString">
            <summary>
            Transforms the contained expression blocks into one string.
            </summary>
            <returns>The string representation of the parser content.</returns>
        </member>
        <member name="P:YAMP.ParseEngine.CollectedSymbols">
            <summary>
            Gets the names of all collected (user-defined) symbols.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.Parent">
            <summary>
            Gets the parent parse engine (NULL if topmost) of the current instance.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.ErrorCount">
            <summary>
            Gets the number of errors found during parsing the input.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.Pointer">
            <summary>
            Gets the current character pointer position.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.Query">
            <summary>
            Gets the currently used query context.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.Context">
            <summary>
            Gets the corresponding parse context.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.CanRun">
            <summary>
            Gets the status of the current parse tree. Can the tree be interpreted?
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.IsParsed">
            <summary>
            Gets the status of the parser. Has it been executed?
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.IsTerminated">
            <summary>
            Gets the status of the termination. Has it been terminated properly?
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.IsParsing">
            <summary>
            Gets the status of the parser. Is it currently parsing?
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.CurrentLine">
            <summary>
            Gets the current line of the parser.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.CurrentColumn">
            <summary>
            Gets the current column of the parser.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.HasErrors">
            <summary>
            Gets a value if the parser found errors in the query.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.Errors">
            <summary>
            Gets an enumerable of all the found errors in the query.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.Statements">
            <summary>
            Gets an enumerable of all the found statements in the query.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.LastStatement">
            <summary>
            Gets the last added statement.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.CurrentStatement">
            <summary>
            Gets the statement that is currently created.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.UseKeywords">
            <summary>
            Gets a boolean indicating if scripting (keywords) is (are) enabled for this parser.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.Count">
            <summary>
            Gets the number of statements that have been found in the query.
            </summary>
        </member>
        <member name="P:YAMP.ParseEngine.Characters">
            <summary>
            Gets the characters of the query input.
            </summary>
        </member>
        <member name="T:YAMP.BinaryOperatorMapping">
            <summary>
            Represents the elementary object for binary operator mappings.
            </summary>
        </member>
        <member name="T:YAMP.OperatorMapping">
            <summary>
            Abstract base class for any operator mapping (e.g. binary).
            </summary>
        </member>
        <member name="T:YAMP.Annotation">
            <summary>
            The abstract base class for plot annotations.
            </summary>
        </member>
        <member name="P:YAMP.Annotation.Text">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="P:YAMP.Annotation.X">
            <summary>
            Gets the x coordinate of the annotation.
            </summary>
        </member>
        <member name="P:YAMP.Annotation.Y">
            <summary>
            Gets the y coordinate of the annotation.
            </summary>
        </member>
        <member name="T:YAMP.Deserializer">
            <summary>
            The deserializer class for helping in the serialization process.
            </summary>
        </member>
        <member name="M:YAMP.Deserializer.Create(System.Byte[])">
            <summary>
            Creates a new instance of the deserialization helper.
            </summary>
            <param name="content">The content to deserialize.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.Deserializer.GetBoolean">
            <summary>
            Reads the next bytes as boolean.
            </summary>
            <returns>The boolean.</returns>
        </member>
        <member name="M:YAMP.Deserializer.GetSingle">
            <summary>
            Reads the next bytes as float.
            </summary>
            <returns>The float.</returns>
        </member>
        <member name="M:YAMP.Deserializer.GetLong">
            <summary>
            Reads the next bytes as long.
            </summary>
            <returns>The long.</returns>
        </member>
        <member name="M:YAMP.Deserializer.GetString">
            <summary>
            Reads the next bytes as string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:YAMP.Deserializer.GetScalar">
            <summary>
            Reads the next bytes as scalar (2 doubles).
            </summary>
            <returns>The scalar.</returns>
        </member>
        <member name="M:YAMP.Deserializer.GetDouble">
            <summary>
            Reads the next bytes as double.
            </summary>
            <returns>The double.</returns>
        </member>
        <member name="M:YAMP.Deserializer.GetInt">
            <summary>
            Reads the next bytes as integer.
            </summary>
            <returns>The integer.</returns>
        </member>
        <member name="M:YAMP.Deserializer.GetBytes">
            <summary>
            Reads the next bytes as raw bytes.
            </summary>
            <returns>The binary array.</returns>
        </member>
        <member name="M:YAMP.Deserializer.Dispose">
            <summary>
            Cleans up the mess.
            </summary>
        </member>
        <member name="T:YAMP.DisplayStyle">
            <summary>
            This enumeration contains the available display (ToString) styles.
            </summary>
        </member>
        <member name="F:YAMP.DisplayStyle.Default">
            <summary>
            The default style.
            </summary>
        </member>
        <member name="F:YAMP.DisplayStyle.Scientific">
            <summary>
            The scientific style.
            </summary>
        </member>
        <member name="F:YAMP.DisplayStyle.Engineering">
            <summary>
            The engineering style.
            </summary>
        </member>
        <member name="T:YAMP.Marker">
            <summary>
            This is an enumeration of parse markers.
            </summary>
        </member>
        <member name="T:YAMP.SpecialMatrixFormat">
            <summary>
            Contains an enumeration of various special matrix formats.
            </summary>
        </member>
        <member name="T:YAMP.MatrixIndex">
            <summary>
            Information about a specific matrix index.
            </summary>
        </member>
        <member name="M:YAMP.MatrixIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance and sets the given properties.
            </summary>
            <param name="row">The 1-based row index.</param>
            <param name="column">The 1-based column index.</param>
        </member>
        <member name="P:YAMP.MatrixIndex.Row">
            <summary>
            Gets or sets the 0-based row index.
            </summary>
        </member>
        <member name="P:YAMP.MatrixIndex.Column">
            <summary>
            Gets or sets the 0-based column index.
            </summary>
        </member>
        <member name="T:YAMP.PlotEventArgs">
            <summary>
            Contains information about which variable changed its value into what.
            </summary>
        </member>
        <member name="M:YAMP.PlotEventArgs.#ctor(YAMP.PlotValue,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="value">The PlotValue for the arguments.</param>
            <param name="property">The name of the property.</param>
        </member>
        <member name="P:YAMP.PlotEventArgs.Property">
            <summary>
            Gets the name of the variable that has been changed.
            </summary>
        </member>
        <member name="P:YAMP.PlotEventArgs.Value">
            <summary>
            Gets the new value of the variable.
            </summary>
        </member>
        <member name="T:YAMP.Serializer">
            <summary>
            Helper class for the serialization process.
            </summary>
        </member>
        <member name="M:YAMP.Serializer.Create">
            <summary>
            Creates a new instance of the binary serializer helper.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Serialize(System.String)">
            <summary>
            Serializes a string value.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Serialize(System.Boolean)">
            <summary>
            Serializes a bool value.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Serialize(System.Int32)">
            <summary>
            Serializes an integer value.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Serialize(System.Double)">
            <summary>
            Serializes a double value.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Serialize(System.Single)">
            <summary>
            Serializes a float value.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Serialize(System.Int64)">
            <summary>
            Serializes a long value.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Serialize(YAMP.ScalarValue)">
            <summary>
            Serializes a scalar (2 doubles) value.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Serialize(System.Byte[])">
            <summary>
            Serializes a raw byte array value.
            </summary>
            <param name="content">The value to serialize</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.Serializer.Dispose">
            <summary>
            Cleans up the mess.
            </summary>
        </member>
        <member name="P:YAMP.Serializer.Value">
            <summary>
            The binary value of the serialization.
            </summary>
        </member>
        <member name="T:YAMP.VariableEventArgs">
            <summary>
            Contains information about which variable changed its value into what.
            </summary>
        </member>
        <member name="M:YAMP.VariableEventArgs.#ctor(System.String,YAMP.Value)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="P:YAMP.VariableEventArgs.Name">
            <summary>
            Gets the name of the variable that has been changed.
            </summary>
        </member>
        <member name="P:YAMP.VariableEventArgs.Value">
            <summary>
            Gets the new value of the variable.
            </summary>
        </member>
        <member name="T:YAMP.ReadOnlyDictionary`2">
            <summary>
            A custom ReadOnlyDictionary for obvious reasons.
            </summary>
            <typeparam name="TKey">The key type to use.</typeparam>
            <typeparam name="TValue">The value type to use.</typeparam>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.#ctor">
            <summary>
            Creates a new read only dictionary.
            </summary>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a new read only dictionary from another dictionary.
            </summary>
            <param name="dictionary">The existing dictionary.</param>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Cannot add an entry... Caution: Will give you an exception.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Does the dictionary contain a certain key?
            </summary>
            <param name="key">The key to search for.</param>
            <returns>The search result.</returns>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Cannot remove an entry... Caution: Will give you an exception.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get a value!
            </summary>
            <param name="key">The key for the value.</param>
            <param name="value">The value or default(TValue) if nothing was found.</param>
            <returns>The status of the search.</returns>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Cannot add an entry... Caution: Will give you an exception.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.Clear">
            <summary>
            Cannot clear the dictionary.
            </summary>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Does the dictionary contain a certain key?
            </summary>
            <param name="item">The key value pair to search for.</param>
            <returns>The search result.</returns>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the dictionary to an array of key value pairs.
            </summary>
            <param name="array">Th target to copy to.</param>
            <param name="arrayIndex">The index to start.</param>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Cannot remove an entry... Caution: Will give you an exception.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:YAMP.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator for this dictionary.
            </summary>
            <returns>The IEnumerator.</returns>
        </member>
        <member name="P:YAMP.ReadOnlyDictionary`2.Keys">
            <summary>
            Gives you a collection of keys.
            </summary>
        </member>
        <member name="P:YAMP.ReadOnlyDictionary`2.Values">
            <summary>
            Gives you a collection of values.
            </summary>
        </member>
        <member name="P:YAMP.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets a value of a certain key. Caution: Setting is not possible (Exception).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:YAMP.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of entries in the dictionary.
            </summary>
        </member>
        <member name="P:YAMP.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets the status of the dictionary - YES: it is readonly.
            </summary>
        </member>
        <member name="T:YAMP.FunctionParameters">
            <summary>
            Container for conserving information about parameters.
            </summary>
        </member>
        <member name="M:YAMP.FunctionParameters.#ctor(System.Reflection.ParameterInfo[],System.Reflection.MethodInfo)">
            <summary>
            Creates a new instance of the function parameter holder.
            </summary>
            <param name="parameterInfo">The array of parameter infos.</param>
            <param name="methodInfo">The method info (from reflection).</param>
        </member>
        <member name="P:YAMP.FunctionParameters.OptionalArguments">
            <summary>
            Gets the computed optional arguments.
            </summary>
        </member>
        <member name="P:YAMP.FunctionParameters.ParameterTypes">
            <summary>
            Gets the specified parameter types.
            </summary>
        </member>
        <member name="P:YAMP.FunctionParameters.Length">
            <summary>
            Gets the length of the arguments.
            </summary>
        </member>
        <member name="P:YAMP.FunctionParameters.Weight">
            <summary>
            Gets the computed weight of the arguments.
            </summary>
        </member>
        <member name="P:YAMP.FunctionParameters.MinimumArguments">
            <summary>
            Gets the minimum number of arguments for this function call.
            </summary>
        </member>
        <member name="P:YAMP.FunctionParameters.MaximumArguments">
            <summary>
            Gets the maximum number of arguments for this function call.
            </summary>
        </member>
        <member name="T:YAMP.QueryContext">
            <summary>
            Represents the context that is used for the current input query.
            </summary>
        </member>
        <member name="M:YAMP.QueryContext.#ctor(System.String)">
            <summary>
            Creates a new query context.
            </summary>
            <param name="input">The input to parse</param>
        </member>
        <member name="M:YAMP.QueryContext.#ctor(YAMP.QueryContext)">
            <summary>
            Creates a new (underlying) QueryContext
            </summary>
            <param name="query">The query context to copy</param>
        </member>
        <member name="M:YAMP.QueryContext.#ctor">
            <summary>
            Just a stupid dummy!
            </summary>
        </member>
        <member name="M:YAMP.QueryContext.Dummy(YAMP.ParseContext)">
            <summary>
            Creates a dummy context that just holds the given ParseContext.
            </summary>
            <param name="context">The ParseContext to contain</param>
            <returns>A new (dummy) QueryContext</returns>
        </member>
        <member name="M:YAMP.QueryContext.Interpret(System.Collections.Generic.Dictionary{System.String,YAMP.Value})">
            <summary>
            Begins the interpretation of the current parse tree.
            </summary>
            <param name="values">A dictionary with additional symbols to consider.</param>
        </member>
        <member name="M:YAMP.QueryContext.Stop">
            <summary>
            Stops the current interpretation.
            </summary>
        </member>
        <member name="M:YAMP.QueryContext.ToString">
            <summary>
            Outputs the string representation of the query context.
            </summary>
            <returns>A string variable.</returns>
        </member>
        <member name="P:YAMP.QueryContext.Parent">
            <summary>
            Gets the parent of this query context.
            </summary>
        </member>
        <member name="P:YAMP.QueryContext.Result">
            <summary>
            Gets the result in a string representation.
            </summary>
        </member>
        <member name="P:YAMP.QueryContext.Input">
            <summary>
            Gets or sets the input that is being used by the parser.
            </summary>
        </member>
        <member name="P:YAMP.QueryContext.IsMuted">
            <summary>
            Gets a boolean indicating whether the result should be printed.
            </summary>
        </member>
        <member name="P:YAMP.QueryContext.Output">
            <summary>
            Gets the result of the query.
            </summary>
        </member>
        <member name="P:YAMP.QueryContext.Context">
            <summary>
            Gets the context used for this query.
            </summary>
        </member>
        <member name="P:YAMP.QueryContext.Statements">
            <summary>
            Gets the statements generated for this query.
            </summary>
        </member>
        <member name="P:YAMP.QueryContext.CurrentStatement">
            <summary>
            Gets the currently executed statement.
            </summary>
        </member>
        <member name="P:YAMP.QueryContext.Parser">
            <summary>
            Gets the parser for this query.
            </summary>
        </member>
        <member name="T:YAMP.ConventionExtensions">
            <summary>
            Contains some extensions used to tackle some conventions used in the code.
            </summary>
        </member>
        <member name="M:YAMP.ConventionExtensions.RemoveFunctionConvention(System.String)">
            <summary>
            Removes the function convention from a string.
            </summary>
            <param name="functionName"></param>
            <returns>The string without the word Function.</returns>
        </member>
        <member name="M:YAMP.ConventionExtensions.RemoveValueConvention(System.String)">
            <summary>
            Removes the value convention from a string.
            </summary>
            <param name="valueName"></param>
            <returns>The string without the word Value.</returns>
        </member>
        <member name="M:YAMP.ConventionExtensions.IsArgumentFunction(System.String)">
            <summary>
            Detects if the given function name belongs to an argument function.
            </summary>
            <param name="functionName">The given function name.</param>
            <returns>True if the name is equal to Function, otherwise false.</returns>
        </member>
        <member name="M:YAMP.ConventionExtensions.RemoveExpressionConvention(System.String)">
            <summary>
            Removes the expression convention from a string.
            </summary>
            <param name="expressionName"></param>
            <returns>The string without the word Expression.</returns>
        </member>
        <member name="M:YAMP.ConventionExtensions.RemoveOperatorConvention(System.String)">
            <summary>
            Removes the operator convention from a string.
            </summary>
            <param name="operatorName"></param>
            <returns>The string without the word Operator.</returns>
        </member>
        <member name="T:YAMP.DescriptionAttribute">
            <summary>
            Provides a description attribute to be read by the help method.
            </summary>
        </member>
        <member name="M:YAMP.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Creates a new attribute for storing descriptions.
            </summary>
            <param name="description">The description to store.</param>
        </member>
        <member name="P:YAMP.DescriptionAttribute.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:YAMP.ExampleAttribute">
            <summary>
            Class to enter examples for usage with help.
            </summary>
        </member>
        <member name="M:YAMP.ExampleAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new example attribute with the specified example string.
            </summary>
            <param name="example">The example to store.</param>
            <param name="description">The description to store.</param>
            <param name="file">The status if the file system is manipulated.</param>
        </member>
        <member name="M:YAMP.ExampleAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new example attribute with the specified example string.
            </summary>
            <param name="example">The example to store.</param>
            <param name="description">The description to store.</param>
        </member>
        <member name="M:YAMP.ExampleAttribute.#ctor(System.String)">
            <summary>
            Creates a new example attribute with the specified example string.
            </summary>
            <param name="example">The example to store.</param>
        </member>
        <member name="P:YAMP.ExampleAttribute.IsFile">
            <summary>
            Gets if the example performs an operation on the file system.
            </summary>
        </member>
        <member name="P:YAMP.ExampleAttribute.Example">
            <summary>
            Gets the example.
            </summary>
        </member>
        <member name="P:YAMP.ExampleAttribute.Description">
            <summary>
            Gets the description of the example.
            </summary>
        </member>
        <member name="T:YAMP.BreakableKeyword">
            <summary>
            Represents the abstract base class for any keyword that allows the break keyword
            to be used in an inner scope.
            </summary>
        </member>
        <member name="M:YAMP.BreakableKeyword.Break">
            <summary>
            Breaks the execution of the breakable block.
            </summary>
        </member>
        <member name="T:YAMP.BreakKeyword">
            <summary>
            This is the class responsible for the break keyword. Basic syntax:
            break;
            </summary>
        </member>
        <member name="T:YAMP.DoKeyword">
            <summary>
            The class representing the do keyword for do {...} while(...); loops. Basic syntax:
            do STATEMENT while ( CONDITION) ;
            </summary>
        </member>
        <member name="P:YAMP.DoKeyword.While">
            <summary>
            Gets the associated condition in form of the while keyword.
            </summary>
        </member>
        <member name="T:YAMP.ElseKeyword">
            <summary>
            The else keyword - can (and should) only be instantiated by the if keyword.
            Basic syntax: else STATEMENT
            Can only be used after an IF or ELSE IF
            </summary>
        </member>
        <member name="P:YAMP.ElseKeyword.IsElseIf">
            <summary>
            Gets a boolean indicating if the body is another if-statement.
            </summary>
        </member>
        <member name="P:YAMP.ElseKeyword.ElseIf">
            <summary>
            Gets the if-keyword contained in the body.
            </summary>
        </member>
        <member name="T:YAMP.ForKeyword">
            <summary>
            The for keyword with the corresponding loop construct. Basic syntax:
            for ( INIT ; CONDITION ; END ) STATEMENT
            </summary>
        </member>
        <member name="P:YAMP.ForKeyword.Initialization">
            <summary>
            Gets the initialization statement before the iterations.
            </summary>
        </member>
        <member name="P:YAMP.ForKeyword.Condition">
            <summary>
            Gets the condition statement for each iteration.
            </summary>
        </member>
        <member name="P:YAMP.ForKeyword.End">
            <summary>
            Gets the ending statement of each iteration.
            </summary>
        </member>
        <member name="T:YAMP.FunctionKeyword">
            <summary>
            Represents the syntax for a function keyword. The basic syntax is
            function NAME ( ARGS ) STATEMENT
            </summary>
        </member>
        <member name="M:YAMP.FunctionKeyword.Scan(YAMP.ParseEngine)">
            <summary>
            Scans for a function entry.
            </summary>
            <param name="engine">The current parse engine.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:YAMP.FunctionKeyword.ToCode">
            <summary>
            Transforms the created function expression to YAMP code.
            </summary>
            <returns>The string for creating the expression.</returns>
        </member>
        <member name="P:YAMP.FunctionKeyword.Name">
            <summary>
            Gets the name of the created function.
            </summary>
        </member>
        <member name="P:YAMP.FunctionKeyword.Arguments">
            <summary>
            Gets the name of the arguments of the function.
            </summary>
        </member>
        <member name="T:YAMP.IfKeyword">
            <summary>
            The class for the if keyword. Basic syntax:
            if ( CONDITION ) STATEMENT
            </summary>
        </member>
        <member name="P:YAMP.IfKeyword.Condition">
            <summary>
            Gets the condition statement for each iteration.
            </summary>
        </member>
        <member name="P:YAMP.IfKeyword.Else">
            <summary>
            Gets the else block for the if statement.
            </summary>
        </member>
        <member name="T:YAMP.WhileKeyword">
            <summary>
            The while keyword has its logic defined here. The basic syntax:
            while ( CONDITION ) STATEMENT
            </summary>
        </member>
        <member name="P:YAMP.WhileKeyword.Condition">
            <summary>
            Gets the condition statement for each iteration.
            </summary>
        </member>
        <member name="P:YAMP.WhileKeyword.IsDoWhile">
            <summary>
            Gets the status of the while-loop. Is it a do-while loop?
            </summary>
        </member>
        <member name="T:YAMP.FunctionValue">
            <summary>
            A function value, i.e. a lambda expression or existing function
            wrapped as a value that can be used within YAMP.
            </summary>
        </member>
        <member name="M:YAMP.FunctionValue.#ctor">
            <summary>
            Creates a new (dummy) instance of a FunctionValue.
            </summary>
        </member>
        <member name="M:YAMP.FunctionValue.#ctor(System.Func{YAMP.ParseContext,YAMP.Value,YAMP.Value},System.Boolean)">
            <summary>
            Creates a new instance of a FunctionValue with a delegate argument.
            </summary>
            <param name="f">Delegate to be wrapped in a function</param>
            <param name="standardFunctionBehaviour">indicates if the wrapper
            should include the StandardFunction behaviour, i.e. scalar execution
            for ScalarValues and matrix execution for MatrixValues </param>
        </member>
        <member name="M:YAMP.FunctionValue.#ctor(System.String[],System.String)">
            <summary>
            Creates a new FunctionValue with data to parse.
            </summary>
            <param name="arguments">The list of argument identifiers.</param>
            <param name="body">The string representation of the body.</param>
        </member>
        <member name="M:YAMP.FunctionValue.#ctor(System.String[],YAMP.Expression)">
            <summary>
            Creates a new FunctionValue with a parsed object (lambda expression).
            </summary>
            <param name="arguments">The list of argument identifiers.</param>
            <param name="body">The Expression representation of the body.</param>
        </member>
        <member name="M:YAMP.FunctionValue.#ctor(System.String,System.String[],YAMP.Expression)">
            <summary>
            Creates a new FunctionValue with a parsed named function (function).
            </summary> 
            <param name="name">The name of the function.</param>
            <param name="arguments">The list of argument identifiers.</param>
            <param name="body">The Expression representation of the body.</param>
        </member>
        <member name="M:YAMP.FunctionValue.#ctor(YAMP.IFunction)">
            <summary>
            Creates a new FunctionValue with a given class that contains
            a perform method, i.e. implements the IFunction interface.
            </summary>
            <param name="function">The instance of the class implementing the IFunction interface.</param>
        </member>
        <member name="M:YAMP.FunctionValue.Copy">
            <summary>
            Does not clone the function, but just returns the same function
            again.
            </summary>
            <returns>The original function.</returns>
        </member>
        <member name="M:YAMP.FunctionValue.Perform(YAMP.ParseContext,YAMP.Value)">
            <summary>
            Invokes the given function value.
            </summary>
            <param name="context">The context of the invocation.</param>
            <param name="argument">The argument(s) to use for the invocation.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:YAMP.FunctionValue.ToString">
            <summary>
            Returns a string representation of the function.
            </summary>
            <returns>The string representing the instance.</returns>
        </member>
        <member name="M:YAMP.FunctionValue.Serialize">
            <summary>
            Tries to convert the given instance into bytes.
            </summary>
            <returns>The binary content.</returns>
        </member>
        <member name="M:YAMP.FunctionValue.Deserialize(System.Byte[])">
            <summary>
            Tries to create a new instance from the given bytes.
            </summary>
            <param name="content">The binary content.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="T:YAMP.NumericValue">
            <summary>
            Base class for numeric classes.
            </summary>
        </member>
        <member name="M:YAMP.NumericValue.Clear">
            <summary>
            Clears the contents of the numeric value.
            </summary>
        </member>
        <member name="T:YAMP.BarPlotValue">
            <summary>
            Contains the data for barplots.
            </summary>
        </member>
        <member name="M:YAMP.BarPlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.BarPlotValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Adds (multiple) series in form of a matrix.
            </summary>
            <param name="m">The matrix which contains the values.</param>
        </member>
        <member name="M:YAMP.BarPlotValue.AddSingleSeries(YAMP.MatrixValue)">
            <summary>
            Adds a single series explicitly.
            </summary>
            <param name="vec">The matrix seen as a vector.</param>
        </member>
        <member name="M:YAMP.BarPlotValue.Serialize">
            <summary>
            Converts the given instance to an array of bytes.
            </summary>
            <returns>The binary representation of this instance.</returns>
        </member>
        <member name="M:YAMP.BarPlotValue.Deserialize(System.Byte[])">
            <summary>
            Converts a set of bytes to a new instance.
            </summary>
            <param name="content">The binary representation.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.BarPlotValue.Item(System.Int32)">
            <summary>
            Gets the series at the specified index.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <returns>The series (list of points and properties).</returns>
        </member>
        <member name="P:YAMP.BarPlotValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets a certain point of the specified series.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <param name="point">The 0-based index of the point.</param>
            <returns>The point.</returns>
        </member>
        <member name="T:YAMP.BarPlotValue.BarPoints">
            <summary>
            The representation of one series.
            </summary>
        </member>
        <member name="T:YAMP.Points`1">
            <summary>
            Generic points container for the various plot types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:YAMP.Points`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:YAMP.Points`1.Lines">
            <summary>
            Gets or sets if the points are connected.
            </summary>
        </member>
        <member name="P:YAMP.Points`1.LineWidth">
            <summary>
            Gets or sets the width of the connected line.
            </summary>
        </member>
        <member name="P:YAMP.Points`1.Symbol">
            <summary>
            Gets or sets the symbol for the points.
            </summary>
        </member>
        <member name="P:YAMP.Points`1.ShowLabel">
            <summary>
            Gets or sets the status for visibility of the label.
            </summary>
        </member>
        <member name="P:YAMP.Points`1.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:YAMP.Points`1.Label">
            <summary>
            Gets or sets the label for the series.
            </summary>
        </member>
        <member name="M:YAMP.BarPlotValue.BarPoints.#ctor">
            <summary>
            Creates a new bar series.
            </summary>
        </member>
        <member name="P:YAMP.BarPlotValue.BarPoints.BarWidth">
            <summary>
            Gets or sets the relative width of the bars.
            </summary>
        </member>
        <member name="T:YAMP.ColorPalettes">
            <summary>
            Defines the color palettes that are ready to use.
            </summary>
        </member>
        <member name="F:YAMP.ColorPalettes.Jet">
            <summary>
            Jet colors
            </summary>
        </member>
        <member name="F:YAMP.ColorPalettes.Rainbow">
            <summary>
            Rainbow colors
            </summary>
        </member>
        <member name="F:YAMP.ColorPalettes.Gray">
            <summary>
            Gray colors
            </summary>
        </member>
        <member name="F:YAMP.ColorPalettes.Cool">
            <summary>
            Cool colors
            </summary>
        </member>
        <member name="F:YAMP.ColorPalettes.Hot">
            <summary>
            Hot colors
            </summary>
        </member>
        <member name="F:YAMP.ColorPalettes.BlackWhiteRed">
            <summary>
            Black-White-Red colors
            </summary>
        </member>
        <member name="F:YAMP.ColorPalettes.BlueWhiteRed">
            <summary>
            Blue-White-Red colors
            </summary>
        </member>
        <member name="F:YAMP.ColorPalettes.Hue">
            <summary>
            HUE colors
            </summary>
        </member>
        <member name="T:YAMP.ComplexPlotValue">
            <summary>
            Holds the complexplot data.
            </summary>
        </member>
        <member name="M:YAMP.ComplexPlotValue.#ctor">
            <summary>
            Creates a new complex plot.
            </summary>
        </member>
        <member name="M:YAMP.ComplexPlotValue.SetFunction(YAMP.FunctionValue)">
            <summary>
            Sets the function to use for the complex plot.
            </summary>
            <param name="function">The function to consider.</param>
        </member>
        <member name="M:YAMP.ComplexPlotValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            A complex plot cannot have any points assigned. You have to
            assign a function instead.
            </summary>
            <param name="m">Useless.</param>
        </member>
        <member name="M:YAMP.ComplexPlotValue.Serialize">
            <summary>
            Converts the instance into bytes.
            </summary>
            <returns>The binary content of this instance.</returns>
        </member>
        <member name="M:YAMP.ComplexPlotValue.Deserialize(System.Byte[])">
            <summary>
            Creates a new instance from the given bytes.
            </summary>
            <param name="content">The binary content to create a new instance from.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.ComplexPlotValue.Fz">
            <summary>
            Gets the function to calculate the complex values.
            </summary>
        </member>
        <member name="P:YAMP.ComplexPlotValue.ShowLegend">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="P:YAMP.ComplexPlotValue.LegendBackground">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="P:YAMP.ComplexPlotValue.LegendLineColor">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="P:YAMP.ComplexPlotValue.LegendLineWidth">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="P:YAMP.ComplexPlotValue.LegendPosition">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="T:YAMP.ContourPlotValue">
            <summary>
            Contains the data for contourplot data.
            </summary>
        </member>
        <member name="M:YAMP.ContourPlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.ContourPlotValue.SetLevels(System.Int32)">
            <summary>
            Sets the levels automatically.
            </summary>
            <param name="n">The number of levels to set.</param>
        </member>
        <member name="M:YAMP.ContourPlotValue.SetLevels(YAMP.MatrixValue)">
            <summary>
            Sets the levels to the given values.
            </summary>
            <param name="v">A vector with the various levels.</param>
        </member>
        <member name="M:YAMP.ContourPlotValue.SetLevels(System.Double,System.Double,System.Int32)">
            <summary>
            Sets the n levels within zmin and zmax.
            </summary>
            <param name="zmin">The lowest level.</param>
            <param name="zmax">The highest level.</param>
            <param name="n">The number of levels (at least 2).</param>
        </member>
        <member name="M:YAMP.ContourPlotValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Adds three vectors which represent X, Y and the values.
            </summary>
            <param name="X">A vector with the x values.</param>
            <param name="Y">A vector with the y values.</param>
            <param name="Z">A matrix with the x times y values for z.</param>
        </member>
        <member name="M:YAMP.ContourPlotValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Adds the series in form of a matrix. 
            </summary>
            <param name="M">The matrix which contains the values.</param>
        </member>
        <member name="M:YAMP.ContourPlotValue.Serialize">
            <summary>
            Converts the given instance to an array of bytes.
            </summary>
            <returns>The binary representation of this instance.</returns>
        </member>
        <member name="M:YAMP.ContourPlotValue.Deserialize(System.Byte[])">
            <summary>
            Converts a set of bytes to a new instance.
            </summary>
            <param name="content">The binary representation.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.ContourPlotValue.ShowLevel">
            <summary>
            Gets or sets if the different level labels should be shown.
            </summary>
        </member>
        <member name="P:YAMP.ContourPlotValue.ColorPalette">
            <summary>
            Gets or sets the color palette to use.
            </summary>
        </member>
        <member name="P:YAMP.ContourPlotValue.Levels">
            <summary>
            Gets or sets the various levels to use for the contour lines.
            </summary>
        </member>
        <member name="P:YAMP.ContourPlotValue.Item(System.Int32)">
            <summary>
            Gets the series at the specified index.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <returns>The series (list of points and properties).</returns>
        </member>
        <member name="P:YAMP.ContourPlotValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets a certain point of the specified series.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <param name="point">The 0-based index of the point.</param>
            <returns>The point.</returns>
        </member>
        <member name="T:YAMP.ContourPlotValue.ContourPoint">
            <summary>
            Represents one point in the contour.
            </summary>
        </member>
        <member name="F:YAMP.ContourPlotValue.ContourPoint.X">
            <summary>
            The x value.
            </summary>
        </member>
        <member name="F:YAMP.ContourPlotValue.ContourPoint.Y">
            <summary>
            The y value.
            </summary>
        </member>
        <member name="F:YAMP.ContourPlotValue.ContourPoint.Magnitude">
            <summary>
            The magnitude.
            </summary>
        </member>
        <member name="T:YAMP.ErrorPlotValue">
            <summary>
            Is the type for errorbar plots.
            </summary>
        </member>
        <member name="M:YAMP.ErrorPlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.ErrorPlotValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Adds (multiple) series in form of a matrix. 
            </summary>
            <param name="m">The matrix which contains the values.</param>
        </member>
        <member name="M:YAMP.ErrorPlotValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Adds a single series to the plot.
            </summary>
            <param name="y">The y values.</param>
            <param name="err">The y errors.</param>
        </member>
        <member name="M:YAMP.ErrorPlotValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Adds a single series to the plot.
            </summary>
            <param name="x">The x values.</param>
            <param name="y">The y values.</param>
            <param name="err">The (x and y) errors.</param>
        </member>
        <member name="M:YAMP.ErrorPlotValue.Serialize">
            <summary>
            Converts the given instance to an array of bytes.
            </summary>
            <returns>The binary representation of this instance.</returns>
        </member>
        <member name="M:YAMP.ErrorPlotValue.Deserialize(System.Byte[])">
            <summary>
            Converts a set of bytes to a new instance.
            </summary>
            <param name="content">The binary representation.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.ErrorPlotValue.IsLogX">
            <summary>
            Gets or sets if the x axis should be presented logarithmically.
            </summary>
        </member>
        <member name="P:YAMP.ErrorPlotValue.IsLogY">
            <summary>
            Gets or sets if the y axis should be presented logarithmically.
            </summary>
        </member>
        <member name="P:YAMP.ErrorPlotValue.Item(System.Int32)">
            <summary>
            Gets the series at the specified index.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <returns>The series (list of points and properties).</returns>
        </member>
        <member name="P:YAMP.ErrorPlotValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets a certain point of the specified series.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <param name="point">The 0-based index of the point.</param>
            <returns>The point.</returns>
        </member>
        <member name="T:YAMP.ErrorPlotValue.ErrorPointPair">
            <summary>
            Represents an error point.
            </summary>
        </member>
        <member name="F:YAMP.ErrorPlotValue.ErrorPointPair.X">
            <summary>
            The x value.
            </summary>
        </member>
        <member name="F:YAMP.ErrorPlotValue.ErrorPointPair.Y">
            <summary>
            The y value.
            </summary>
        </member>
        <member name="F:YAMP.ErrorPlotValue.ErrorPointPair.Xerr">
            <summary>
            The x error.
            </summary>
        </member>
        <member name="F:YAMP.ErrorPlotValue.ErrorPointPair.Yerr">
            <summary>
            The y error.
            </summary>
        </member>
        <member name="T:YAMP.LegendPosition">
            <summary>
            Defines the position of the legend of the plot.
            </summary>
        </member>
        <member name="F:YAMP.LegendPosition.TopLeft">
            <summary>
            Top Left
            </summary>
        </member>
        <member name="F:YAMP.LegendPosition.Top">
            <summary>
            Top Center
            </summary>
        </member>
        <member name="F:YAMP.LegendPosition.TopRight">
            <summary>
            Top Right
            </summary>
        </member>
        <member name="F:YAMP.LegendPosition.BottomLeft">
            <summary>
            Bottom Left
            </summary>
        </member>
        <member name="F:YAMP.LegendPosition.Bottom">
            <summary>
            Bottom Center
            </summary>
        </member>
        <member name="F:YAMP.LegendPosition.BottomRight">
            <summary>
            Bottom Right
            </summary>
        </member>
        <member name="F:YAMP.LegendPosition.Left">
            <summary>
            Left Center
            </summary>
        </member>
        <member name="F:YAMP.LegendPosition.Right">
            <summary>
            Right Center
            </summary>
        </member>
        <member name="T:YAMP.Plot2DValue">
            <summary>
            Is the type for basic 2D plotting.
            </summary>
        </member>
        <member name="M:YAMP.Plot2DValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.Plot2DValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Adds points given by a matrix.
            Vector ? x Values will be generated
            Matrix ? Investigates which dimension is bigger and takes the larger one as values, the lighter one as series.
            In a matrix the first series is always excluded and represents the x values.
            </summary>
            <param name="m">The matrix with the (multiple) series.</param>
        </member>
        <member name="M:YAMP.Plot2DValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Adds points with 2 different matrices. If x is a vector then it will
            represent the x values for different series that are present in y.
            Otherwise both matrices are interpreted as "stand-alone" and will
            be just added to the AddPoints that take 1 matrix.
            </summary>
            <param name="x">The first matrix, usually a vector (set of x values).</param>
            <param name="y">The second matrix, usually a set of y series (each series is a set of y values).</param>
        </member>
        <member name="M:YAMP.Plot2DValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue,YAMP.MatrixValue[])">
            <summary>
            Adds points with the same rules as before.
            </summary>
            <param name="x">Usually the x values (if a vector is given).</param>
            <param name="y">Usually a set of y-values.</param>
            <param name="zs">Another set of y-values.</param>
        </member>
        <member name="M:YAMP.Plot2DValue.Serialize">
            <summary>
            Converts the given instance to an array of bytes.
            </summary>
            <returns>The binary representation of this instance.</returns>
        </member>
        <member name="M:YAMP.Plot2DValue.Deserialize(System.Byte[])">
            <summary>
            Converts a set of bytes to a new instance.
            </summary>
            <param name="content">The binary representation.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.Plot2DValue.IsLogX">
            <summary>
            Gets or sets the status of the x-axis - is it logarithmic?
            </summary>
        </member>
        <member name="P:YAMP.Plot2DValue.IsLogY">
            <summary>
            Gets or sets the status of the y-axis - is it logarithmic?
            </summary>
        </member>
        <member name="P:YAMP.Plot2DValue.Item(System.Int32)">
            <summary>
            Gets the series at the specified index.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <returns>The series (list of points and properties).</returns>
        </member>
        <member name="P:YAMP.Plot2DValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets a certain point of the specified series.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <param name="point">The 0-based index of the point.</param>
            <returns>The point.</returns>
        </member>
        <member name="T:YAMP.Plot2DValue.PointPair">
            <summary>
            One point of a series.
            </summary>
        </member>
        <member name="F:YAMP.Plot2DValue.PointPair.X">
            <summary>
            The x value of the point.
            </summary>
        </member>
        <member name="F:YAMP.Plot2DValue.PointPair.Y">
            <summary>
            The y value of the point.
            </summary>
        </member>
        <member name="T:YAMP.Plot3DValue">
            <summary>
            Container for 3D plots.
            </summary>
        </member>
        <member name="M:YAMP.Plot3DValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.Plot3DValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Adds a series with points given in a matrix m.
            </summary>
            <param name="m">The matrix with the points (requires at least an Nx3 or 3xN matrix).</param>
        </member>
        <member name="M:YAMP.Plot3DValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Adds a series with points given by 3 matrices.
            </summary>
            <param name="x">The vector with the x values.</param>
            <param name="y">The vector with the y values.</param>
            <param name="z">The vector with the z values.</param>
        </member>
        <member name="M:YAMP.Plot3DValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue[])">
            <summary>
            Adds points to the plot. Either by falling back to x, y, z (requires 3 vectors),
            or by considering each one to be a matrix (of all the given values).
            </summary>
            <param name="x">Either the x values given in a vector or one series.</param>
            <param name="zs">Either 2 vector or multiple atomic series.</param>
        </member>
        <member name="M:YAMP.Plot3DValue.Serialize">
            <summary>
            Converts the given instance to an array of bytes.
            </summary>
            <returns>The binary representation of this instance.</returns>
        </member>
        <member name="M:YAMP.Plot3DValue.Deserialize(System.Byte[])">
            <summary>
            Converts a set of bytes to a new instance.
            </summary>
            <param name="content">The binary representation.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.Plot3DValue.IsLogX">
            <summary>
            Gets the status of the x-axis - is it logarithmic?
            </summary>
        </member>
        <member name="P:YAMP.Plot3DValue.IsLogY">
            <summary>
            Gets the status of the y-axis - is it logarithmic?
            </summary>
        </member>
        <member name="P:YAMP.Plot3DValue.IsLogZ">
            <summary>
            Gets the status of the z-axis - is it logarithmic?
            </summary>
        </member>
        <member name="P:YAMP.Plot3DValue.Item(System.Int32)">
            <summary>
            Gets the series at the specified index.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <returns>The series (list of points and properties).</returns>
        </member>
        <member name="P:YAMP.Plot3DValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets a certain point of the specified series.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <param name="point">The 0-based index of the point.</param>
            <returns>The point.</returns>
        </member>
        <member name="T:YAMP.Plot3DValue.PointTriple">
            <summary>
            Represents a 3D point.
            </summary>
        </member>
        <member name="F:YAMP.Plot3DValue.PointTriple.X">
            <summary>
            The x value.
            </summary>
        </member>
        <member name="F:YAMP.Plot3DValue.PointTriple.Y">
            <summary>
            The y value.
            </summary>
        </member>
        <member name="F:YAMP.Plot3DValue.PointTriple.Z">
            <summary>
            The z value.
            </summary>
        </member>
        <member name="T:YAMP.PointSymbol">
            <summary>
            Defines the point symbol to use for a plot series.
            </summary>
        </member>
        <member name="F:YAMP.PointSymbol.None">
            <summary>
            No symbol will be shown.
            </summary>
        </member>
        <member name="F:YAMP.PointSymbol.Circle">
            <summary>
            A circle.
            </summary>
        </member>
        <member name="F:YAMP.PointSymbol.Square">
            <summary>
            A square.
            </summary>
        </member>
        <member name="F:YAMP.PointSymbol.Diamond">
            <summary>
            A diamond.
            </summary>
        </member>
        <member name="F:YAMP.PointSymbol.Triangle">
            <summary>
            A triangle.
            </summary>
        </member>
        <member name="F:YAMP.PointSymbol.Cross">
            <summary>
            A cross.
            </summary>
        </member>
        <member name="F:YAMP.PointSymbol.Plus">
            <summary>
            A plus.
            </summary>
        </member>
        <member name="F:YAMP.PointSymbol.Star">
            <summary>
            A star.
            </summary>
        </member>
        <member name="T:YAMP.PolarPlotValue">
            <summary>
            Container for polar plot data.
            </summary>
        </member>
        <member name="M:YAMP.PolarPlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.PolarPlotValue.AddPoints(YAMP.MatrixValue)">
            <summary>
            Adds points given by a matrix.
            Vector ? x Values will be generated
            Matrix ? Investigates which dimension is bigger and takes the larger one as values, the lighter one as series.
            In a matrix the first series is always excluded and represents the x values.
            </summary>
            <param name="m">The matrix with the (multiple) series.</param>
        </member>
        <member name="M:YAMP.PolarPlotValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Adds points with 2 different matrices. If x is a vector then it will
            represent the x values for different series that are present in y.
            Otherwise both matrices are interpreted as "stand-alone" and will
            be just added to the AddPoints that take 1 matrix.
            </summary>
            <param name="x">The first matrix, usually a vector (set of x values).</param>
            <param name="y">The second matrix, usually a set of y series (each series is a set of y values).</param>
        </member>
        <member name="M:YAMP.PolarPlotValue.AddPoints(YAMP.MatrixValue,YAMP.MatrixValue,YAMP.MatrixValue[])">
            <summary>
            Adds points with the same rules as before.
            </summary>
            <param name="x">Usually the x values (if a vector is given).</param>
            <param name="y">Usually a set of y-values.</param>
            <param name="zs">Another set of y-values.</param>
        </member>
        <member name="M:YAMP.PolarPlotValue.Serialize">
            <summary>
            Converts the given instance to an array of bytes.
            </summary>
            <returns>The binary representation of this instance.</returns>
        </member>
        <member name="M:YAMP.PolarPlotValue.Deserialize(System.Byte[])">
            <summary>
            Converts a set of bytes to a new instance.
            </summary>
            <param name="content">The binary representation.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.PolarPlotValue.FractionSymbol">
            <summary>
            Gets or sets the fraction symbol (usually Pi).
            </summary>
        </member>
        <member name="P:YAMP.PolarPlotValue.FractionUnit">
            <summary>
            Gets or sets the fraction unit (again, Pi).
            </summary>
        </member>
        <member name="P:YAMP.PolarPlotValue.Item(System.Int32)">
            <summary>
            Gets the series at the specified index.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <returns>The series (list of points and properties).</returns>
        </member>
        <member name="P:YAMP.PolarPlotValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets a certain point of the specified series.
            </summary>
            <param name="index">The 0-based index of the series.</param>
            <param name="point">The 0-based index of the point.</param>
            <returns>The point.</returns>
        </member>
        <member name="T:YAMP.PolarPlotValue.PointPair">
            <summary>
            Represents one point in the polar plot.
            </summary>
        </member>
        <member name="F:YAMP.PolarPlotValue.PointPair.Angle">
            <summary>
            The angle (x coordinate) of the point.
            </summary>
        </member>
        <member name="F:YAMP.PolarPlotValue.PointPair.Magnitude">
            <summary>
            The magintude (absolute value of the y coordinate) at the point.
            </summary>
        </member>
        <member name="T:YAMP.SubPlotValue">
            <summary>
            A container class for various plots.
            </summary>
        </member>
        <member name="M:YAMP.SubPlotValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.SubPlotValue.AddSubPlot(System.Int32,System.Int32,YAMP.PlotValue,System.Int32,System.Int32)">
            <summary>
            Adds a new subplot to the container.
            </summary>
            <param name="row">The 1-based row index.</param>
            <param name="column">The 1-based column index.</param>
            <param name="plot">The plot to add.</param>
            <param name="rowSpan">The row span.</param>
            <param name="columnSpan">The column span.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.SubPlotValue.Serialize">
            <summary>
            Takes the current instance into binary form.
            </summary>
            <returns>The binary content.</returns>
        </member>
        <member name="M:YAMP.SubPlotValue.Deserialize(System.Byte[])">
            <summary>
            Creates a new instance from a given binary content.
            </summary>
            <param name="content">The binary content.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.SubPlotValue.Perform(YAMP.ParseContext,YAMP.Value)">
            <summary>
            Gets a (sub) plot from this container.
            </summary>
            <param name="context">The context from which this is going on.</param>
            <param name="argument">The indices as arguments.</param>
            <returns>The subplot.</returns>
        </member>
        <member name="M:YAMP.SubPlotValue.Perform(YAMP.ParseContext,YAMP.Value,YAMP.Value)">
            <summary>
            Sets a subplot by specifying some indices and the value.
            </summary>
            <param name="context">The context where this is happening.</param>
            <param name="indices">The indices to set it (1-dim or 2-dim).</param>
            <param name="values">The subplot to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="P:YAMP.SubPlotValue.Count">
            <summary>
            Gets the number of contained plots.
            </summary>
        </member>
        <member name="P:YAMP.SubPlotValue.Rows">
            <summary>
            Gets or sets the number of rows in the subplot.
            </summary>
        </member>
        <member name="P:YAMP.SubPlotValue.Columns">
            <summary>
            Gets or sets the number of columns in the subplot.
            </summary>
        </member>
        <member name="P:YAMP.SubPlotValue.Item(System.Int32)">
            <summary>
            Gets the i-th subplot, where i is the index in the list of subplots.
            </summary>
            <param name="index">The index i, which is greater or equal to 0 and lighter than Count.</param>
            <returns>The subplot.</returns>
        </member>
        <member name="T:YAMP.SubPlotValue.SubPlot">
            <summary>
            Container for subplot information.
            </summary>
        </member>
        <member name="P:YAMP.SubPlotValue.SubPlot.Row">
            <summary>
            Gets or sets the specified row (1-based).
            </summary>
        </member>
        <member name="P:YAMP.SubPlotValue.SubPlot.Column">
            <summary>
            Gets or sets the specified column (1-based).
            </summary>
        </member>
        <member name="P:YAMP.SubPlotValue.SubPlot.RowSpan">
            <summary>
            Gets or sets the rowspan.
            </summary>
        </member>
        <member name="P:YAMP.SubPlotValue.SubPlot.ColumnSpan">
            <summary>
            Gets or sets the columnspan.
            </summary>
        </member>
        <member name="P:YAMP.SubPlotValue.SubPlot.Plot">
            <summary>
            Gets or sets the contained plot value.
            </summary>
        </member>
        <member name="T:YAMP.ScalarValue">
            <summary>
            A scalar value, which is a complex double type.
            </summary>
        </member>
        <member name="M:YAMP.ScalarValue.#ctor">
            <summary>
            Creates a new empty scalar value.
            </summary>
        </member>
        <member name="M:YAMP.ScalarValue.#ctor(System.Boolean)">
            <summary>
            Creates a new scalar value from a boolean, i.e. 1.0 or 0.0.
            </summary>
            <param name="boolean">True for 1.0, False for 0.0.</param>
        </member>
        <member name="M:YAMP.ScalarValue.#ctor(System.Double)">
            <summary>
            Creates a new scalar value which is real.
            </summary>
            <param name="real">The real value.</param>
        </member>
        <member name="M:YAMP.ScalarValue.#ctor(YAMP.ScalarValue)">
            <summary>
            Creates a new scalar value from the given one.
            </summary>
            <param name="value">Copies the contents of the given value.</param>
        </member>
        <member name="M:YAMP.ScalarValue.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new scalar value with the given complex parameters.
            </summary>
            <param name="real">The real part of the complex scalar.</param>
            <param name="imag">The imaginary part of the complex scalar.</param>
        </member>
        <member name="M:YAMP.ScalarValue.GetIntegerOrThrowException(System.String,System.String)">
            <summary>
            Gets the integer value or throws an exception if either the imaginary part is not 0 or the real part is not integer.
            </summary>
            <param name="argumentName">The name of the variable that is requested.</param>
            <param name="functionName">The name of the function where this is requested.</param>
            <returns>The scalar value represented as an integer.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Clear">
            <summary>
            Resets the current value.
            </summary>
        </member>
        <member name="M:YAMP.ScalarValue.Clone">
            <summary>
            Copies the current instance.
            </summary>
            <returns>A deep copy of the current scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Copy">
            <summary>
            Copies the current instance.
            </summary>
            <returns>A copy of the current scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Arg">
            <summary>
            Computes Atan2(imaginary, real), i.e. the angle in the complex (gaussian) plane.
            </summary>
            <returns>The angle of the y-x ratio.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Abs">
            <summary>
            Computes the absolute value of the current scalar.
            </summary>
            <returns>The absolute value, which is a real scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.AbsSquare">
            <summary>
            Computes the absolute value squared of the current scalar.
            </summary>
            <returns>The squared absolute value, which is a real scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Square">
            <summary>
            Computes z x z = z^2.
            </summary>
            <returns>The square of the current instance.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.ComplexSquare">
            <summary>
            Computes z^* x z = |z|^2, which is AbsSquare().
            </summary>
            <returns>The absolute square of the current instance.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Conjugate">
            <summary>
            Conjugates the current scalar value, i.e. switches the sign of the imaginary value.
            </summary>
            <returns>The conjugated scalar value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Pow(YAMP.ScalarValue)">
            <summary>
            Raises the scalar to the specified power.
            </summary>
            <param name="exponent">The exponent for raising the scalar.</param>
            <returns>A new scalar that represents the result of the operation.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Sqrt">
            <summary>
            Takes the square root of the scalar.
            </summary>
            <returns>The square root of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Sign">
            <summary>
            Gives the signum of the scalar.
            </summary>
            <returns>The sign of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Cos">
            <summary>
            Takes the cosine of the scalar.
            </summary>
            <returns>The cosine of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Sin">
            <summary>
            Takes the sine of the scalar.
            </summary>
            <returns>The sine of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Tan">
            <summary>
            Takes the tangent (sin / cos) of the scalar.
            </summary>
            <returns>The tangent of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Cot">
            <summary>
            Takes the co-tangent (cos / sin) of the scalar.
            </summary>
            <returns>The co-tangent of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Arcsin">
            <summary>
            Computes the inverse sine of the scalar (arcsin).
            </summary>
            <returns>The arcsin of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Arccos">
            <summary>
            Computes the inverse cosine of the scalar (arccos).
            </summary>
            <returns>The arccos of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Arctan">
            <summary>
            Computes the inverse tangent of the scalar (arctan).
            </summary>
            <returns>The arctan of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Arccot">
            <summary>
            Computes the inverse cotangent of the scalar (arccot).
            </summary>
            <returns>The arccot of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Arcsec">
            <summary>
            Computes the inverse secant of the scalar (arcsec).
            </summary>
            <returns>The arcsec of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Arccsc">
            <summary>
            Computes the inverse cosecant of the scalar (arccsc).
            </summary>
            <returns>The arccsc of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Exp">
            <summary>
            Takes the exponential of the scalar.
            </summary>
            <returns>The exponential of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Ln">
            <summary>
            Takes the natural logarithm of the scalar.
            </summary>
            <returns>The natural logarithm of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Log">
            <summary>
            Takes the natural logarithm of the scalar.
            </summary>
            <returns>The natural logarithm of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Log(System.Double)">
            <summary>
            Takes the general logarithm of the scalar.
            </summary>
            <param name="basis">The basis to use for the logarithm.</param>
            <returns>The general logarithm (in an arbitrary basis) of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Log10">
            <summary>
            Takes the base-10 logarithm of the scalar.
            </summary>
            <returns>The base-10 logarithm of the value.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Factorial">
            <summary>
            Computes the factorial of the scalar.
            </summary>
            <returns>The factorial of the scalar x!+iy!.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Serialize">
            <summary>
            Transforms the instance into a binary representation.
            </summary>
            <returns>The binary representation.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Deserialize(System.Byte[])">
            <summary>
            Transforms a binary representation into a new instance.
            </summary>
            <param name="content">The binary data.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Equals(System.Object)">
            <summary>
            Is the given object equal to this.
            </summary>
            <param name="obj">The compare object.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.GetHashCode">
            <summary>
            Computes the hashcode of the value inside.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.GetLengthOfString(YAMP.ParseContext)">
            <summary>
            Gets the length of the output in the given parse context.
            </summary>
            <param name="context">The query context to consider.</param>
            <returns>The length of the string representation</returns>
        </member>
        <member name="M:YAMP.ScalarValue.ToString(YAMP.ParseContext,System.Int32)">
            <summary>
            Use this string representation if you have a global exponent like
            everything is already e5 or similar. In this case the values get
            multiplied with e-5 for the output.
            </summary>
            <param name="context">The parse context to use.</param>
            <param name="exponent">The global exponent that is in use.</param>
            <returns>The string representation for this global exponent.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.ToString(YAMP.ParseContext)">
            <summary>
            Uses the standard string representation.
            </summary>
            <param name="context">The context to use.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Addition(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l + r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Addition(YAMP.ScalarValue,System.Double)">
            <summary>
            a + b.
            </summary>
            <param name="a">Left operand</param>
            <param name="b">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Addition(System.Double,YAMP.ScalarValue)">
            <summary>
            b + a.
            </summary>
            <param name="b">Left operand</param>
            <param name="a">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Subtraction(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l - r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Subtraction(YAMP.ScalarValue,System.Double)">
            <summary>
            a - b.
            </summary>
            <param name="a">Left operand</param>
            <param name="b">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Subtraction(System.Double,YAMP.ScalarValue)">
            <summary>
            b - a.
            </summary>
            <param name="b">Left operand</param>
            <param name="a">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Multiply(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l * r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Multiply(System.Double,YAMP.ScalarValue)">
            <summary>
            b * a.
            </summary>
            <param name="b">Left operand</param>
            <param name="a">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_LessThan(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l lighter than r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_GreaterThan(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l greater than r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_LessThanOrEqual(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l ligher or equal than r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_GreaterThanOrEqual(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l greater or equal than r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Equality(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l == r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Equality(YAMP.ScalarValue,System.Double)">
            <summary>
            l == r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Inequality(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l != r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Inequality(YAMP.ScalarValue,System.Double)">
            <summary>
            l != r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Multiply(YAMP.ScalarValue,System.Double)">
            <summary>
            a * b.
            </summary>
            <param name="a">Left operand</param>
            <param name="b">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Modulus(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            a % b.
            </summary>
            <param name="a">Left operand</param>
            <param name="b">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Division(YAMP.ScalarValue,YAMP.ScalarValue)">
            <summary>
            l / r.
            </summary>
            <param name="l">Left operand</param>
            <param name="r">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Division(System.Double,YAMP.ScalarValue)">
            <summary>
            b / a.
            </summary>
            <param name="b">Left operand</param>
            <param name="a">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_Division(YAMP.ScalarValue,System.Double)">
            <summary>
            a / b.
            </summary>
            <param name="a">Left operand</param>
            <param name="b">Right operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.op_UnaryNegation(YAMP.ScalarValue)">
            <summary>
            -a.
            </summary>
            <param name="a">Unary operand</param>
            <returns>The result.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.RegisterOperators">
            <summary>
            Registers all operators that are associated with the scalar.
            </summary>
        </member>
        <member name="M:YAMP.ScalarValue.Add(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar + Scalar
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Subtract(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar - Scalar
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Multiply(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar * Scalar
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Divide(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar / Scalar
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Pow(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar ^ Scalar
            </summary>
            <param name="basis">Must be a scalar.</param>
            <param name="exponent">Must be a scalar.</param>
            <returns>The new scalar.</returns>
        </member>
        <member name="M:YAMP.ScalarValue.Mod(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar % Scalar
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new scalar.</returns>
        </member>
        <member name="P:YAMP.ScalarValue.IsTrue">
            <summary>
            Gets a value if the scalar value is actually on true.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.IsFalse">
            <summary>
            Gets a value if the scalar value is actually on false.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.Re">
            <summary>
            Gets or sets the real part of the scalar.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.Im">
            <summary>
            Gets or sets the imaginary part of the scalar.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.Exponent">
            <summary>
            Gets the maximum exponent of the current scalar.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.IntValue">
            <summary>
            Gets the integer part of the real contribution.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.ImaginaryIntValue">
            <summary>
            Gets the integer part of the imaginary contribution.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.Value">
            <summary>
            Gets or sets the real part of the scalar.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.ImaginaryValue">
            <summary>
            Gets or sets the imaginary part of the scalar.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.IsInt">
            <summary>
            Gets a boolean if the number is a real integer.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.IsPrime">
            <summary>
            Gets a boolean if the number is real and a prime number.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.IsReal">
            <summary>
            Gets a boolean if the number is real (imaginary part zero).
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.IsComplex">
            <summary>
            Gets a boolean if the number if complex (imaginary part not zero).
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.IsZero">
            <summary>
            Gets a boolean if the number is exactly zero (real and imaginary part).
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.I">
            <summary>
            Gets the imaginary unit, which is just i.
            Real: 0, Imaginary: 1
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.One">
            <summary>
            Gets the identity, which is just 1.
            Real: 1, Imaginary: 0
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.Zero">
            <summary>
            Gets the neutral element of addition, which is zero.
            Real: 0, Imaginary: 0
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.True">
            <summary>
            Gets the constant for true.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.False">
            <summary>
            Gets the constant for false.
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.RealInfinity">
            <summary>
            Gets the a value that is positive infinity on the real axis.
            Real: pos. infinity, Imaginary: 0
            </summary>
        </member>
        <member name="P:YAMP.ScalarValue.ImaginaryInfinity">
            <summary>
            Gets the a value that is positive infinity on the imgainary axis.
            Real: 0, Imaginary: pos. infinity
            </summary>
        </member>
        <member name="T:YAMP.SymbolExpression">
            <summary>
            Class for scanning and building symbol expressions
            </summary>
        </member>
        <member name="P:YAMP.SymbolExpression.SymbolName">
            <summary>
            Gets the name of the found symbol.
            </summary>
        </member>
        <member name="T:YAMP.NumberExpression">
            <summary>
            This class evaluates and creates number 012345 expressions.
            </summary>
        </member>
        <member name="T:YAMP.PlusOperator">
            <summary>
            The class for the standard + operator.
            </summary>
        </member>
        <member name="T:YAMP.Elements">
            <summary>
            Provides internal access to the elements and handles the element registration and variable assignment.
            </summary>
        </member>
        <member name="M:YAMP.Elements.RegisterAssembly(YAMP.ParseContext,System.Reflection.Assembly)">
            <summary>
            Registers the IFunction, IConstant and IRegisterToken token classes at the specified context.
            </summary>
            <param name="context">
            The context where the IFunction and IConstant instances will be placed.
            </param>
            <param name="assembly">
            The assembly to load.
            </param>
            <returns>The ID for the assembly.</returns>
        </member>
        <member name="M:YAMP.Elements.RemoveAssembly(System.Int32)">
            <summary>
            Removes a previously added assembly.
            </summary>
            <param name="pluginID">The id of the plugin to remove.</param>
        </member>
        <member name="M:YAMP.Elements.AddOperator(System.String,YAMP.Operator)">
            <summary>
            Adds an operator to the dictionary.
            </summary>
            <param name="pattern">The operator pattern, i.e. += for add and assign.</param>
            <param name="op">The instance of the operator.</param>
        </member>
        <member name="M:YAMP.Elements.AddExpression(YAMP.Expression)">
            <summary>
            Adds an expression to the list of expressions.
            </summary>
            <param name="exp">The instance of the expression.</param>
        </member>
        <member name="M:YAMP.Elements.AddKeyword(System.String,YAMP.Keyword)">
            <summary>
            Adds a keyword to the dictionary.
            </summary>
            <param name="pattern">The exact keyword pattern, i.e. for for the for-loop.</param>
            <param name="keyword">The instance of the keyword.</param>
        </member>
        <member name="M:YAMP.Elements.FindKeywordExpression(System.String,YAMP.ParseEngine)">
            <summary>
            Searches for the given keyword in the list of available keywords. Creates a class if the keyword is found.
            </summary>
            <param name="keyword">The keyword to look for.</param>
            <param name="engine">The engine to use.</param>
            <returns>Keyword that matches the given keyword.</returns>
        </member>
        <member name="M:YAMP.Elements.FindKeywordExpression``1">
            <summary>
            Finds the exact keyword by its type.
            </summary>
            <typeparam name="T">The type of the keyword.</typeparam>
            <returns>The keyword or null.</returns>
        </member>
        <member name="M:YAMP.Elements.FindExpression(YAMP.ParseEngine)">
            <summary>
            Finds the closest matching expression.
            </summary>
            <param name="engine">The engine to parse the query.</param>
            <returns>Expression that matches the current characters.</returns>
        </member>
        <member name="M:YAMP.Elements.FindExpression``1">
            <summary>
            Finds the exact expression by its type.
            </summary>
            <typeparam name="T">The type of the expression.</typeparam>
            <returns>The expression or null.</returns>
        </member>
        <member name="M:YAMP.Elements.FindOperator(YAMP.ParseEngine)">
            <summary>
            Finds the closest matching operator (all except left unary).
            </summary>
            <param name="engine">The engine to parse the query.</param>
            <returns>Operator that matches the current characters.</returns>
        </member>
        <member name="M:YAMP.Elements.FindLeftUnaryOperator(YAMP.ParseEngine)">
            <summary>
            Finds the closest matching left unary operator.
            </summary>
            <param name="engine">The engine to parse the query.</param>
            <returns>Operator that matches the current characters.</returns>
        </member>
        <member name="M:YAMP.Elements.FindOperator``1">
            <summary>
            Finds the exact operator by its type.
            </summary>
            <typeparam name="T">The type of the operator.</typeparam>
            <returns>The operator or null.</returns>
        </member>
        <member name="P:YAMP.Elements.Keywords">
            <summary>
            Gets the list of possible keywords.
            </summary>
        </member>
        <member name="T:YAMP.MultiplyOperator">
            <summary>
            The class for the standard multiply operator.
            </summary>
        </member>
        <member name="T:YAMP.PowerOperator">
            <summary>
            This class contains the construction plan for a power operator.
            </summary>
        </member>
        <member name="T:YAMP.MinusOperator">
            <summary>
            The usual - operator.
            </summary>
        </member>
        <member name="T:YAMP.AbsExpression">
            <summary>
            The absolute expression |...| which returns the absolute value
            of the evaluated value inside.
            </summary>
        </member>
        <member name="T:YAMP.FactorialOperator">
            <summary>
            This is the factorial operator !.
            </summary>
        </member>
        <member name="T:YAMP.FunctionDelegate">
            <summary>
            This function delegate could be used by any developer to set simply
            functions without writing a special class for them.
            </summary>
            <param name="value">The value to pass as parameter.</param>
            <returns>The result of the function call.</returns>
        </member>
        <member name="T:YAMP.MatrixValue">
            <summary>
            The class for representing a matrix value.
            </summary>
        </member>
        <member name="M:YAMP.MatrixValue.#ctor">
            <summary>
            Constructs a new matrix.
            </summary>
        </member>
        <member name="M:YAMP.MatrixValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new matrix with the given dimension.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="cols">The number of columns.</param>
        </member>
        <member name="M:YAMP.MatrixValue.#ctor(System.Double[][],System.Int32,System.Int32)">
            <summary>
            Constructs a new matrix based on the jagged double array.
            </summary>
            <param name="values">The values to use.</param>
            <param name="rows">The number of rows in the new matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
        </member>
        <member name="M:YAMP.MatrixValue.#ctor(YAMP.ScalarValue[][],System.Int32,System.Int32)">
            <summary>
            Constructs a new matrix based on the jagged double array.
            </summary>
            <param name="values">The values to use.</param>
            <param name="rows">The number of rows in the new matrix.</param>
            <param name="cols">The number of columns in the matrix.</param>
        </member>
        <member name="M:YAMP.MatrixValue.#ctor(System.Double[0:,0:])">
            <summary>
            Constructs a new matrix based on the given two dimensional array.
            </summary>
            <param name="values">The values which set the dimensions and starting values of the matrix.</param>
        </member>
        <member name="M:YAMP.MatrixValue.#ctor(System.Double[])">
            <summary>
            Constructs a new (column) vector based on the given double array.
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:YAMP.MatrixValue.#ctor(System.Int32,System.Int32,YAMP.ScalarValue)">
            <summary>
            Constructs a new matrix with the given dimension and sets each entry to the given value.
            </summary>
            <param name="rows"></param>
            <param name="cols"></param>
            <param name="filling"></param>
        </member>
        <member name="M:YAMP.MatrixValue.#ctor(YAMP.ScalarValue[],System.Int32,System.Int32)">
            <summary>
            Constructs a new matrix from an array of scalars with the given rows and columns (columns first).
            </summary>
            <param name="array">The 1-dim. array with values (will be referenced).</param>
            <param name="rows">The number of rows.</param>
            <param name="cols">The number of columns.</param>
        </member>
        <member name="M:YAMP.MatrixValue.Create(YAMP.Value)">
            <summary>
            Creates a new matrix with the help of a specified value.
            </summary>
            <param name="value">The value to initialize the matrix with.</param>
            <returns>A matrix containing the given value.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.One(System.Int32)">
            <summary>
            Creates a new identity matrix of the given dimension.
            </summary>
            <param name="dimension">The rank of the identity matrix.</param>
            <returns>A new identity matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.One(System.Int32,System.Int32)">
            <summary>
            Creates a new identity matrix of the given dimension.
            </summary>
            <param name="rows">The number of rows of the identity matrix.</param>
            <param name="columns">The number of columns of the identity matrix.</param>
            <returns>A new identity matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Ones(System.Int32,System.Int32)">
            <summary>
            Creates a matrix containing only ones.
            </summary>
            <param name="rows">The number of rows in the new matrix.</param>
            <param name="cols">The number of columns in the new matrix.</param>
            <returns>A new matrix containing only ones.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Serialize">
            <summary>
            Serializes the current instance.
            </summary>
            <returns>The binary content of the current instance.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Deserialize(System.Byte[])">
            <summary>
            Creates a new matrix instance from the given content.
            </summary>
            <param name="content">The binary content.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Clear">
            <summary>
            Clears all entries.
            </summary>
        </member>
        <member name="M:YAMP.MatrixValue.Randomize">
            <summary>
            Goes over all rows and columns and randomizes the values.
            </summary>
        </member>
        <member name="M:YAMP.MatrixValue.AddColumn(YAMP.Value)">
            <summary>
            Adds a column specified by the type of the value to
            add-in. If it is a scalar value, then it is quite simple.
            For a matrix the geometry is important.
            </summary>
            <param name="value">The value to add in another column.</param>
            <returns>The new matrix with the added column.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.AddRow(YAMP.Value)">
            <summary>
            Creates a new matrix with another row. The row is
            either simply a number (in this case the value is 
            just inserted) or a matrix (then the geometry is
            important).
            </summary>
            <param name="value">The value to append as a row.</param>
            <returns>The new matrix with the added row.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.ForEach(System.Func{YAMP.ScalarValue,YAMP.ScalarValue})">
            <summary>
            Performs the operation f on each element of the matrix, creating a new matrix
            B where each entry is given by B_jk = f(A_jk).
            </summary>
            <param name="f">The function to use.</param>
            <returns>The created matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.VectorSort">
            <summary>
            Sorts the values of the matrix and outputs the values in a
            new vector.
            </summary>
            <returns>The matrix instance holding the sorted values as a vector.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Copy">
            <summary>
            Creates a deep copy of the matrix.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Clone">
            <summary>
            Creates a deep copy of the matrix.
            </summary>
            <returns>A clone of the current instance.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Max">
            <summary>
            Gets the index for the maximum entry in the matrix.
            </summary>
            <returns>The index of the maximum entry.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Min">
            <summary>
            Gets the index for the minimum entry in the matrix.
            </summary>
            <returns>The index of the minimum entry.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.DeleteColumns(System.Int32,System.Int32)">
            <summary>
            Deletes the specified number of columns of the matrix.
            </summary>
            <param name="index">The column index to start (1-based).</param>
            <param name="count">The number of columns to remove.</param>
        </member>
        <member name="M:YAMP.MatrixValue.DeleteRows(System.Int32,System.Int32)">
            <summary>
            Deletes the specified number of rows of the matrix.
            </summary>
            <param name="index">The row index to start (1-based).</param>
            <param name="count">The number of rows to remove.</param>
        </member>
        <member name="M:YAMP.MatrixValue.ComputeLargestStringContent(YAMP.ParseContext)">
            <summary>
            Gets the maximum length of any cell of the matrix by considering the given context.
            </summary>
            <param name="context">The parse context which holds the state information.</param>
            <returns>The length of the string in characters.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.ToString(YAMP.ParseContext)">
            <summary>
            Creates a standard string representation of the matrix.
            </summary>
            <param name="context">The parse content.</param>
            <returns>The string with the matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.ToString(YAMP.ParseContext,System.Int32)">
            <summary>
            Creates a standard string representation of the matrix.
            </summary>
            <param name="context">The parse content.</param>
            <param name="exponent">The global exponent that is in use.</param>
            <returns>The string with the matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.ToArray">
            <summary>
            Copies the internal scalar values to a 1-dim. complex array.
            </summary>
        </member>
        <member name="M:YAMP.MatrixValue.Inverse">
            <summary>
            Computes the inverse (if it exists).
            </summary>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Adjungate">
            <summary>
            Computes the adjungated (transposed + c.c.) matrix.
            </summary>
            <returns>The adjungated matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Transpose">
            <summary>
            Computes the transposed matrix.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Trace">
            <summary>
            Computes the trace (sum over all elements on the diagonal) of the matrix.
            </summary>
            <returns>The value of the computation.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Det">
            <summary>
            Computes the determinant of the matrix.
            </summary>
            <returns>The value of the determinant.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.OneNorm">
            <summary>
            Computes the 1-norm of the matrix.
            </summary>
            <returns>||M||<sub>1</sub></returns>
            <remarks>
            <para>The 1-norm of a matrix is the largest column sum.</para>
            </remarks>
        </member>
        <member name="M:YAMP.MatrixValue.InfinityNorm">
            <summary>
            Computes the &#x221E;-norm of the matrix.
            </summary>
            <returns>||M||<sub>&#x221E;</sub></returns>
            <remarks>
            <para>The &#x221E;-norm of a matrix is the largest row sum.</para>
            </remarks>
        </member>
        <member name="M:YAMP.MatrixValue.FrobeniusNorm">
            <summary>
            Computes the Frobenius-norm of the matrix.
            </summary>
            <returns>||M||<sub>F</sub></returns>
            <remarks>
            <para>The Frobenius-norm of a matrix the square root of the sum of the squares
            of all the elements. In the case of a row or column vector, this reduces
            to the Euclidean vector norm.</para>
            </remarks>
        </member>
        <member name="M:YAMP.MatrixValue.GetHashCode">
            <summary>
            Gives a first hint if two matrices can be equivalent.
            </summary>
            <returns>The computed integer value.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Equals(System.Object)">
            <summary>
            Takes a close look if two matrices are equivalent.
            </summary>
            <param name="obj">The other matrix (otherwise it is false).</param>
            <returns>A boolean indicating the status.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetRealVector(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a real vector of a submatrix.
            </summary>
            <param name="yoffset">The offset in rows.</param>
            <param name="ylength">The length in rows.</param>
            <param name="xoffset">The offset in columns.</param>
            <param name="xlength">The length in columns.</param>
            <returns>The double array (real vector).</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetRealVector">
            <summary>
            Gets a real vector of the complete matrix.
            </summary>
            <returns>A double array (real vector).</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetRealMatrix">
            <summary>
            Gets a real matrix of the complete matrix.
            </summary>
            <returns>A jagged 2D array.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetComplexMatrix">
            <summary>
            Gets a real matrix of the complete matrix.
            </summary>
            <returns>A jagged 2D array.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a sub matrix of the given instance.
            </summary>
            <param name="yoffset">Vertical offset in rows.</param>
            <param name="yfinal">Final row-index.</param>
            <param name="xoffset">Horizontal offset in columns.</param>
            <param name="xfinal">Final column-index.</param>
            <returns>The new instance with the corresponding entries.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetSubMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a sub matrix of the given instance.
            </summary>
            <param name="y">Row-indices to consider.</param>
            <param name="xoffset">Horizontal offset in columns.</param>
            <param name="xfinal">Final column-index.</param>
            <returns>The new instance with the corresponding entries.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetRowVector(System.Int32)">
            <summary>
            Gets the j-th row vector, i.e. a vector which is spanned over all columns of one row.
            </summary>
            <param name="j">The index of the row to get the vector from.</param>
            <returns>The extracted row vector.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.SetRowVector(System.Int32,YAMP.MatrixValue)">
            <summary>
            Sets the j-th row vector to be of the given matrix.
            </summary>
            <param name="j">The index of the row to set the vector to.</param>
            <param name="m">The matrix with values to set the j-th row to.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetColumnVector(System.Int32)">
            <summary>
            Gets the i-th column vector, i.e. a vector which is spanned over all rows of one column.
            </summary>
            <param name="i">The index of the column to get the vector from.</param>
            <returns>The extracted column vector.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.SetColumnVector(System.Int32,YAMP.MatrixValue)">
            <summary>
            Sets the i-th column vector to be of the given matrix.
            </summary>
            <param name="i">The index of the column to set the vector to.</param>
            <param name="m">The matrix with values to set the i-th column to.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Abs">
            <summary>
            Computes the L2-Norm of the matrix (seen as a vector).
            </summary>
            <returns>Returns a scalar value that is the square root of the absolute squared values.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Sum">
            <summary>
            Computes the sum of all entries.
            </summary>
            <returns>Returns the sum of all entries.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Dot(YAMP.MatrixValue)">
            <summary>
            Produces a dot product of the given instance
            (seen as a vector) with another vector.
            </summary>
            <param name="w">The second operand of the dot-product.</param>
            <returns>The resulting scalar.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.ComplexDot(YAMP.MatrixValue)">
            <summary>
            Produces a complex dot (this operand is c.c.) product of the
            given instance (seen as a vector) with another vector.
            </summary>
            <param name="w">The second operand of the complex dot-product.</param>
            <returns>The resulting scalar.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.ContainsIndex(YAMP.MatrixIndex)">
            <summary>
            Does the matrix contain this index? If not then
            the value is zero.
            </summary>
            <param name="index">The matrix-index (row, column).</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetIndex(System.Int32)">
            <summary>
            Gets the matrix-index (row, column) of the 1-based 1-dim.
            index i.
            </summary>
            <param name="i">The 1-based index. The i-th element is requested.</param>
            <returns>The mapping of i-th entry to (j, k)-th element (j = row, k = column).</returns>
        </member>
        <member name="M:YAMP.MatrixValue.GetIndex(YAMP.MatrixIndex)">
            <summary>
            Gets the entry of the specified matrix-index entry
            in the dictionary. Please check if the element
            is in the dictionary anyway (ContainsIndex).
            </summary>
            <param name="index">The matrix-index (row, column).</param>
            <returns>The entry at the specified index.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_Multiply(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Multiplication.
            </summary>
            <param name="x">Matrix A</param>
            <param name="y">Matrix B</param>
            <returns>A * B</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_Multiply(YAMP.ScalarValue,YAMP.MatrixValue)">
            <summary>
            Multiplication.
            </summary>
            <param name="s">Scalar s</param>
            <param name="M">Matrix M</param>
            <returns>s * M</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_Division(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Division.
            </summary>
            <param name="l">Matrix l</param>
            <param name="r">Matrix r</param>
            <returns>l / r</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_Division(YAMP.MatrixValue,YAMP.ScalarValue)">
            <summary>
            Division.
            </summary>
            <param name="l">Matrix l</param>
            <param name="r">Scalar r</param>
            <returns>l / r</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_Subtraction(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Subtraction.
            </summary>
            <param name="l">Matrix l</param>
            <param name="r">Matrix r</param>
            <returns>l - r</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_Addition(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Addition.
            </summary>
            <param name="l">Matrix l</param>
            <param name="r">Matrix r</param>
            <returns>l + r</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_Equality(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Equality.
            </summary>
            <param name="l">Matrix l</param>
            <param name="r">Matrix r</param>
            <returns>l == r</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_Inequality(YAMP.MatrixValue,YAMP.MatrixValue)">
            <summary>
            Inequality.
            </summary>
            <param name="l">Matrix l</param>
            <param name="r">Matrix r</param>
            <returns>l != r</returns>
        </member>
        <member name="M:YAMP.MatrixValue.op_UnaryNegation(YAMP.MatrixValue)">
            <summary>
            Unary minus.
            </summary>
            <param name="m">Matrix m</param>
            <returns>l - r</returns>
        </member>
        <member name="M:YAMP.MatrixValue.RegisterOperators">
            <summary>
            Registers all operators that are associated with the matrix.
            </summary>
        </member>
        <member name="M:YAMP.MatrixValue.AddMM(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix + Matrix
            </summary>
            <param name="left">Must be a matrix.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.AddSM(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar + Matrix
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.AddMS(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix + Scalar
            </summary>
            <param name="left">Must be a matr.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.SubtractMM(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix - Matrix
            </summary>
            <param name="left">Must be a matrix.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.SubtractMS(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix - Scalar
            </summary>
            <param name="left">Must be a matrix.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.SubtractSM(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar - Matrix
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.MultiplyMM(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix * Matrix
            </summary>
            <param name="left">Must be a matrix.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.MultiplyMS(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix * Scalar
            </summary>
            <param name="left">Must be a matr.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.MultiplySM(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar * Matrix
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.PowMS(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix ^ Scalar
            </summary>
            <param name="basis">Must be a matr.</param>
            <param name="exponent">Must be a scalar.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.PowSM(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar ^ Matrix
            </summary>
            <param name="basis">Must be a scalar.</param>
            <param name="exponent">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.DivideMM(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix / Matrix
            </summary>
            <param name="left">Must be a matrix.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.DivideMS(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix / Scalar
            </summary>
            <param name="left">Must be a matr.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.DivideSM(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar / Matrix
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.ModuloMS(YAMP.Value,YAMP.Value)">
            <summary>
            Matrix % Scalar
            </summary>
            <param name="left">Must be a matr.</param>
            <param name="right">Must be a scalar.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.ModuloSM(YAMP.Value,YAMP.Value)">
            <summary>
            Scalar % Matrix
            </summary>
            <param name="left">Must be a scalar.</param>
            <param name="right">Must be a matrix.</param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Perform(YAMP.ParseContext,YAMP.Value,YAMP.Value)">
            <summary>
            Method used by YAMP to set values in a matrix.
            </summary>
            <param name="context">The context where this is happening.</param>
            <param name="argument">The indices (1-dim or 2-dim).</param>
            <param name="values">The value(s) to set.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.MatrixValue.Perform(YAMP.ParseContext,YAMP.Value)">
            <summary>
            The method used by YAMP to get values from a matrix.
            </summary>
            <param name="context">The context where this is happening.</param>
            <param name="argument">The 1-dim or 2-dim indices.</param>
            <returns>The values that have been requested.</returns>
        </member>
        <member name="P:YAMP.MatrixValue.HasElements">
            <summary>
            Gets if the matrix has any non-zero elements.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.HasNoZeros">
            <summary>
            Gets if the matrix has only non-zero elements.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.IsDense">
            <summary>
            Gets the status of the matrix - is it dense?
            Def. of dense: # of values \neq 0 greater 1.5 * \sqrt length.
            Example: Rows = 10, Columns = 10, i.e. more than 15 elements = dense.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.IsScalar">
            <summary>
            Gets a boolean if the matrix is only 1x1.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.IsVector">
            <summary>
            Gets a boolean if the matrix is only a row (rows = 1) or column (columns = 1) vector.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.DimensionX">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.DimensionY">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.Columns">
            <summary>
            Gets the number of columns (alias for DimensionX).
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.Rows">
            <summary>
            Gets the number of rows (alias for DimensionY).
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.Length">
            <summary>
            Gets the length of the matrix, i.e. rows * columns.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.IsSymmetric">
            <summary>
            Gets a value if the matrix is symmetric, i.e. M_ij = M_ji
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.IsComplex">
            <summary>
            Gets a boolean if the matrix has any complex (im != 0.0) entries.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.Exponent">
            <summary>
            Gets the maximum exponent used by values within the matrix.
            </summary>
        </member>
        <member name="P:YAMP.MatrixValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets the element of the j-th row and i-th column.
            </summary>
            <param name="j">The 1-based row index.</param>
            <param name="i">The 1-based column index.</param>
            <returns>The entry of the specified row and column.</returns>
        </member>
        <member name="P:YAMP.MatrixValue.Item(System.Int32)">
            <summary>
            Gets or sets the i-th element of the matrix (counted rows-first).
            </summary>
            <param name="i">The 1-based index.</param>
            <returns>The entry i = n * rows + j * columns.</returns>
        </member>
        <member name="T:YAMP.TransposeOperator">
            <summary>
            Represents a transpose operator (in analogy to the adjungate operator).
            </summary>
        </member>
        <member name="T:YAMP.SpecialExpression">
            <summary>
            This is the class that represents some special expressions (like :).
            </summary>
        </member>
        <member name="T:YAMP.StringValue">
            <summary>
            The class for representing a string value.
            </summary>
        </member>
        <member name="M:YAMP.StringValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.StringValue.#ctor(System.String)">
            <summary>
            Creates a new instance and sets the value.
            </summary>
            <param name="value">The string where this value is based on.</param>
        </member>
        <member name="M:YAMP.StringValue.#ctor(System.Char[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="str">The given character array.</param>
        </member>
        <member name="M:YAMP.StringValue.RegisterOperators">
            <summary>
            Registers the allowed operations.
            </summary>
        </member>
        <member name="M:YAMP.StringValue.Add(YAMP.Value,YAMP.Value)">
            <summary>
            Performs the addition str + x or x + str.
            </summary>
            <param name="left">An arbitrary value.</param>
            <param name="right">Another arbitrary value.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:YAMP.StringValue.Copy">
            <summary>
            Returns a copy of this string value instance.
            </summary>
            <returns>The cloned string value.</returns>
        </member>
        <member name="M:YAMP.StringValue.Serialize">
            <summary>
            Converts the given value into binary data.
            </summary>
            <returns>The bytes array containing the data.</returns>
        </member>
        <member name="M:YAMP.StringValue.Deserialize(System.Byte[])">
            <summary>
            Creates a new string value from the binary content.
            </summary>
            <param name="content">The data which contains the content.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.StringValue.op_Explicit(YAMP.StringValue)~YAMP.ScalarValue">
            <summary>
            Explicit conversation from a string to a scalar.
            </summary>
            <param name="value">The stringvalue that will be casted.</param>
            <returns>The scalar with Re = sum over all characters and Im = length of the string.</returns>
        </member>
        <member name="M:YAMP.StringValue.ToString(YAMP.ParseContext)">
            <summary>
            Returns the string content of this instance.
            </summary>
            <param name="context">The context of the invocation.</param>
            <returns>The value of the string.</returns>
        </member>
        <member name="M:YAMP.StringValue.Perform(YAMP.ParseContext,YAMP.Value)">
            <summary>
            If invoked like a function the function reacts like this.
            </summary>
            <param name="context">The context of invocation.</param>
            <param name="argument">The argument(s) that have been given.</param>
            <returns>The subset of the string.</returns>
        </member>
        <member name="P:YAMP.StringValue.Value">
            <summary>
            Gets the string value.
            </summary>
        </member>
        <member name="P:YAMP.StringValue.Length">
            <summary>
            Gets the length of string value.
            </summary>
        </member>
        <member name="P:YAMP.StringValue.Lines">
            <summary>
            Gets the number of lines in the string value.
            </summary>
        </member>
        <member name="P:YAMP.StringValue.Item(System.Int32)">
            <summary>
            Gets the 1-based character of the string.
            </summary>
            <param name="index">The 1-based character (1 == first character) index.</param>
            <returns>The character at the position.</returns>
        </member>
        <member name="T:YAMP.StringExpression">
            <summary>
            Presents the class for string expressions "...".
            </summary>
        </member>
        <member name="P:YAMP.StringExpression.IsLiteral">
            <summary>
            Gets a value if the string literal (@) was used.
            </summary>
        </member>
        <member name="T:YAMP.RangeOperator">
            <summary>
            This is the class for the range operator : - this one is also
            available as a stand-alone expression.
            </summary>
        </member>
        <member name="T:YAMP.RangeValue">
            <summary>
            A special kind of matrix which is a range (vector).
            </summary>
        </member>
        <member name="M:YAMP.RangeValue.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new range value with the specified steps.
            </summary>
            <param name="start">The starting value.</param>
            <param name="end">The ending value.</param>
            <param name="step">The step value.</param>
        </member>
        <member name="M:YAMP.RangeValue.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new range value from some point to the end of the matrix.
            </summary>
            <param name="start">The starting value.</param>
            <param name="step">The step value.</param>
        </member>
        <member name="M:YAMP.RangeValue.#ctor">
            <summary>
            Standard operator - Start at 1, Step 1 and till the end of the matrix.
            </summary>
        </member>
        <member name="M:YAMP.RangeValue.Clone">
            <summary>
            Clones the given range.
            </summary>
            <returns>A new matrix value (range).</returns>
        </member>
        <member name="M:YAMP.RangeValue.Serialize">
            <summary>
            Tries to serialize the contents into bytes.
            </summary>
            <returns>The raw data.</returns>
        </member>
        <member name="M:YAMP.RangeValue.Deserialize(System.Byte[])">
            <summary>
            Tries to create a new instance from the given bytes.
            </summary>
            <param name="content">The binary content.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="P:YAMP.RangeValue.Step">
            <summary>
            Gets the specified step size.
            </summary>
        </member>
        <member name="P:YAMP.RangeValue.Start">
            <summary>
            Gets the specified offset.
            </summary>
        </member>
        <member name="P:YAMP.RangeValue.End">
            <summary>
            Gets the specified tail.
            </summary>
        </member>
        <member name="P:YAMP.RangeValue.All">
            <summary>
            Gets a boolean to indicate whether all elements (of the
            target object) should be used.
            </summary>
        </member>
        <member name="P:YAMP.RangeValue.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an entry in the range.
            </summary>
            <param name="j">The 1-based row-index.</param>
            <param name="i">The 1-based column-index.</param>
            <returns>The value behind the index.</returns>
        </member>
        <member name="T:YAMP.ArgumentsValue">
            <summary>
            The value type for containing an array of arbitrary Value instances.
            This class is used for transporting arguments as well as returning
            multiple output Value instances.
            </summary>
        </member>
        <member name="M:YAMP.ArgumentsValue.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:YAMP.ArgumentsValue.#ctor(YAMP.Value[])">
            <summary>
            Creates a new instance containing the specified values.
            </summary>
            <param name="values">The values to include.</param>
        </member>
        <member name="M:YAMP.ArgumentsValue.Serialize">
            <summary>
            Serializes the instance.
            </summary>
            <returns>The binary content for creating such an instance again.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.Deserialize(System.Byte[])">
            <summary>
            Create a new instance from the given binary content.
            </summary>
            <param name="content">The content in bytes.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.First">
            <summary>
            Gets the first value contained in the arguments.
            </summary>
            <returns>The first value or null.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.Last">
            <summary>
            Gets the last value contained in the arguments.
            </summary>
            <returns>The last value or null.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.Append(YAMP.Value)">
            <summary>
            Appends a value or a list of values to the list of values.
            </summary>
            <param name="value">The instance to append to the list.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.ToArray">
            <summary>
            Returns an array of the contained values.
            </summary>
            <returns>The array with all the values.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.Insert(YAMP.Value)">
            <summary>
            Inserts a value to the end of the list. A list of values will be treated as one value.
            </summary>
            <param name="value">The instance to add to the list.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.Insert(System.Int32,YAMP.Value)">
            <summary>
            Inserts a value to the end of the list. A list of values will be treated as one value.
            </summary>
            <param name="index">Where to insert the value.</param>
            <param name="value">The instance to add to the list.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.Create(YAMP.Value,YAMP.Value)">
            <summary>
            Creates a new ArgumentsValue with 2 values.
            </summary>
            <param name="left">The first value to include.</param>
            <param name="right">The second value to include.</param>
            <returns>The new ArgumentsValue instance.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.ToString(YAMP.ParseContext)">
            <summary>
            Returns a string representation of the content.
            </summary>
            <param name="context">The context to consider.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.Perform(YAMP.ParseContext,YAMP.Value)">
            <summary>
            Uses the instance from YAMP like a function.
            </summary>
            <param name="context">The context in which this instance is used.</param>
            <param name="argument">The indices that have been specified.</param>
            <returns>The value behind the given index.</returns>
        </member>
        <member name="M:YAMP.ArgumentsValue.GetEnumerator">
            <summary>
            Gets an enumerator of this ArgumentsValue.
            </summary>
            <returns></returns>
        </member>
        <member name="P:YAMP.ArgumentsValue.Values">
            <summary>
            Gets the array of contained values.
            </summary>
        </member>
        <member name="P:YAMP.ArgumentsValue.Length">
            <summary>
            Gets the length of the list of values.
            </summary>
        </member>
        <member name="P:YAMP.ArgumentsValue.Item(System.Int32)">
            <summary>
            Gets or sets the value in the 1-based list of values.
            </summary>
            <param name="i">The 1-based (NOT 0-based!) index.</param>
            <returns>The Value of the corresponding index.</returns>
        </member>
        <member name="T:YAMP.LtOperator">
            <summary>
            This is the lighter than operator.
            </summary>
        </member>
        <member name="T:YAMP.GtOperator">
            <summary>
            The construction scheme for a greater than operator.
            </summary>
        </member>
        <member name="T:YAMP.NeqOperator">
            <summary>
            This is the not equal to operator ~= (attention: it is NOT !=).
            </summary>
        </member>
        <member name="T:YAMP.EqOperator">
            <summary>
            The basic equals == operator.
            </summary>
        </member>
    </members>
</doc>
